name: Deploy Playground

on:
  workflow_dispatch:
    inputs:
      gitRepo:
        description: 'Code repository'
        required: false
        default: 'https://github.com/Joystream/joystream.git'
      branchName:
        description: 'Branch to deploy'
        required: false
        default: 'master'
      runtimeProfile:
        description: 'STAGING | PLAYGROUND | TESTING - leave balnk for production'
        default: 'PLAYGROUND'
        required: false
      sshPubKey:
        description: 'SSH pubkey eg. `ssh-rsa AAAAB3NzaC1yc2EA....0hc3GND8IR mysshkey`'
        required: false
      stackNamePrefix:
        description: 'Additional identifier to include in stack name'
        required: false
        default: 'playground'
      skipChainSetup:
        description: 'Optionally skip running newChainSetup script (true or false)'
        required: false
        default: 'false'
      chainSetupScenario:
        description: 'Scenario name to run after chain stats'
        required: false
        default: 'setupNewChainMultiStorage'
      treasurySuri:
        description: 'SURI of treasury account'
        required: false
        default: '//Alice'
      initialBalances: 
        description: 'JSON string or http URL to override initial balances and vesting config'
        default: ''
        required: false
defaults:
  run:
    working-directory: devops/aws

jobs:
  deploy-playground:
    name: Deploy Playground Job
    runs-on: ubuntu-latest
    env:
      STACK_NAME: ${{ github.event.inputs.stackNamePrefix }}-${{ github.event.inputs.branchName }}-${{ github.run_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Ansible
        run: |
          pip3 install --upgrade --user ansible
          pipx inject ansible-core boto3 botocore
          ansible-playbook --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # When changing region double check ami image is available in deploy step
          aws-region: eu-central-1

      - name: Check if CloudFormation stack exists
        id: stack_exists
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} >/dev/null 2>/dev/null; then
            echo "Stack already exists"
            exit 1
          else
            echo "Stack does not exist"
          fi

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        id: deploy_stack
        with:
          name: ${{ env.STACK_NAME }}
          template: devops/aws/cloudformation/single-instance.yml
          no-fail-on-empty-changeset: '1'
          # Make sure ami image is available in the region specified in configure aws creds step
          parameter-overrides: 'KeyName=joystream-github-action-key-new,EC2InstanceType=t2.xlarge,EC2AMI=ami-06b4d9ba1f23a8da4'

      - name: Wait for docker build server to be ready
        run: |
          sleep 30

      - name: Run playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: deploy-playground-playbook.yml
          directory: devops/ansible
          requirements: requirements.yml
          key: ${{Â secrets.SSH_PRIVATE_KEY }}
          inventory: |
            ${{ steps.deploy_stack.outputs.PublicIp }}
          options: |
            --extra-vars "git_repo=${{ github.event.inputs.gitRepo }} \
                          branch_name=${{ github.event.inputs.branchName }} \
                          skip_chain_setup=${{ github.event.inputs.skipChainSetup }} \
                          stack_name=${{ env.STACK_NAME }} \
                          runtime_profile=${{ github.event.inputs.runtimeProfile }} \
                          ssh_pub_key='${{ github.event.inputs.sshPubKey }}' \
                          treasury_suri='${{ github.event.inputs.treasurySuri }}' \
                          initial_balances='${{ github.event.inputs.initialBalances }}' \
                          init_chain_scenario='${{ github.event.inputs.chainSetupScenario }}'"
            --verbose

      - name: Save the endpoints file as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: endpoints
          path: devops/ansible/endpoints.json

      - name: Delete CloudFormation Stack if any step failed
        # Skip only if stack already existed or all steps passed successfully
        if: ( failure() || cancelled() ) && steps.stack_exists.outcome != 'failure'
        run: |
          echo "Deleting ${{ env.STACK_NAME }} stack"
          aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
          echo "Waiting for ${{ env.STACK_NAME }} to be deleted..."
          aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}
