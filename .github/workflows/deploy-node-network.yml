name: Deploy Network

on:
  workflow_dispatch:
    inputs:
      networkConfiguration:
        description: 'Configuration (refer to .pipelines/deploy-node-network-inputs.json)'
        required: true
        default: ''

defaults:
  run:
    working-directory: devops/aws

jobs:
  deploy-node-network:
    name: Create CloudFormation stack and run Ansible playbook
    runs-on: ubuntu-latest
    env:
      STACK_NAME: network-deployment-${{ github.run_number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set env variables
        id: network_config # set the outputs
        run: |
          jsonInput=$(jq -r '.inputs.networkConfiguration' $GITHUB_EVENT_PATH)
          export ENCRYPTION_KEY=$(echo $jsonInput | jq -r '.encryptionKey.value')
          echo ::set-output name=encryptionKey::$ENCRYPTION_KEY
          echo "::add-mask::$ENCRYPTION_KEY"
          echo ::set-output name=gitRepo::$(echo $jsonInput | jq -r '.gitRepo.value')
          echo ::set-output name=branchName::$(echo $jsonInput | jq -r '.branchName.value')
          echo ::set-output name=numberOfValidators::$(echo $jsonInput | jq -r '.numberOfValidators.value')
          echo ::set-output name=validatorInstanceType::$(echo $jsonInput | jq -r '.validatorInstanceType.value')
          echo ::set-output name=buildInstanceType::$(echo $jsonInput | jq -r '.buildInstanceType.value')
          echo ::set-output name=rpcInstanceType::$(echo $jsonInput | jq -r '.rpcInstanceType.value')
          echo ::set-output name=joystreamAmi::$(echo $jsonInput | jq -r '.joystreamAmi.value')
          echo ::set-output name=networkName::$(echo $jsonInput | jq -r '.networkName.value')
          echo ::set-output name=deploymentType::$(echo $jsonInput | jq -r '.deploymentType.value')
          echo ::set-output name=volumeSize::$(echo $jsonInput | jq -r '.volumeSize.value')
          echo ::set-output name=runtimeProfile::$(echo $jsonInput | jq -r '.runtimeProfile.value')
          echo ::set-output name=endowAccounts::$(echo $jsonInput | jq -r '.endowAccounts.value')
          initialBalancesFile=$(echo $jsonInput | jq -r '.initialBalancesFile.value')

          if [ -z "$initialBalancesFile" ]
          then
            echo ::set-output name=initialBalancesFilePath::''
          else
            wget $initialBalancesFile -O initial-balances.json
            echo ::set-output name=initialBalancesFilePath::'initial-balances.json'
          fi

      - name: Install Ansible dependencies
        run: pipx inject ansible-core boto3 botocore

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check if CloudFormation stack exists
        id: stack_exists
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} >/dev/null 2>/dev/null; then
            echo "Stack already exists"
            exit 1
          else
            echo "Stack does not exist"
          fi

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        id: deploy_stack
        with:
          name: ${{ env.STACK_NAME }}
          template: devops/aws/cloudformation/infrastructure.yml
          no-fail-on-empty-changeset: '1'
          parameter-overrides: >-
            KeyName=joystream-github-action-key-new,
            ValidatorEC2InstanceType=${{ steps.network_config.outputs.validatorInstanceType }},
            RPCEC2InstanceType=${{ steps.network_config.outputs.rpcInstanceType }},
            BuildEC2InstanceType=${{ steps.network_config.outputs.buildInstanceType }},
            JoystreamAmi=${{ steps.network_config.outputs.joystreamAmi }},
            NumberOfValidators=${{ steps.network_config.outputs.numberOfValidators }},
            VolumeSize=${{ steps.network_config.outputs.volumeSize }},
            NumberOfStorageNodes=0,
            NumberOfDistributorNodes=0,
            TotalNumberOfInstancesInGroups=${{ steps.network_config.outputs.numberOfValidators }}

      - name: Prepare inventory for Ansible
        run: |
          ASG=${{ steps.deploy_stack.outputs.ValidatorsAutoScalingId }}

          VALIDATORS=""

          INSTANCES=$(aws autoscaling describe-auto-scaling-instances \
            --query "AutoScalingInstances[?AutoScalingGroupName=='${ASG}'].InstanceId" --output text);

          for ID in $INSTANCES
          do
            IP=$(aws ec2 describe-instances --instance-ids $ID --query "Reservations[].Instances[].PublicIpAddress" --output text)
            VALIDATORS+="$IP\n"
          done

          echo -e "[build]\n${{ steps.deploy_stack.outputs.BuildPublicIp }}\n" >> inventory
          echo -e "[validators]\n$VALIDATORS" >> inventory
          echo -e "[rpc]\n${{ steps.deploy_stack.outputs.RPCPublicIp }}" >> inventory
          cat inventory

      - name: Run playbook to setup all hosts and compile joystream-node
        uses: dawidd6/action-ansible-playbook@v2
        # Build binaries if AMI not specified
        if: steps.network_config.outputs.joystreamAmi == ''
        with:
          playbook: build-code.yml
          directory: devops/aws
          requirements: requirements.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory inventory
            --extra-vars "branch_name=${{ steps.network_config.outputs.branchName }} \
                          git_repo=${{ steps.network_config.outputs.gitRepo }} data_path=deploy_artifacts \
                          runtime_profile=${{ steps.network_config.outputs.runtimeProfile }}"
            --verbose

      - name: Run playbook to configure chain-spec
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: configure-network.yml
          directory: devops/aws
          requirements: requirements.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory inventory
            --extra-vars "network_name=${{ steps.network_config.outputs.networkName }} data_path=deploy_artifacts \
                          number_of_validators=${{ steps.network_config.outputs.numberOfValidators }} \
                          number_of_storage_nodes=0 \
                          number_of_distributor_nodes=0 \
                          git_repo=${{ steps.network_config.outputs.gitRepo }} \
                          deployment_type=${{ steps.network_config.outputs.deploymentType }} \
                          branch_name=${{ steps.network_config.outputs.branchName }} \
                          initial_balances_file=${{ steps.network_config.outputs.initialBalancesFilePath }} \
                          endow_accounts=${{ steps.network_config.outputs.endowAccounts }}"
            --verbose

      - name: Terminate Build instance
        continue-on-error: true
        run: |
          echo "Deleting build instance with id ${{ steps.deploy_stack.outputs.BuildInstanceId }}"
          aws ec2 terminate-instances --instance-ids ${{ steps.deploy_stack.outputs.BuildInstanceId }}

      - name: Encrpyt the artifacts
        run: |
          7z a -p${{ steps.network_config.outputs.encryptionKey }} chain-data.7z deploy_artifacts/*

      - name: Save the output as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: data-chainspec-auth
          path: devops/aws/chain-data.7z

      - name: Delete CloudFormation Stack if any step failed
        # Skip only if stack already existed or all steps passed succesfully
        if: ( failure() || cancelled() ) && steps.stack_exists.outcome != 'failure'
        run: |
          echo "Deleting ${{ env.STACK_NAME }} stack"
          aws cloudformation delete-stack --stack-name ${{ env.STACK_NAME }}
          echo "Waiting for ${{ env.STACK_NAME }} to be deleted..."
          aws cloudformation wait stack-delete-complete --stack-name ${{ env.STACK_NAME }}
