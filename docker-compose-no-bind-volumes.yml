# Complete joystream development network
services:
  joystream-node:
    image: joystream/node:$JOYSTREAM_NODE_TAG
    restart: unless-stopped
    container_name: joystream-node
    volumes:
      - chain-data:/data
    environment:
      - CHAIN=${CHAIN}
    command: "--chain ${CHAIN:-dev} --alice --validator --pruning=archive --unsafe-ws-external --unsafe-rpc-external
      --rpc-methods Safe --rpc-cors=all --log runtime --base-path /data --no-hardware-benchmarks"
    ports:
      - 9944:9944
      - 9933:9933

  colossus-1:
    image: joystream/storage-node
    build:
      context: .
      dockerfile: colossus.Dockerfile
    container_name: colossus-1
    restart: on-failure
    volumes:
      - colossus-1-data:/data
      - colossus-1-keystore:/keystore
      - colossus-1-logs:/logs
    working_dir: /joystream/storage-node
    ports:
      - 3333:3333
    env_file:
      - .env
    environment:
      # ACCOUNT_URI overrides command line arg --accountUri
      - ACCOUNT_URI=${COLOSSUS_1_TRANSACTOR_URI}
      # - OTEL_EXPORTER_OTLP_ENDPOINT=http://apm-server:8200
      # - OTEL_RESOURCE_ATTRIBUTES=service.name=colossus-1,deployment.environment=production
    entrypoint: ['yarn']
    command: [
      'start', '--worker=${COLOSSUS_1_WORKER_ID}', '--port=3333', '--uploads=/data/uploads',
      '--sync', '--syncInterval=1',
      '--storageSquidEndpoint=${COLOSSUS_STORAGE_SQUID_URL}',
      '--apiUrl=${JOYSTREAM_NODE_WS}',
      '--logFilePath=/logs',
      '--tempFolder=/data/temp/',
      '--pendingFolder=/data/pending/'
    ]

  distributor-1:
    image: joystream/distributor-node
    build:
      context: .
      dockerfile: distributor-node.Dockerfile
    container_name: distributor-1
    restart: on-failure
    volumes:
      - distributor-1-data:/data
      - distributor-1-cache:/cache
      - distributor-1-logs:/logs
    # let the working_dir be the distributor node to pickup the config.yml file
    working_dir: /joystream/distributor-node
    ports:
      - 3334:3334
      - 127.0.0.1:4334:4334
    env_file:
      - .env
    # Node configuration can be overriden via env, for exampe:
    environment:
      JOYSTREAM_DISTRIBUTOR__ID: distributor-1
      JOYSTREAM_DISTRIBUTOR__ENDPOINTS__STORAGE_SQUID: ${DISTRIBUTOR_STORAGE_SQUID_URL}
      JOYSTREAM_DISTRIBUTOR__KEYS: "[{\"suri\":\"${DISTRIBUTOR_1_ACCOUNT_URI}\"}]"
      JOYSTREAM_DISTRIBUTOR__WORKER_ID: ${DISTRIBUTOR_1_WORKER_ID}
      JOYSTREAM_DISTRIBUTOR__PUBLIC_API__PORT: 3334
      JOYSTREAM_DISTRIBUTOR__OPERATOR_API__PORT: 4334
      JOYSTREAM_DISTRIBUTOR__ENDPOINTS__JOYSTREAM_NODE_WS: ${JOYSTREAM_NODE_WS}
      JOYSTREAM_DISTRIBUTOR__DIRECTORIES__ASSETS: /data
      JOYSTREAM_DISTRIBUTOR__DIRECTORIES__CACHE_STATE: /cache
      JOYSTREAM_DISTRIBUTOR__LOGS__FILE__PATH: /logs
      # OTEL_EXPORTER_OTLP_ENDPOINT: http://apm-server:8200
      # OTEL_RESOURCE_ATTRIBUTES: service.name=distributor-1,deployment.environment=production
    #   JOYSTREAM_DISTRIBUTOR__LOGS__CONSOLE: "off"
    #   JOYSTREAM_DISTRIBUTOR__LOGS__FILE: "off"
      # JOYSTREAM_DISTRIBUTOR__LOGS__ELASTIC: "{\"level\":\"debug\",\"endpoint\":\"http://elasticsearch:9200\"}"
    #   JOYSTREAM_DISTRIBUTOR__LIMITS__STORAGE: 50G
    #   JOYSTREAM_DISTRIBUTOR__BUCKETS: "[\"1:0\",\"1:1\"]"
    entrypoint: ['yarn']
    command: ['start']

  colossus-2:
    image: joystream/storage-node
    container_name: colossus-2
    restart: on-failure
    volumes:
      - colossus-2-data:/data
      - colossus-2-keystore:/keystore
      - colossus-2-logs:/logs
    working_dir: /joystream/storage-node
    ports:
      - 3335:3333
    env_file:
      - .env
    environment:
      # ACCOUNT_URI overrides command line arg --accountUri
      - ACCOUNT_URI=${COLOSSUS_2_TRANSACTOR_URI}
    entrypoint: ['yarn', 'storage-node']
    command: [
      'server', '--worker=${COLOSSUS_2_WORKER_ID}', '--port=3333', '--uploads=/data/uploads',
      '--sync', '--syncInterval=1',
      '--storageSquidEndpoint=${COLOSSUS_STORAGE_SQUID_URL}',
      '--apiUrl=${JOYSTREAM_NODE_WS}',
      '--logFilePath=/logs',
      '--tempFolder=/data/temp/',
      '--pendingFolder=/data/pending/'
    ]

  distributor-2:
    image: joystream/distributor-node
    container_name: distributor-2
    restart: on-failure
    volumes:
      - distributor-2-data:/data
      - distributor-2-cache:/cache
      - distributor-2-logs:/logs
    # let the working_dir be the distributor node to pickup the config.yml file
    working_dir: /joystream/distributor-node
    ports:
      - 3336:3334
      - 127.0.0.1:4336:4334
    env_file:
      - .env
    # Node configuration can be overriden via env, for exampe:
    environment:
      JOYSTREAM_DISTRIBUTOR__ID: distributor-2
      JOYSTREAM_DISTRIBUTOR__ENDPOINTS__STORAGE_SQUID: ${DISTRIBUTOR_STORAGE_SQUID_URL}
      JOYSTREAM_DISTRIBUTOR__KEYS: "[{\"suri\":\"${DISTRIBUTOR_2_ACCOUNT_URI}\"}]"
      JOYSTREAM_DISTRIBUTOR__WORKER_ID: ${DISTRIBUTOR_2_WORKER_ID}
      JOYSTREAM_DISTRIBUTOR__PUBLIC_API__PORT: 3334
      JOYSTREAM_DISTRIBUTOR__OPERATOR_API__PORT: 4334
      JOYSTREAM_DISTRIBUTOR__ENDPOINTS__JOYSTREAM_NODE_WS: ${JOYSTREAM_NODE_WS}
      JOYSTREAM_DISTRIBUTOR__DIRECTORIES__ASSETS: /data
      JOYSTREAM_DISTRIBUTOR__DIRECTORIES__CACHE_STATE: /cache
      JOYSTREAM_DISTRIBUTOR__LOGS__FILE__PATH: /logs
    #   JOYSTREAM_DISTRIBUTOR__ENDPOINTS__ELASTIC_SEARCH: es-endpoint
    #   JOYSTREAM_DISTRIBUTOR__LOGS__CONSOLE: "off"
    #   JOYSTREAM_DISTRIBUTOR__LOGS__FILE: "off"
    #   JOYSTREAM_DISTRIBUTOR__LOGS__ELASTIC: "off"
    #   JOYSTREAM_DISTRIBUTOR__LIMITS__STORAGE: 50G
    #   JOYSTREAM_DISTRIBUTOR__BUCKETS: "[\"1:0\",\"1:1\"]"
    entrypoint: ['yarn', 'joystream-distributor']
    command: ['start']

  db:
    image: postgres:12
    container_name: db
    restart: unless-stopped
    ports:
      - '127.0.0.1:${DB_PORT}:${DB_PORT}'
    volumes:
      - query-node-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${INDEXER_DB_NAME}
      PGPORT: ${DB_PORT}

  graphql-server:
    image: joystream/query-node
    build:
      context: .
      dockerfile: query-node.Dockerfile
    container_name: graphql-server
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - WARTHOG_APP_PORT=${GRAPHQL_SERVER_PORT}
      - GRAPHQL_PLAYGROUND_ENDPOINT=${GRAPHQL_PLAYGROUND_ENDPOINT}
      - GRAPHQL_PLAYGROUND_SUBSCRIPTION_ENDPOINT=${GRAPHQL_PLAYGROUND_SUBSCRIPTION_ENDPOINT}
      - GRAPHQL_PLAYGROUND_CDN_URL=${GRAPHQL_PLAYGROUND_CDN_URL}
      # - OTEL_EXPORTER_OTLP_ENDPOINT=http://apm-server:8200
      # - OTEL_RESOURCE_ATTRIBUTES=service.name=query-node,deployment.environment=production
    ports:
      - "${GRAPHQL_SERVER_PORT}:${GRAPHQL_SERVER_PORT}"
      - "127.0.0.1:${PROCESSOR_STATE_APP_PORT}:${PROCESSOR_STATE_APP_PORT}"
    depends_on:
      - db
    working_dir: /joystream
    entrypoint: ['yarn']
    command: ['workspace', 'query-node-root', 'query-node:start:prod']

  processor:
    image: joystream/query-node
    container_name: processor
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - INDEXER_ENDPOINT_URL=${PROCESSOR_INDEXER_GATEWAY}
      - TYPEORM_HOST=db
      - TYPEORM_DATABASE=${DB_NAME}
      - BATCH_SIZE=100
      - QUEUE_FACTOR=1
      - QUEUE_MAX_CAP_FACTOR=4
      - WARTHOG_DB_HOST=db
      - WARTHOG_DB_DATABASE=${DB_NAME}
      - WARTHOG_DB_USERNAME=${DB_USER}
      - WARTHOG_DB_PASSWORD=${DB_PASS}
      - WARTHOG_APP_PORT=4002
    depends_on:
      - db
    working_dir: /joystream
    entrypoint: sh
    command: >
      -c "
        yarn workspace query-node-root db:prepare ;
        yarn workspace query-node-root db:migrate ;
        yarn workspace query-node-root processor:start
      "

  indexer:
    image: joystream/hydra-indexer:v5.0.0-alpha.7
    container_name: indexer
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DB_NAME=${INDEXER_DB_NAME}
      - WORKERS_NUMBER=5
      - REDIS_URI=redis://redis:6379/0
      - WS_PROVIDER_ENDPOINT_URI=${JOYSTREAM_NODE_WS}
      - DB_HOST=db
      - PGSSLMODE=disable
    depends_on:
      - db
      - redis
    volumes:
      - ./types/augment/all/defs.json:/home/hydra/packages/hydra-indexer/types.json
    command: >
      sh -c "yarn db:bootstrap && yarn start:prod"

  hydra-indexer-gateway:
    image: joystream/hydra-indexer-gateway:5.0.0-alpha.7
    container_name: hydra-indexer-gateway
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - WARTHOG_STARTER_DB_DATABASE=${INDEXER_DB_NAME}
      - WARTHOG_STARTER_DB_HOST=db
      - WARTHOG_STARTER_DB_PASSWORD=${DB_PASS}
      - WARTHOG_STARTER_DB_PORT=${DB_PORT}
      - WARTHOG_STARTER_DB_USERNAME=${DB_USER}
      - WARTHOG_STARTER_REDIS_URI=redis://redis:6379/0
      - WARTHOG_APP_PORT=${HYDRA_INDEXER_GATEWAY_PORT}
      - PORT=${HYDRA_INDEXER_GATEWAY_PORT}
      - PGSSLMODE=disable
    ports:
      - "${HYDRA_INDEXER_GATEWAY_PORT}:${HYDRA_INDEXER_GATEWAY_PORT}"
    depends_on:
      - db
      - redis

  redis:
    image: redis:6.0-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"

  faucet:
    image: joystream/faucet:carthage
    restart: unless-stopped
    container_name: faucet
    env_file:
      - .env
    environment:
      - INVITER_KEY=${INVITER_KEY}
      - PORT=3002
      - PROVIDER=${JOYSTREAM_NODE_WS}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - HCAPTCHA_SECRET=${HCAPTCHA_SECRET}
      - ALERT_TO_EMAIL=${ALERT_TO_EMAIL}
      - ALERT_FROM_EMAIL=${ALERT_FROM_EMAIL}
      - BALANCE_CREDIT=${BALANCE_CREDIT}
      - BALANCE_LOCKED=${BALANCE_LOCKED}
    ports:
      - "3002:3002"

  orion-db:
    image: postgres:14
    container_name: orion-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${ORION_DB_PASS}
      POSTGRES_DB: ${ORION_DB_NAME}
    ports:
      - '127.0.0.1:${ORION_DB_PORT}:${ORION_DB_PORT}'
    command: ['postgres', '-c', 'config_file=/etc/postgresql/postgresql.conf', '-p', '${ORION_DB_PORT}']
    # command: ['postgres', '-p', '${ORION_DB_PORT}']
    shm_size: 1.1g # A bit higher than `shared_buffers` value in postgres.conf
    volumes:
      - orion-db-data:/var/lib/postgresql/data
      - ./orion-postgres.conf:/etc/postgresql/postgresql.conf

  # Orion processor
  orion-processor:
    image: joystream/orion:latest
    container_name: orion-processor
    restart: unless-stopped
    depends_on:
      - orion-db
    env_file:
      - .env
    environment:
      - DB_NAME=${ORION_DB_NAME}
      - DB_PASS=${ORION_DB_PASS}
      - DB_PORT=${ORION_DB_PORT}
      - DB_HOST=orion-db
      - GQL_PORT=${GRAPHQL_API_PORT}
    volumes:
      - ./db/export:/squid/db/export
    command: >
      sh -c "npx squid-typeorm-migration apply && \
             node lib/processor.js"
    ports:
      - '127.0.0.1:${PROCESSOR_PROMETHEUS_PORT}:${PROCESSOR_PROMETHEUS_PORT}'

  # Orion GraphQL API
  orion-graphql-api:
    container_name: orion-graphql-api
    image: joystream/orion:latest
    restart: unless-stopped
    depends_on:
      - orion-db
    env_file:
      - .env
    environment:
      - DB_NAME=${ORION_DB_NAME}
      - DB_PASS=${ORION_DB_PASS}
      - DB_PORT=${ORION_DB_PORT}
      - DB_HOST=orion-db
      - GQL_PORT=${GRAPHQL_API_PORT}
    command: ['npm', 'run', 'query-node-start']
    ports:
      - '127.0.0.1:${GRAPHQL_API_PORT}:${GRAPHQL_API_PORT}'

  # Orion Authentication API
  orion-auth-api:
    container_name: orion-auth-api
    image: joystream/orion:latest
    restart: unless-stopped
    depends_on:
      - orion-db
    env_file:
      - .env
    environment:
      - DB_NAME=${ORION_DB_NAME}
      - DB_PASS=${ORION_DB_PASS}
      - DB_PORT=${ORION_DB_PORT}
      - DB_HOST=orion-db
      - SENDGRID_API_KEY=${ORION_SENDGRID_API_KEY}
      - SENDGRID_FROM_EMAIL=${ORION_SENDGRID_FROM_EMAIL}
    command: ['npm', 'run', 'auth-server-start']
    ports:
      - '127.0.0.1:${AUTH_API_PORT}:${AUTH_API_PORT}'

  # Orion archive node
  squid-archive-db:
    container_name: orion_archive_db
    hostname: orion_archive_db
    image: postgres:14 # CockroachDB cluster might be a better fit for production deployment
    restart: unless-stopped
    volumes:
      - orion_archive_db_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: squid-archive
    ports:
      - '127.0.0.1:${ARCHIVE_DB_PORT}:${ARCHIVE_DB_PORT}'
      - '[::1]:${ARCHIVE_DB_PORT}:${ARCHIVE_DB_PORT}'
    command: ['postgres', '-c', 'log_statement=all', '-p', '${ARCHIVE_DB_PORT}']

  squid-archive-ingest:
    container_name: orion_archive_ingest
    depends_on:
      - squid-archive-db
    restart: unless-stopped
    env_file:
      - .env
    image: subsquid/substrate-ingest:firesquid
    command: [
        '-e',
        '${WS_SOURCE}',
        '-c',
        '20', # allow up to 20 pending requests for the above endpoint (default is 5)
        #  "--start-block", "1000000", # uncomment to specify a non-zero start block
        '--out',
        'postgres://postgres:postgres@orion_archive_db:${ARCHIVE_DB_PORT}/squid-archive',
      ]

  squid-archive-gateway:
    container_name: orion_archive_gateway
    hostname: orion_archive_gateway
    depends_on:
      - squid-archive-db
    restart: unless-stopped
    image: subsquid/substrate-gateway:firesquid
    env_file:
      - .env
    environment:
      DATABASE_MAX_CONNECTIONS: 5
      RUST_LOG: 'actix_web=info,actix_server=info'
    command: [
        '--database-url',
        'postgres://postgres:postgres@orion_archive_db:${ARCHIVE_DB_PORT}/squid-archive',
      ]
    ports:
      - '127.0.0.1:${ARCHIVE_GATEWAY_PORT}:8000'
      - '[::1]:${ARCHIVE_GATEWAY_PORT}:8000'

  # Explorer service is optional.
  # It provides rich GraphQL API for querying archived data.
  # Many developers find it very useful for exploration and debugging.
  squid-archive-explorer:
    container_name: orion_archive_explorer
    hostname: orion_archive_explorer
    restart: unless-stopped
    image: subsquid/substrate-explorer:firesquid
    env_file:
      - .env
    environment:
      DB_TYPE: postgres # set to `cockroach` for Cockroach DB
      DB_HOST: orion_archive_db
      DB_NAME: 'squid-archive'
      DB_USER: 'postgres'
      DB_PASS: 'postgres'
      DB_PORT: ${ARCHIVE_DB_PORT}
    ports:
      - '${ARCHIVE_EXPLORER_PORT}:3000'

volumes:
  chain-data:
    driver: local
  query-node-data:
    driver: local
  colossus-1-data:
    driver: local
  colossus-1-keystore:
    driver: local
  colossus-1-logs:
    driver: local
  colossus-2-data:
    driver: local
  colossus-2-keystore:
    driver: local
  colossus-2-logs:
    driver: local
  distributor-1-logs:
    driver: local
  distributor-1-cache:
    driver: local
  distributor-1-data:
    driver: local
  distributor-2-logs:
    driver: local
  distributor-2-cache:
    driver: local
  distributor-2-data:
    driver: local
  orion-db-data:
    driver: local
  orion_archive_db_data:
    driver: local
