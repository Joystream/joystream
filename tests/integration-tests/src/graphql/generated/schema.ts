export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */
  DateTime: any
  /** GraphQL representation of BigInt */
  BigInt: any
  /** GraphQL representation of Bytes */
  Bytes: any
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSONObject: any
}

export type Query = {
  announcingPeriodStartedEventByUniqueInput?: Maybe<AnnouncingPeriodStartedEvent>
  announcingPeriodStartedEvents: Array<AnnouncingPeriodStartedEvent>
  announcingPeriodStartedEventsConnection: AnnouncingPeriodStartedEventConnection
  applicationFormQuestionAnswerByUniqueInput?: Maybe<ApplicationFormQuestionAnswer>
  applicationFormQuestionAnswers: Array<ApplicationFormQuestionAnswer>
  applicationFormQuestionAnswersConnection: ApplicationFormQuestionAnswerConnection
  applicationFormQuestionByUniqueInput?: Maybe<ApplicationFormQuestion>
  applicationFormQuestions: Array<ApplicationFormQuestion>
  applicationFormQuestionsConnection: ApplicationFormQuestionConnection
  applicationWithdrawnEventByUniqueInput?: Maybe<ApplicationWithdrawnEvent>
  applicationWithdrawnEvents: Array<ApplicationWithdrawnEvent>
  applicationWithdrawnEventsConnection: ApplicationWithdrawnEventConnection
  appliedOnOpeningEventByUniqueInput?: Maybe<AppliedOnOpeningEvent>
  appliedOnOpeningEvents: Array<AppliedOnOpeningEvent>
  appliedOnOpeningEventsConnection: AppliedOnOpeningEventConnection
  auctionBidCanceledEventByUniqueInput?: Maybe<AuctionBidCanceledEvent>
  auctionBidCanceledEvents: Array<AuctionBidCanceledEvent>
  auctionBidCanceledEventsConnection: AuctionBidCanceledEventConnection
  auctionBidMadeEventByUniqueInput?: Maybe<AuctionBidMadeEvent>
  auctionBidMadeEvents: Array<AuctionBidMadeEvent>
  auctionBidMadeEventsConnection: AuctionBidMadeEventConnection
  auctionByUniqueInput?: Maybe<Auction>
  auctionCanceledEventByUniqueInput?: Maybe<AuctionCanceledEvent>
  auctionCanceledEvents: Array<AuctionCanceledEvent>
  auctionCanceledEventsConnection: AuctionCanceledEventConnection
  auctions: Array<Auction>
  auctionsConnection: AuctionConnection
  auctionStartedEventByUniqueInput?: Maybe<AuctionStartedEvent>
  auctionStartedEvents: Array<AuctionStartedEvent>
  auctionStartedEventsConnection: AuctionStartedEventConnection
  bidByUniqueInput?: Maybe<Bid>
  bidMadeCompletingAuctionEventByUniqueInput?: Maybe<BidMadeCompletingAuctionEvent>
  bidMadeCompletingAuctionEvents: Array<BidMadeCompletingAuctionEvent>
  bidMadeCompletingAuctionEventsConnection: BidMadeCompletingAuctionEventConnection
  bids: Array<Bid>
  bidsConnection: BidConnection
  budgetBalanceSetEventByUniqueInput?: Maybe<BudgetBalanceSetEvent>
  budgetBalanceSetEvents: Array<BudgetBalanceSetEvent>
  budgetBalanceSetEventsConnection: BudgetBalanceSetEventConnection
  budgetIncrementUpdatedEventByUniqueInput?: Maybe<BudgetIncrementUpdatedEvent>
  budgetIncrementUpdatedEvents: Array<BudgetIncrementUpdatedEvent>
  budgetIncrementUpdatedEventsConnection: BudgetIncrementUpdatedEventConnection
  budgetRefillEventByUniqueInput?: Maybe<BudgetRefillEvent>
  budgetRefillEvents: Array<BudgetRefillEvent>
  budgetRefillEventsConnection: BudgetRefillEventConnection
  budgetRefillPlannedEventByUniqueInput?: Maybe<BudgetRefillPlannedEvent>
  budgetRefillPlannedEvents: Array<BudgetRefillPlannedEvent>
  budgetRefillPlannedEventsConnection: BudgetRefillPlannedEventConnection
  budgetSetEventByUniqueInput?: Maybe<BudgetSetEvent>
  budgetSetEvents: Array<BudgetSetEvent>
  budgetSetEventsConnection: BudgetSetEventConnection
  budgetSpendingEventByUniqueInput?: Maybe<BudgetSpendingEvent>
  budgetSpendingEvents: Array<BudgetSpendingEvent>
  budgetSpendingEventsConnection: BudgetSpendingEventConnection
  buyNowCanceledEventByUniqueInput?: Maybe<BuyNowCanceledEvent>
  buyNowCanceledEvents: Array<BuyNowCanceledEvent>
  buyNowCanceledEventsConnection: BuyNowCanceledEventConnection
  candidacyNoteMetadata: Array<CandidacyNoteMetadata>
  candidacyNoteMetadataByUniqueInput?: Maybe<CandidacyNoteMetadata>
  candidacyNoteMetadataConnection: CandidacyNoteMetadataConnection
  candidacyNoteSetEventByUniqueInput?: Maybe<CandidacyNoteSetEvent>
  candidacyNoteSetEvents: Array<CandidacyNoteSetEvent>
  candidacyNoteSetEventsConnection: CandidacyNoteSetEventConnection
  candidacyStakeReleaseEventByUniqueInput?: Maybe<CandidacyStakeReleaseEvent>
  candidacyStakeReleaseEvents: Array<CandidacyStakeReleaseEvent>
  candidacyStakeReleaseEventsConnection: CandidacyStakeReleaseEventConnection
  candidacyWithdrawEventByUniqueInput?: Maybe<CandidacyWithdrawEvent>
  candidacyWithdrawEvents: Array<CandidacyWithdrawEvent>
  candidacyWithdrawEventsConnection: CandidacyWithdrawEventConnection
  candidateByUniqueInput?: Maybe<Candidate>
  candidates: Array<Candidate>
  candidatesConnection: CandidateConnection
  castVoteByUniqueInput?: Maybe<CastVote>
  castVotes: Array<CastVote>
  castVotesConnection: CastVoteConnection
  categoryArchivalStatusUpdatedEventByUniqueInput?: Maybe<CategoryArchivalStatusUpdatedEvent>
  categoryArchivalStatusUpdatedEvents: Array<CategoryArchivalStatusUpdatedEvent>
  categoryArchivalStatusUpdatedEventsConnection: CategoryArchivalStatusUpdatedEventConnection
  categoryCreatedEventByUniqueInput?: Maybe<CategoryCreatedEvent>
  categoryCreatedEvents: Array<CategoryCreatedEvent>
  categoryCreatedEventsConnection: CategoryCreatedEventConnection
  categoryDeletedEventByUniqueInput?: Maybe<CategoryDeletedEvent>
  categoryDeletedEvents: Array<CategoryDeletedEvent>
  categoryDeletedEventsConnection: CategoryDeletedEventConnection
  categoryMembershipOfModeratorUpdatedEventByUniqueInput?: Maybe<CategoryMembershipOfModeratorUpdatedEvent>
  categoryMembershipOfModeratorUpdatedEvents: Array<CategoryMembershipOfModeratorUpdatedEvent>
  categoryMembershipOfModeratorUpdatedEventsConnection: CategoryMembershipOfModeratorUpdatedEventConnection
  categoryStickyThreadUpdateEventByUniqueInput?: Maybe<CategoryStickyThreadUpdateEvent>
  categoryStickyThreadUpdateEvents: Array<CategoryStickyThreadUpdateEvent>
  categoryStickyThreadUpdateEventsConnection: CategoryStickyThreadUpdateEventConnection
  councilMemberByUniqueInput?: Maybe<CouncilMember>
  councilMembers: Array<CouncilMember>
  councilMembersConnection: CouncilMemberConnection
  councilorRewardUpdatedEventByUniqueInput?: Maybe<CouncilorRewardUpdatedEvent>
  councilorRewardUpdatedEvents: Array<CouncilorRewardUpdatedEvent>
  councilorRewardUpdatedEventsConnection: CouncilorRewardUpdatedEventConnection
  councilStageUpdateByUniqueInput?: Maybe<CouncilStageUpdate>
  councilStageUpdates: Array<CouncilStageUpdate>
  councilStageUpdatesConnection: CouncilStageUpdateConnection
  curatorByUniqueInput?: Maybe<Curator>
  curatorGroupByUniqueInput?: Maybe<CuratorGroup>
  curatorGroups: Array<CuratorGroup>
  curatorGroupsConnection: CuratorGroupConnection
  curators: Array<Curator>
  curatorsConnection: CuratorConnection
  distributionBucketByUniqueInput?: Maybe<DistributionBucket>
  distributionBucketFamilies: Array<DistributionBucketFamily>
  distributionBucketFamiliesConnection: DistributionBucketFamilyConnection
  distributionBucketFamilyByUniqueInput?: Maybe<DistributionBucketFamily>
  distributionBucketFamilyGeographicAreaByUniqueInput?: Maybe<DistributionBucketFamilyGeographicArea>
  distributionBucketFamilyGeographicAreas: Array<DistributionBucketFamilyGeographicArea>
  distributionBucketFamilyGeographicAreasConnection: DistributionBucketFamilyGeographicAreaConnection
  distributionBucketFamilyMetadata: Array<DistributionBucketFamilyMetadata>
  distributionBucketFamilyMetadataByUniqueInput?: Maybe<DistributionBucketFamilyMetadata>
  distributionBucketFamilyMetadataConnection: DistributionBucketFamilyMetadataConnection
  distributionBucketOperatorByUniqueInput?: Maybe<DistributionBucketOperator>
  distributionBucketOperatorMetadata: Array<DistributionBucketOperatorMetadata>
  distributionBucketOperatorMetadataByUniqueInput?: Maybe<DistributionBucketOperatorMetadata>
  distributionBucketOperatorMetadataConnection: DistributionBucketOperatorMetadataConnection
  distributionBucketOperators: Array<DistributionBucketOperator>
  distributionBucketOperatorsConnection: DistributionBucketOperatorConnection
  distributionBuckets: Array<DistributionBucket>
  distributionBucketsConnection: DistributionBucketConnection
  electedCouncilByUniqueInput?: Maybe<ElectedCouncil>
  electedCouncils: Array<ElectedCouncil>
  electedCouncilsConnection: ElectedCouncilConnection
  electionRoundByUniqueInput?: Maybe<ElectionRound>
  electionRounds: Array<ElectionRound>
  electionRoundsConnection: ElectionRoundConnection
  englishAuctionCompletedEventByUniqueInput?: Maybe<EnglishAuctionCompletedEvent>
  englishAuctionCompletedEvents: Array<EnglishAuctionCompletedEvent>
  englishAuctionCompletedEventsConnection: EnglishAuctionCompletedEventConnection
  events: Array<Event>
  forumCategories: Array<ForumCategory>
  forumCategoriesConnection: ForumCategoryConnection
  forumCategoryByUniqueInput?: Maybe<ForumCategory>
  forumPollAlternativeByUniqueInput?: Maybe<ForumPollAlternative>
  forumPollAlternatives: Array<ForumPollAlternative>
  forumPollAlternativesConnection: ForumPollAlternativeConnection
  forumPollByUniqueInput?: Maybe<ForumPoll>
  forumPolls: Array<ForumPoll>
  forumPollsConnection: ForumPollConnection
  forumPostByUniqueInput?: Maybe<ForumPost>
  forumPostReactionByUniqueInput?: Maybe<ForumPostReaction>
  forumPostReactions: Array<ForumPostReaction>
  forumPostReactionsConnection: ForumPostReactionConnection
  forumPosts: Array<ForumPost>
  forumPostsConnection: ForumPostConnection
  forumThreadByUniqueInput?: Maybe<ForumThread>
  forumThreads: Array<ForumThread>
  forumThreadsConnection: ForumThreadConnection
  forumThreadTagByUniqueInput?: Maybe<ForumThreadTag>
  forumThreadTags: Array<ForumThreadTag>
  forumThreadTagsConnection: ForumThreadTagConnection
  fundingRequestDestinationByUniqueInput?: Maybe<FundingRequestDestination>
  fundingRequestDestinations: Array<FundingRequestDestination>
  fundingRequestDestinationsConnection: FundingRequestDestinationConnection
  fundingRequestDestinationsListByUniqueInput?: Maybe<FundingRequestDestinationsList>
  fundingRequestDestinationsLists: Array<FundingRequestDestinationsList>
  fundingRequestDestinationsListsConnection: FundingRequestDestinationsListConnection
  geoCoordinates: Array<GeoCoordinates>
  geoCoordinatesByUniqueInput?: Maybe<GeoCoordinates>
  geoCoordinatesConnection: GeoCoordinatesConnection
  channelByUniqueInput?: Maybe<Channel>
  channelCategories: Array<ChannelCategory>
  channelCategoriesByName: Array<ChannelCategoriesByNameFtsOutput>
  channelCategoriesConnection: ChannelCategoryConnection
  channelCategoryByUniqueInput?: Maybe<ChannelCategory>
  channels: Array<Channel>
  channelsConnection: ChannelConnection
  initialInvitationBalanceUpdatedEventByUniqueInput?: Maybe<InitialInvitationBalanceUpdatedEvent>
  initialInvitationBalanceUpdatedEvents: Array<InitialInvitationBalanceUpdatedEvent>
  initialInvitationBalanceUpdatedEventsConnection: InitialInvitationBalanceUpdatedEventConnection
  initialInvitationCountUpdatedEventByUniqueInput?: Maybe<InitialInvitationCountUpdatedEvent>
  initialInvitationCountUpdatedEvents: Array<InitialInvitationCountUpdatedEvent>
  initialInvitationCountUpdatedEventsConnection: InitialInvitationCountUpdatedEventConnection
  invitesTransferredEventByUniqueInput?: Maybe<InvitesTransferredEvent>
  invitesTransferredEvents: Array<InvitesTransferredEvent>
  invitesTransferredEventsConnection: InvitesTransferredEventConnection
  languageByUniqueInput?: Maybe<Language>
  languages: Array<Language>
  languagesConnection: LanguageConnection
  leaderInvitationQuotaUpdatedEventByUniqueInput?: Maybe<LeaderInvitationQuotaUpdatedEvent>
  leaderInvitationQuotaUpdatedEvents: Array<LeaderInvitationQuotaUpdatedEvent>
  leaderInvitationQuotaUpdatedEventsConnection: LeaderInvitationQuotaUpdatedEventConnection
  leaderSetEventByUniqueInput?: Maybe<LeaderSetEvent>
  leaderSetEvents: Array<LeaderSetEvent>
  leaderSetEventsConnection: LeaderSetEventConnection
  leaderUnsetEventByUniqueInput?: Maybe<LeaderUnsetEvent>
  leaderUnsetEvents: Array<LeaderUnsetEvent>
  leaderUnsetEventsConnection: LeaderUnsetEventConnection
  licenseByUniqueInput?: Maybe<License>
  licenses: Array<License>
  licensesConnection: LicenseConnection
  memberAccountsUpdatedEventByUniqueInput?: Maybe<MemberAccountsUpdatedEvent>
  memberAccountsUpdatedEvents: Array<MemberAccountsUpdatedEvent>
  memberAccountsUpdatedEventsConnection: MemberAccountsUpdatedEventConnection
  memberInvitedEventByUniqueInput?: Maybe<MemberInvitedEvent>
  memberInvitedEvents: Array<MemberInvitedEvent>
  memberInvitedEventsConnection: MemberInvitedEventConnection
  memberMetadata: Array<MemberMetadata>
  memberMetadataByUniqueInput?: Maybe<MemberMetadata>
  memberMetadataConnection: MemberMetadataConnection
  memberProfileUpdatedEventByUniqueInput?: Maybe<MemberProfileUpdatedEvent>
  memberProfileUpdatedEvents: Array<MemberProfileUpdatedEvent>
  memberProfileUpdatedEventsConnection: MemberProfileUpdatedEventConnection
  membersByHandle: Array<MembersByHandleFtsOutput>
  membershipBoughtEventByUniqueInput?: Maybe<MembershipBoughtEvent>
  membershipBoughtEvents: Array<MembershipBoughtEvent>
  membershipBoughtEventsConnection: MembershipBoughtEventConnection
  membershipByUniqueInput?: Maybe<Membership>
  membershipPriceUpdatedEventByUniqueInput?: Maybe<MembershipPriceUpdatedEvent>
  membershipPriceUpdatedEvents: Array<MembershipPriceUpdatedEvent>
  membershipPriceUpdatedEventsConnection: MembershipPriceUpdatedEventConnection
  memberships: Array<Membership>
  membershipsConnection: MembershipConnection
  membershipSystemSnapshotByUniqueInput?: Maybe<MembershipSystemSnapshot>
  membershipSystemSnapshots: Array<MembershipSystemSnapshot>
  membershipSystemSnapshotsConnection: MembershipSystemSnapshotConnection
  memberVerificationStatusUpdatedEventByUniqueInput?: Maybe<MemberVerificationStatusUpdatedEvent>
  memberVerificationStatusUpdatedEvents: Array<MemberVerificationStatusUpdatedEvent>
  memberVerificationStatusUpdatedEventsConnection: MemberVerificationStatusUpdatedEventConnection
  newCandidateEventByUniqueInput?: Maybe<NewCandidateEvent>
  newCandidateEvents: Array<NewCandidateEvent>
  newCandidateEventsConnection: NewCandidateEventConnection
  newCouncilElectedEventByUniqueInput?: Maybe<NewCouncilElectedEvent>
  newCouncilElectedEvents: Array<NewCouncilElectedEvent>
  newCouncilElectedEventsConnection: NewCouncilElectedEventConnection
  newCouncilNotElectedEventByUniqueInput?: Maybe<NewCouncilNotElectedEvent>
  newCouncilNotElectedEvents: Array<NewCouncilNotElectedEvent>
  newCouncilNotElectedEventsConnection: NewCouncilNotElectedEventConnection
  newMissedRewardLevelReachedEventByUniqueInput?: Maybe<NewMissedRewardLevelReachedEvent>
  newMissedRewardLevelReachedEvents: Array<NewMissedRewardLevelReachedEvent>
  newMissedRewardLevelReachedEventsConnection: NewMissedRewardLevelReachedEventConnection
  nftBoughtEventByUniqueInput?: Maybe<NftBoughtEvent>
  nftBoughtEvents: Array<NftBoughtEvent>
  nftBoughtEventsConnection: NftBoughtEventConnection
  nftIssuedEventByUniqueInput?: Maybe<NftIssuedEvent>
  nftIssuedEvents: Array<NftIssuedEvent>
  nftIssuedEventsConnection: NftIssuedEventConnection
  nftSellOrderMadeEventByUniqueInput?: Maybe<NftSellOrderMadeEvent>
  nftSellOrderMadeEvents: Array<NftSellOrderMadeEvent>
  nftSellOrderMadeEventsConnection: NftSellOrderMadeEventConnection
  nodeLocationMetadata: Array<NodeLocationMetadata>
  nodeLocationMetadataByUniqueInput?: Maybe<NodeLocationMetadata>
  nodeLocationMetadataConnection: NodeLocationMetadataConnection
  notEnoughCandidatesEventByUniqueInput?: Maybe<NotEnoughCandidatesEvent>
  notEnoughCandidatesEvents: Array<NotEnoughCandidatesEvent>
  notEnoughCandidatesEventsConnection: NotEnoughCandidatesEventConnection
  offerAcceptedEventByUniqueInput?: Maybe<OfferAcceptedEvent>
  offerAcceptedEvents: Array<OfferAcceptedEvent>
  offerAcceptedEventsConnection: OfferAcceptedEventConnection
  offerCanceledEventByUniqueInput?: Maybe<OfferCanceledEvent>
  offerCanceledEvents: Array<OfferCanceledEvent>
  offerCanceledEventsConnection: OfferCanceledEventConnection
  offerStartedEventByUniqueInput?: Maybe<OfferStartedEvent>
  offerStartedEvents: Array<OfferStartedEvent>
  offerStartedEventsConnection: OfferStartedEventConnection
  openAuctionBidAcceptedEventByUniqueInput?: Maybe<OpenAuctionBidAcceptedEvent>
  openAuctionBidAcceptedEvents: Array<OpenAuctionBidAcceptedEvent>
  openAuctionBidAcceptedEventsConnection: OpenAuctionBidAcceptedEventConnection
  openingAddedEventByUniqueInput?: Maybe<OpeningAddedEvent>
  openingAddedEvents: Array<OpeningAddedEvent>
  openingAddedEventsConnection: OpeningAddedEventConnection
  openingCanceledEventByUniqueInput?: Maybe<OpeningCanceledEvent>
  openingCanceledEvents: Array<OpeningCanceledEvent>
  openingCanceledEventsConnection: OpeningCanceledEventConnection
  openingFilledEventByUniqueInput?: Maybe<OpeningFilledEvent>
  openingFilledEvents: Array<OpeningFilledEvent>
  openingFilledEventsConnection: OpeningFilledEventConnection
  ownedNftByUniqueInput?: Maybe<OwnedNft>
  ownedNfts: Array<OwnedNft>
  ownedNftsConnection: OwnedNftConnection
  postAddedEventByUniqueInput?: Maybe<PostAddedEvent>
  postAddedEvents: Array<PostAddedEvent>
  postAddedEventsConnection: PostAddedEventConnection
  postDeletedEventByUniqueInput?: Maybe<PostDeletedEvent>
  postDeletedEvents: Array<PostDeletedEvent>
  postDeletedEventsConnection: PostDeletedEventConnection
  postModeratedEventByUniqueInput?: Maybe<PostModeratedEvent>
  postModeratedEvents: Array<PostModeratedEvent>
  postModeratedEventsConnection: PostModeratedEventConnection
  postReactedEventByUniqueInput?: Maybe<PostReactedEvent>
  postReactedEvents: Array<PostReactedEvent>
  postReactedEventsConnection: PostReactedEventConnection
  postsByText: Array<PostsByTextFtsOutput>
  postTextUpdatedEventByUniqueInput?: Maybe<PostTextUpdatedEvent>
  postTextUpdatedEvents: Array<PostTextUpdatedEvent>
  postTextUpdatedEventsConnection: PostTextUpdatedEventConnection
  proposalByUniqueInput?: Maybe<Proposal>
  proposalCancelledEventByUniqueInput?: Maybe<ProposalCancelledEvent>
  proposalCancelledEvents: Array<ProposalCancelledEvent>
  proposalCancelledEventsConnection: ProposalCancelledEventConnection
  proposalCreatedEventByUniqueInput?: Maybe<ProposalCreatedEvent>
  proposalCreatedEvents: Array<ProposalCreatedEvent>
  proposalCreatedEventsConnection: ProposalCreatedEventConnection
  proposalDecisionMadeEventByUniqueInput?: Maybe<ProposalDecisionMadeEvent>
  proposalDecisionMadeEvents: Array<ProposalDecisionMadeEvent>
  proposalDecisionMadeEventsConnection: ProposalDecisionMadeEventConnection
  proposalDiscussionPostByUniqueInput?: Maybe<ProposalDiscussionPost>
  proposalDiscussionPostCreatedEventByUniqueInput?: Maybe<ProposalDiscussionPostCreatedEvent>
  proposalDiscussionPostCreatedEvents: Array<ProposalDiscussionPostCreatedEvent>
  proposalDiscussionPostCreatedEventsConnection: ProposalDiscussionPostCreatedEventConnection
  proposalDiscussionPostDeletedEventByUniqueInput?: Maybe<ProposalDiscussionPostDeletedEvent>
  proposalDiscussionPostDeletedEvents: Array<ProposalDiscussionPostDeletedEvent>
  proposalDiscussionPostDeletedEventsConnection: ProposalDiscussionPostDeletedEventConnection
  proposalDiscussionPosts: Array<ProposalDiscussionPost>
  proposalDiscussionPostsConnection: ProposalDiscussionPostConnection
  proposalDiscussionPostUpdatedEventByUniqueInput?: Maybe<ProposalDiscussionPostUpdatedEvent>
  proposalDiscussionPostUpdatedEvents: Array<ProposalDiscussionPostUpdatedEvent>
  proposalDiscussionPostUpdatedEventsConnection: ProposalDiscussionPostUpdatedEventConnection
  proposalDiscussionThreadByUniqueInput?: Maybe<ProposalDiscussionThread>
  proposalDiscussionThreadModeChangedEventByUniqueInput?: Maybe<ProposalDiscussionThreadModeChangedEvent>
  proposalDiscussionThreadModeChangedEvents: Array<ProposalDiscussionThreadModeChangedEvent>
  proposalDiscussionThreadModeChangedEventsConnection: ProposalDiscussionThreadModeChangedEventConnection
  proposalDiscussionThreads: Array<ProposalDiscussionThread>
  proposalDiscussionThreadsConnection: ProposalDiscussionThreadConnection
  proposalDiscussionWhitelistByUniqueInput?: Maybe<ProposalDiscussionWhitelist>
  proposalDiscussionWhitelists: Array<ProposalDiscussionWhitelist>
  proposalDiscussionWhitelistsConnection: ProposalDiscussionWhitelistConnection
  proposalExecutedEventByUniqueInput?: Maybe<ProposalExecutedEvent>
  proposalExecutedEvents: Array<ProposalExecutedEvent>
  proposalExecutedEventsConnection: ProposalExecutedEventConnection
  proposals: Array<Proposal>
  proposalsByTitle: Array<ProposalsByTitleFtsOutput>
  proposalsConnection: ProposalConnection
  proposalStatusUpdatedEventByUniqueInput?: Maybe<ProposalStatusUpdatedEvent>
  proposalStatusUpdatedEvents: Array<ProposalStatusUpdatedEvent>
  proposalStatusUpdatedEventsConnection: ProposalStatusUpdatedEventConnection
  proposalVotedEventByUniqueInput?: Maybe<ProposalVotedEvent>
  proposalVotedEvents: Array<ProposalVotedEvent>
  proposalVotedEventsConnection: ProposalVotedEventConnection
  referendumFinishedEventByUniqueInput?: Maybe<ReferendumFinishedEvent>
  referendumFinishedEvents: Array<ReferendumFinishedEvent>
  referendumFinishedEventsConnection: ReferendumFinishedEventConnection
  referendumStageRevealingByUniqueInput?: Maybe<ReferendumStageRevealing>
  referendumStageRevealings: Array<ReferendumStageRevealing>
  referendumStageRevealingsConnection: ReferendumStageRevealingConnection
  referendumStageVotingByUniqueInput?: Maybe<ReferendumStageVoting>
  referendumStageVotings: Array<ReferendumStageVoting>
  referendumStageVotingsConnection: ReferendumStageVotingConnection
  referendumStartedEventByUniqueInput?: Maybe<ReferendumStartedEvent>
  referendumStartedEvents: Array<ReferendumStartedEvent>
  referendumStartedEventsConnection: ReferendumStartedEventConnection
  referendumStartedForcefullyEventByUniqueInput?: Maybe<ReferendumStartedForcefullyEvent>
  referendumStartedForcefullyEvents: Array<ReferendumStartedForcefullyEvent>
  referendumStartedForcefullyEventsConnection: ReferendumStartedForcefullyEventConnection
  referralCutUpdatedEventByUniqueInput?: Maybe<ReferralCutUpdatedEvent>
  referralCutUpdatedEvents: Array<ReferralCutUpdatedEvent>
  referralCutUpdatedEventsConnection: ReferralCutUpdatedEventConnection
  requestFundedEventByUniqueInput?: Maybe<RequestFundedEvent>
  requestFundedEvents: Array<RequestFundedEvent>
  requestFundedEventsConnection: RequestFundedEventConnection
  revealingStageStartedEventByUniqueInput?: Maybe<RevealingStageStartedEvent>
  revealingStageStartedEvents: Array<RevealingStageStartedEvent>
  revealingStageStartedEventsConnection: RevealingStageStartedEventConnection
  rewardPaidEventByUniqueInput?: Maybe<RewardPaidEvent>
  rewardPaidEvents: Array<RewardPaidEvent>
  rewardPaidEventsConnection: RewardPaidEventConnection
  rewardPaymentEventByUniqueInput?: Maybe<RewardPaymentEvent>
  rewardPaymentEvents: Array<RewardPaymentEvent>
  rewardPaymentEventsConnection: RewardPaymentEventConnection
  runtimeWasmBytecodeByUniqueInput?: Maybe<RuntimeWasmBytecode>
  runtimeWasmBytecodes: Array<RuntimeWasmBytecode>
  runtimeWasmBytecodesConnection: RuntimeWasmBytecodeConnection
  search: Array<SearchFtsOutput>
  stakeDecreasedEventByUniqueInput?: Maybe<StakeDecreasedEvent>
  stakeDecreasedEvents: Array<StakeDecreasedEvent>
  stakeDecreasedEventsConnection: StakeDecreasedEventConnection
  stakeIncreasedEventByUniqueInput?: Maybe<StakeIncreasedEvent>
  stakeIncreasedEvents: Array<StakeIncreasedEvent>
  stakeIncreasedEventsConnection: StakeIncreasedEventConnection
  stakeReleasedEventByUniqueInput?: Maybe<StakeReleasedEvent>
  stakeReleasedEvents: Array<StakeReleasedEvent>
  stakeReleasedEventsConnection: StakeReleasedEventConnection
  stakeSlashedEventByUniqueInput?: Maybe<StakeSlashedEvent>
  stakeSlashedEvents: Array<StakeSlashedEvent>
  stakeSlashedEventsConnection: StakeSlashedEventConnection
  stakingAccountAddedEventByUniqueInput?: Maybe<StakingAccountAddedEvent>
  stakingAccountAddedEvents: Array<StakingAccountAddedEvent>
  stakingAccountAddedEventsConnection: StakingAccountAddedEventConnection
  stakingAccountConfirmedEventByUniqueInput?: Maybe<StakingAccountConfirmedEvent>
  stakingAccountConfirmedEvents: Array<StakingAccountConfirmedEvent>
  stakingAccountConfirmedEventsConnection: StakingAccountConfirmedEventConnection
  stakingAccountRemovedEventByUniqueInput?: Maybe<StakingAccountRemovedEvent>
  stakingAccountRemovedEvents: Array<StakingAccountRemovedEvent>
  stakingAccountRemovedEventsConnection: StakingAccountRemovedEventConnection
  statusTextChangedEventByUniqueInput?: Maybe<StatusTextChangedEvent>
  statusTextChangedEvents: Array<StatusTextChangedEvent>
  statusTextChangedEventsConnection: StatusTextChangedEventConnection
  storageBagByUniqueInput?: Maybe<StorageBag>
  storageBags: Array<StorageBag>
  storageBagsConnection: StorageBagConnection
  storageBucketByUniqueInput?: Maybe<StorageBucket>
  storageBucketOperatorMetadata: Array<StorageBucketOperatorMetadata>
  storageBucketOperatorMetadataByUniqueInput?: Maybe<StorageBucketOperatorMetadata>
  storageBucketOperatorMetadataConnection: StorageBucketOperatorMetadataConnection
  storageBuckets: Array<StorageBucket>
  storageBucketsConnection: StorageBucketConnection
  storageDataObjectByUniqueInput?: Maybe<StorageDataObject>
  storageDataObjects: Array<StorageDataObject>
  storageDataObjectsConnection: StorageDataObjectConnection
  storageSystemParameters: Array<StorageSystemParameters>
  storageSystemParametersByUniqueInput?: Maybe<StorageSystemParameters>
  storageSystemParametersConnection: StorageSystemParametersConnection
  terminatedLeaderEventByUniqueInput?: Maybe<TerminatedLeaderEvent>
  terminatedLeaderEvents: Array<TerminatedLeaderEvent>
  terminatedLeaderEventsConnection: TerminatedLeaderEventConnection
  terminatedWorkerEventByUniqueInput?: Maybe<TerminatedWorkerEvent>
  terminatedWorkerEvents: Array<TerminatedWorkerEvent>
  terminatedWorkerEventsConnection: TerminatedWorkerEventConnection
  threadCreatedEventByUniqueInput?: Maybe<ThreadCreatedEvent>
  threadCreatedEvents: Array<ThreadCreatedEvent>
  threadCreatedEventsConnection: ThreadCreatedEventConnection
  threadDeletedEventByUniqueInput?: Maybe<ThreadDeletedEvent>
  threadDeletedEvents: Array<ThreadDeletedEvent>
  threadDeletedEventsConnection: ThreadDeletedEventConnection
  threadMetadataUpdatedEventByUniqueInput?: Maybe<ThreadMetadataUpdatedEvent>
  threadMetadataUpdatedEvents: Array<ThreadMetadataUpdatedEvent>
  threadMetadataUpdatedEventsConnection: ThreadMetadataUpdatedEventConnection
  threadModeratedEventByUniqueInput?: Maybe<ThreadModeratedEvent>
  threadModeratedEvents: Array<ThreadModeratedEvent>
  threadModeratedEventsConnection: ThreadModeratedEventConnection
  threadMovedEventByUniqueInput?: Maybe<ThreadMovedEvent>
  threadMovedEvents: Array<ThreadMovedEvent>
  threadMovedEventsConnection: ThreadMovedEventConnection
  threadsByTitle: Array<ThreadsByTitleFtsOutput>
  transactionalStatusUpdateByUniqueInput?: Maybe<TransactionalStatusUpdate>
  transactionalStatusUpdates: Array<TransactionalStatusUpdate>
  transactionalStatusUpdatesConnection: TransactionalStatusUpdateConnection
  upcomingWorkingGroupOpeningByUniqueInput?: Maybe<UpcomingWorkingGroupOpening>
  upcomingWorkingGroupOpenings: Array<UpcomingWorkingGroupOpening>
  upcomingWorkingGroupOpeningsConnection: UpcomingWorkingGroupOpeningConnection
  videoByUniqueInput?: Maybe<Video>
  videoCategories: Array<VideoCategory>
  videoCategoriesByName: Array<VideoCategoriesByNameFtsOutput>
  videoCategoriesConnection: VideoCategoryConnection
  videoCategoryByUniqueInput?: Maybe<VideoCategory>
  videoMediaEncodingByUniqueInput?: Maybe<VideoMediaEncoding>
  videoMediaEncodings: Array<VideoMediaEncoding>
  videoMediaEncodingsConnection: VideoMediaEncodingConnection
  videoMediaMetadata: Array<VideoMediaMetadata>
  videoMediaMetadataByUniqueInput?: Maybe<VideoMediaMetadata>
  videoMediaMetadataConnection: VideoMediaMetadataConnection
  videos: Array<Video>
  videosConnection: VideoConnection
  voteCastEventByUniqueInput?: Maybe<VoteCastEvent>
  voteCastEvents: Array<VoteCastEvent>
  voteCastEventsConnection: VoteCastEventConnection
  voteOnPollEventByUniqueInput?: Maybe<VoteOnPollEvent>
  voteOnPollEvents: Array<VoteOnPollEvent>
  voteOnPollEventsConnection: VoteOnPollEventConnection
  voteRevealedEventByUniqueInput?: Maybe<VoteRevealedEvent>
  voteRevealedEvents: Array<VoteRevealedEvent>
  voteRevealedEventsConnection: VoteRevealedEventConnection
  votingPeriodStartedEventByUniqueInput?: Maybe<VotingPeriodStartedEvent>
  votingPeriodStartedEvents: Array<VotingPeriodStartedEvent>
  votingPeriodStartedEventsConnection: VotingPeriodStartedEventConnection
  workerByUniqueInput?: Maybe<Worker>
  workerExitedEventByUniqueInput?: Maybe<WorkerExitedEvent>
  workerExitedEvents: Array<WorkerExitedEvent>
  workerExitedEventsConnection: WorkerExitedEventConnection
  workerRewardAccountUpdatedEventByUniqueInput?: Maybe<WorkerRewardAccountUpdatedEvent>
  workerRewardAccountUpdatedEvents: Array<WorkerRewardAccountUpdatedEvent>
  workerRewardAccountUpdatedEventsConnection: WorkerRewardAccountUpdatedEventConnection
  workerRewardAmountUpdatedEventByUniqueInput?: Maybe<WorkerRewardAmountUpdatedEvent>
  workerRewardAmountUpdatedEvents: Array<WorkerRewardAmountUpdatedEvent>
  workerRewardAmountUpdatedEventsConnection: WorkerRewardAmountUpdatedEventConnection
  workerRoleAccountUpdatedEventByUniqueInput?: Maybe<WorkerRoleAccountUpdatedEvent>
  workerRoleAccountUpdatedEvents: Array<WorkerRoleAccountUpdatedEvent>
  workerRoleAccountUpdatedEventsConnection: WorkerRoleAccountUpdatedEventConnection
  workers: Array<Worker>
  workersConnection: WorkerConnection
  workerStartedLeavingEventByUniqueInput?: Maybe<WorkerStartedLeavingEvent>
  workerStartedLeavingEvents: Array<WorkerStartedLeavingEvent>
  workerStartedLeavingEventsConnection: WorkerStartedLeavingEventConnection
  workingGroupApplicationByUniqueInput?: Maybe<WorkingGroupApplication>
  workingGroupApplications: Array<WorkingGroupApplication>
  workingGroupApplicationsConnection: WorkingGroupApplicationConnection
  workingGroupByUniqueInput?: Maybe<WorkingGroup>
  workingGroupMetadata: Array<WorkingGroupMetadata>
  workingGroupMetadataByUniqueInput?: Maybe<WorkingGroupMetadata>
  workingGroupMetadataConnection: WorkingGroupMetadataConnection
  workingGroupOpeningByUniqueInput?: Maybe<WorkingGroupOpening>
  workingGroupOpeningMetadata: Array<WorkingGroupOpeningMetadata>
  workingGroupOpeningMetadataByUniqueInput?: Maybe<WorkingGroupOpeningMetadata>
  workingGroupOpeningMetadataConnection: WorkingGroupOpeningMetadataConnection
  workingGroupOpenings: Array<WorkingGroupOpening>
  workingGroupOpeningsConnection: WorkingGroupOpeningConnection
  workingGroups: Array<WorkingGroup>
  workingGroupsConnection: WorkingGroupConnection
}

export type QueryAnnouncingPeriodStartedEventByUniqueInputArgs = {
  where: AnnouncingPeriodStartedEventWhereUniqueInput
}

export type QueryAnnouncingPeriodStartedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AnnouncingPeriodStartedEventOrderByInput>>
  where?: InputMaybe<AnnouncingPeriodStartedEventWhereInput>
}

export type QueryAnnouncingPeriodStartedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AnnouncingPeriodStartedEventOrderByInput>>
  where?: InputMaybe<AnnouncingPeriodStartedEventWhereInput>
}

export type QueryApplicationFormQuestionAnswerByUniqueInputArgs = {
  where: ApplicationFormQuestionAnswerWhereUniqueInput
}

export type QueryApplicationFormQuestionAnswersArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ApplicationFormQuestionAnswerOrderByInput>>
  where?: InputMaybe<ApplicationFormQuestionAnswerWhereInput>
}

export type QueryApplicationFormQuestionAnswersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ApplicationFormQuestionAnswerOrderByInput>>
  where?: InputMaybe<ApplicationFormQuestionAnswerWhereInput>
}

export type QueryApplicationFormQuestionByUniqueInputArgs = {
  where: ApplicationFormQuestionWhereUniqueInput
}

export type QueryApplicationFormQuestionsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ApplicationFormQuestionOrderByInput>>
  where?: InputMaybe<ApplicationFormQuestionWhereInput>
}

export type QueryApplicationFormQuestionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ApplicationFormQuestionOrderByInput>>
  where?: InputMaybe<ApplicationFormQuestionWhereInput>
}

export type QueryApplicationWithdrawnEventByUniqueInputArgs = {
  where: ApplicationWithdrawnEventWhereUniqueInput
}

export type QueryApplicationWithdrawnEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ApplicationWithdrawnEventOrderByInput>>
  where?: InputMaybe<ApplicationWithdrawnEventWhereInput>
}

export type QueryApplicationWithdrawnEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ApplicationWithdrawnEventOrderByInput>>
  where?: InputMaybe<ApplicationWithdrawnEventWhereInput>
}

export type QueryAppliedOnOpeningEventByUniqueInputArgs = {
  where: AppliedOnOpeningEventWhereUniqueInput
}

export type QueryAppliedOnOpeningEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AppliedOnOpeningEventOrderByInput>>
  where?: InputMaybe<AppliedOnOpeningEventWhereInput>
}

export type QueryAppliedOnOpeningEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AppliedOnOpeningEventOrderByInput>>
  where?: InputMaybe<AppliedOnOpeningEventWhereInput>
}

export type QueryAuctionBidCanceledEventByUniqueInputArgs = {
  where: AuctionBidCanceledEventWhereUniqueInput
}

export type QueryAuctionBidCanceledEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionBidCanceledEventOrderByInput>>
  where?: InputMaybe<AuctionBidCanceledEventWhereInput>
}

export type QueryAuctionBidCanceledEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionBidCanceledEventOrderByInput>>
  where?: InputMaybe<AuctionBidCanceledEventWhereInput>
}

export type QueryAuctionBidMadeEventByUniqueInputArgs = {
  where: AuctionBidMadeEventWhereUniqueInput
}

export type QueryAuctionBidMadeEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionBidMadeEventOrderByInput>>
  where?: InputMaybe<AuctionBidMadeEventWhereInput>
}

export type QueryAuctionBidMadeEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionBidMadeEventOrderByInput>>
  where?: InputMaybe<AuctionBidMadeEventWhereInput>
}

export type QueryAuctionByUniqueInputArgs = {
  where: AuctionWhereUniqueInput
}

export type QueryAuctionCanceledEventByUniqueInputArgs = {
  where: AuctionCanceledEventWhereUniqueInput
}

export type QueryAuctionCanceledEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionCanceledEventOrderByInput>>
  where?: InputMaybe<AuctionCanceledEventWhereInput>
}

export type QueryAuctionCanceledEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionCanceledEventOrderByInput>>
  where?: InputMaybe<AuctionCanceledEventWhereInput>
}

export type QueryAuctionsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionOrderByInput>>
  where?: InputMaybe<AuctionWhereInput>
}

export type QueryAuctionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionOrderByInput>>
  where?: InputMaybe<AuctionWhereInput>
}

export type QueryAuctionStartedEventByUniqueInputArgs = {
  where: AuctionStartedEventWhereUniqueInput
}

export type QueryAuctionStartedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionStartedEventOrderByInput>>
  where?: InputMaybe<AuctionStartedEventWhereInput>
}

export type QueryAuctionStartedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<AuctionStartedEventOrderByInput>>
  where?: InputMaybe<AuctionStartedEventWhereInput>
}

export type QueryBidByUniqueInputArgs = {
  where: BidWhereUniqueInput
}

export type QueryBidMadeCompletingAuctionEventByUniqueInputArgs = {
  where: BidMadeCompletingAuctionEventWhereUniqueInput
}

export type QueryBidMadeCompletingAuctionEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BidMadeCompletingAuctionEventOrderByInput>>
  where?: InputMaybe<BidMadeCompletingAuctionEventWhereInput>
}

export type QueryBidMadeCompletingAuctionEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BidMadeCompletingAuctionEventOrderByInput>>
  where?: InputMaybe<BidMadeCompletingAuctionEventWhereInput>
}

export type QueryBidsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BidOrderByInput>>
  where?: InputMaybe<BidWhereInput>
}

export type QueryBidsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BidOrderByInput>>
  where?: InputMaybe<BidWhereInput>
}

export type QueryBudgetBalanceSetEventByUniqueInputArgs = {
  where: BudgetBalanceSetEventWhereUniqueInput
}

export type QueryBudgetBalanceSetEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetBalanceSetEventOrderByInput>>
  where?: InputMaybe<BudgetBalanceSetEventWhereInput>
}

export type QueryBudgetBalanceSetEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetBalanceSetEventOrderByInput>>
  where?: InputMaybe<BudgetBalanceSetEventWhereInput>
}

export type QueryBudgetIncrementUpdatedEventByUniqueInputArgs = {
  where: BudgetIncrementUpdatedEventWhereUniqueInput
}

export type QueryBudgetIncrementUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetIncrementUpdatedEventOrderByInput>>
  where?: InputMaybe<BudgetIncrementUpdatedEventWhereInput>
}

export type QueryBudgetIncrementUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetIncrementUpdatedEventOrderByInput>>
  where?: InputMaybe<BudgetIncrementUpdatedEventWhereInput>
}

export type QueryBudgetRefillEventByUniqueInputArgs = {
  where: BudgetRefillEventWhereUniqueInput
}

export type QueryBudgetRefillEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetRefillEventOrderByInput>>
  where?: InputMaybe<BudgetRefillEventWhereInput>
}

export type QueryBudgetRefillEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetRefillEventOrderByInput>>
  where?: InputMaybe<BudgetRefillEventWhereInput>
}

export type QueryBudgetRefillPlannedEventByUniqueInputArgs = {
  where: BudgetRefillPlannedEventWhereUniqueInput
}

export type QueryBudgetRefillPlannedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetRefillPlannedEventOrderByInput>>
  where?: InputMaybe<BudgetRefillPlannedEventWhereInput>
}

export type QueryBudgetRefillPlannedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetRefillPlannedEventOrderByInput>>
  where?: InputMaybe<BudgetRefillPlannedEventWhereInput>
}

export type QueryBudgetSetEventByUniqueInputArgs = {
  where: BudgetSetEventWhereUniqueInput
}

export type QueryBudgetSetEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetSetEventOrderByInput>>
  where?: InputMaybe<BudgetSetEventWhereInput>
}

export type QueryBudgetSetEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetSetEventOrderByInput>>
  where?: InputMaybe<BudgetSetEventWhereInput>
}

export type QueryBudgetSpendingEventByUniqueInputArgs = {
  where: BudgetSpendingEventWhereUniqueInput
}

export type QueryBudgetSpendingEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetSpendingEventOrderByInput>>
  where?: InputMaybe<BudgetSpendingEventWhereInput>
}

export type QueryBudgetSpendingEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BudgetSpendingEventOrderByInput>>
  where?: InputMaybe<BudgetSpendingEventWhereInput>
}

export type QueryBuyNowCanceledEventByUniqueInputArgs = {
  where: BuyNowCanceledEventWhereUniqueInput
}

export type QueryBuyNowCanceledEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BuyNowCanceledEventOrderByInput>>
  where?: InputMaybe<BuyNowCanceledEventWhereInput>
}

export type QueryBuyNowCanceledEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<BuyNowCanceledEventOrderByInput>>
  where?: InputMaybe<BuyNowCanceledEventWhereInput>
}

export type QueryCandidacyNoteMetadataArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidacyNoteMetadataOrderByInput>>
  where?: InputMaybe<CandidacyNoteMetadataWhereInput>
}

export type QueryCandidacyNoteMetadataByUniqueInputArgs = {
  where: CandidacyNoteMetadataWhereUniqueInput
}

export type QueryCandidacyNoteMetadataConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidacyNoteMetadataOrderByInput>>
  where?: InputMaybe<CandidacyNoteMetadataWhereInput>
}

export type QueryCandidacyNoteSetEventByUniqueInputArgs = {
  where: CandidacyNoteSetEventWhereUniqueInput
}

export type QueryCandidacyNoteSetEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidacyNoteSetEventOrderByInput>>
  where?: InputMaybe<CandidacyNoteSetEventWhereInput>
}

export type QueryCandidacyNoteSetEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidacyNoteSetEventOrderByInput>>
  where?: InputMaybe<CandidacyNoteSetEventWhereInput>
}

export type QueryCandidacyStakeReleaseEventByUniqueInputArgs = {
  where: CandidacyStakeReleaseEventWhereUniqueInput
}

export type QueryCandidacyStakeReleaseEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidacyStakeReleaseEventOrderByInput>>
  where?: InputMaybe<CandidacyStakeReleaseEventWhereInput>
}

export type QueryCandidacyStakeReleaseEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidacyStakeReleaseEventOrderByInput>>
  where?: InputMaybe<CandidacyStakeReleaseEventWhereInput>
}

export type QueryCandidacyWithdrawEventByUniqueInputArgs = {
  where: CandidacyWithdrawEventWhereUniqueInput
}

export type QueryCandidacyWithdrawEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidacyWithdrawEventOrderByInput>>
  where?: InputMaybe<CandidacyWithdrawEventWhereInput>
}

export type QueryCandidacyWithdrawEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidacyWithdrawEventOrderByInput>>
  where?: InputMaybe<CandidacyWithdrawEventWhereInput>
}

export type QueryCandidateByUniqueInputArgs = {
  where: CandidateWhereUniqueInput
}

export type QueryCandidatesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidateOrderByInput>>
  where?: InputMaybe<CandidateWhereInput>
}

export type QueryCandidatesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CandidateOrderByInput>>
  where?: InputMaybe<CandidateWhereInput>
}

export type QueryCastVoteByUniqueInputArgs = {
  where: CastVoteWhereUniqueInput
}

export type QueryCastVotesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CastVoteOrderByInput>>
  where?: InputMaybe<CastVoteWhereInput>
}

export type QueryCastVotesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CastVoteOrderByInput>>
  where?: InputMaybe<CastVoteWhereInput>
}

export type QueryCategoryArchivalStatusUpdatedEventByUniqueInputArgs = {
  where: CategoryArchivalStatusUpdatedEventWhereUniqueInput
}

export type QueryCategoryArchivalStatusUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryArchivalStatusUpdatedEventOrderByInput>>
  where?: InputMaybe<CategoryArchivalStatusUpdatedEventWhereInput>
}

export type QueryCategoryArchivalStatusUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryArchivalStatusUpdatedEventOrderByInput>>
  where?: InputMaybe<CategoryArchivalStatusUpdatedEventWhereInput>
}

export type QueryCategoryCreatedEventByUniqueInputArgs = {
  where: CategoryCreatedEventWhereUniqueInput
}

export type QueryCategoryCreatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryCreatedEventOrderByInput>>
  where?: InputMaybe<CategoryCreatedEventWhereInput>
}

export type QueryCategoryCreatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryCreatedEventOrderByInput>>
  where?: InputMaybe<CategoryCreatedEventWhereInput>
}

export type QueryCategoryDeletedEventByUniqueInputArgs = {
  where: CategoryDeletedEventWhereUniqueInput
}

export type QueryCategoryDeletedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryDeletedEventOrderByInput>>
  where?: InputMaybe<CategoryDeletedEventWhereInput>
}

export type QueryCategoryDeletedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryDeletedEventOrderByInput>>
  where?: InputMaybe<CategoryDeletedEventWhereInput>
}

export type QueryCategoryMembershipOfModeratorUpdatedEventByUniqueInputArgs = {
  where: CategoryMembershipOfModeratorUpdatedEventWhereUniqueInput
}

export type QueryCategoryMembershipOfModeratorUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryMembershipOfModeratorUpdatedEventOrderByInput>>
  where?: InputMaybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
}

export type QueryCategoryMembershipOfModeratorUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryMembershipOfModeratorUpdatedEventOrderByInput>>
  where?: InputMaybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
}

export type QueryCategoryStickyThreadUpdateEventByUniqueInputArgs = {
  where: CategoryStickyThreadUpdateEventWhereUniqueInput
}

export type QueryCategoryStickyThreadUpdateEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryStickyThreadUpdateEventOrderByInput>>
  where?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
}

export type QueryCategoryStickyThreadUpdateEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CategoryStickyThreadUpdateEventOrderByInput>>
  where?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
}

export type QueryCouncilMemberByUniqueInputArgs = {
  where: CouncilMemberWhereUniqueInput
}

export type QueryCouncilMembersArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CouncilMemberOrderByInput>>
  where?: InputMaybe<CouncilMemberWhereInput>
}

export type QueryCouncilMembersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CouncilMemberOrderByInput>>
  where?: InputMaybe<CouncilMemberWhereInput>
}

export type QueryCouncilorRewardUpdatedEventByUniqueInputArgs = {
  where: CouncilorRewardUpdatedEventWhereUniqueInput
}

export type QueryCouncilorRewardUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CouncilorRewardUpdatedEventOrderByInput>>
  where?: InputMaybe<CouncilorRewardUpdatedEventWhereInput>
}

export type QueryCouncilorRewardUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CouncilorRewardUpdatedEventOrderByInput>>
  where?: InputMaybe<CouncilorRewardUpdatedEventWhereInput>
}

export type QueryCouncilStageUpdateByUniqueInputArgs = {
  where: CouncilStageUpdateWhereUniqueInput
}

export type QueryCouncilStageUpdatesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CouncilStageUpdateOrderByInput>>
  where?: InputMaybe<CouncilStageUpdateWhereInput>
}

export type QueryCouncilStageUpdatesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CouncilStageUpdateOrderByInput>>
  where?: InputMaybe<CouncilStageUpdateWhereInput>
}

export type QueryCuratorByUniqueInputArgs = {
  where: CuratorWhereUniqueInput
}

export type QueryCuratorGroupByUniqueInputArgs = {
  where: CuratorGroupWhereUniqueInput
}

export type QueryCuratorGroupsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CuratorGroupOrderByInput>>
  where?: InputMaybe<CuratorGroupWhereInput>
}

export type QueryCuratorGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CuratorGroupOrderByInput>>
  where?: InputMaybe<CuratorGroupWhereInput>
}

export type QueryCuratorsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CuratorOrderByInput>>
  where?: InputMaybe<CuratorWhereInput>
}

export type QueryCuratorsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<CuratorOrderByInput>>
  where?: InputMaybe<CuratorWhereInput>
}

export type QueryDistributionBucketByUniqueInputArgs = {
  where: DistributionBucketWhereUniqueInput
}

export type QueryDistributionBucketFamiliesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketFamilyOrderByInput>>
  where?: InputMaybe<DistributionBucketFamilyWhereInput>
}

export type QueryDistributionBucketFamiliesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketFamilyOrderByInput>>
  where?: InputMaybe<DistributionBucketFamilyWhereInput>
}

export type QueryDistributionBucketFamilyByUniqueInputArgs = {
  where: DistributionBucketFamilyWhereUniqueInput
}

export type QueryDistributionBucketFamilyGeographicAreaByUniqueInputArgs = {
  where: DistributionBucketFamilyGeographicAreaWhereUniqueInput
}

export type QueryDistributionBucketFamilyGeographicAreasArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketFamilyGeographicAreaOrderByInput>>
  where?: InputMaybe<DistributionBucketFamilyGeographicAreaWhereInput>
}

export type QueryDistributionBucketFamilyGeographicAreasConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketFamilyGeographicAreaOrderByInput>>
  where?: InputMaybe<DistributionBucketFamilyGeographicAreaWhereInput>
}

export type QueryDistributionBucketFamilyMetadataArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketFamilyMetadataOrderByInput>>
  where?: InputMaybe<DistributionBucketFamilyMetadataWhereInput>
}

export type QueryDistributionBucketFamilyMetadataByUniqueInputArgs = {
  where: DistributionBucketFamilyMetadataWhereUniqueInput
}

export type QueryDistributionBucketFamilyMetadataConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketFamilyMetadataOrderByInput>>
  where?: InputMaybe<DistributionBucketFamilyMetadataWhereInput>
}

export type QueryDistributionBucketOperatorByUniqueInputArgs = {
  where: DistributionBucketOperatorWhereUniqueInput
}

export type QueryDistributionBucketOperatorMetadataArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketOperatorMetadataOrderByInput>>
  where?: InputMaybe<DistributionBucketOperatorMetadataWhereInput>
}

export type QueryDistributionBucketOperatorMetadataByUniqueInputArgs = {
  where: DistributionBucketOperatorMetadataWhereUniqueInput
}

export type QueryDistributionBucketOperatorMetadataConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketOperatorMetadataOrderByInput>>
  where?: InputMaybe<DistributionBucketOperatorMetadataWhereInput>
}

export type QueryDistributionBucketOperatorsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketOperatorOrderByInput>>
  where?: InputMaybe<DistributionBucketOperatorWhereInput>
}

export type QueryDistributionBucketOperatorsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketOperatorOrderByInput>>
  where?: InputMaybe<DistributionBucketOperatorWhereInput>
}

export type QueryDistributionBucketsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketOrderByInput>>
  where?: InputMaybe<DistributionBucketWhereInput>
}

export type QueryDistributionBucketsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<DistributionBucketOrderByInput>>
  where?: InputMaybe<DistributionBucketWhereInput>
}

export type QueryElectedCouncilByUniqueInputArgs = {
  where: ElectedCouncilWhereUniqueInput
}

export type QueryElectedCouncilsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ElectedCouncilOrderByInput>>
  where?: InputMaybe<ElectedCouncilWhereInput>
}

export type QueryElectedCouncilsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ElectedCouncilOrderByInput>>
  where?: InputMaybe<ElectedCouncilWhereInput>
}

export type QueryElectionRoundByUniqueInputArgs = {
  where: ElectionRoundWhereUniqueInput
}

export type QueryElectionRoundsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ElectionRoundOrderByInput>>
  where?: InputMaybe<ElectionRoundWhereInput>
}

export type QueryElectionRoundsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ElectionRoundOrderByInput>>
  where?: InputMaybe<ElectionRoundWhereInput>
}

export type QueryEnglishAuctionCompletedEventByUniqueInputArgs = {
  where: EnglishAuctionCompletedEventWhereUniqueInput
}

export type QueryEnglishAuctionCompletedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<EnglishAuctionCompletedEventOrderByInput>>
  where?: InputMaybe<EnglishAuctionCompletedEventWhereInput>
}

export type QueryEnglishAuctionCompletedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<EnglishAuctionCompletedEventOrderByInput>>
  where?: InputMaybe<EnglishAuctionCompletedEventWhereInput>
}

export type QueryEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<EventOrderByInput>>
  where?: InputMaybe<EventWhereInput>
}

export type QueryForumCategoriesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumCategoryOrderByInput>>
  where?: InputMaybe<ForumCategoryWhereInput>
}

export type QueryForumCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumCategoryOrderByInput>>
  where?: InputMaybe<ForumCategoryWhereInput>
}

export type QueryForumCategoryByUniqueInputArgs = {
  where: ForumCategoryWhereUniqueInput
}

export type QueryForumPollAlternativeByUniqueInputArgs = {
  where: ForumPollAlternativeWhereUniqueInput
}

export type QueryForumPollAlternativesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumPollAlternativeOrderByInput>>
  where?: InputMaybe<ForumPollAlternativeWhereInput>
}

export type QueryForumPollAlternativesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumPollAlternativeOrderByInput>>
  where?: InputMaybe<ForumPollAlternativeWhereInput>
}

export type QueryForumPollByUniqueInputArgs = {
  where: ForumPollWhereUniqueInput
}

export type QueryForumPollsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumPollOrderByInput>>
  where?: InputMaybe<ForumPollWhereInput>
}

export type QueryForumPollsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumPollOrderByInput>>
  where?: InputMaybe<ForumPollWhereInput>
}

export type QueryForumPostByUniqueInputArgs = {
  where: ForumPostWhereUniqueInput
}

export type QueryForumPostReactionByUniqueInputArgs = {
  where: ForumPostReactionWhereUniqueInput
}

export type QueryForumPostReactionsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumPostReactionOrderByInput>>
  where?: InputMaybe<ForumPostReactionWhereInput>
}

export type QueryForumPostReactionsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumPostReactionOrderByInput>>
  where?: InputMaybe<ForumPostReactionWhereInput>
}

export type QueryForumPostsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumPostOrderByInput>>
  where?: InputMaybe<ForumPostWhereInput>
}

export type QueryForumPostsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumPostOrderByInput>>
  where?: InputMaybe<ForumPostWhereInput>
}

export type QueryForumThreadByUniqueInputArgs = {
  where: ForumThreadWhereUniqueInput
}

export type QueryForumThreadsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumThreadOrderByInput>>
  where?: InputMaybe<ForumThreadWhereInput>
}

export type QueryForumThreadsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumThreadOrderByInput>>
  where?: InputMaybe<ForumThreadWhereInput>
}

export type QueryForumThreadTagByUniqueInputArgs = {
  where: ForumThreadTagWhereUniqueInput
}

export type QueryForumThreadTagsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumThreadTagOrderByInput>>
  where?: InputMaybe<ForumThreadTagWhereInput>
}

export type QueryForumThreadTagsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ForumThreadTagOrderByInput>>
  where?: InputMaybe<ForumThreadTagWhereInput>
}

export type QueryFundingRequestDestinationByUniqueInputArgs = {
  where: FundingRequestDestinationWhereUniqueInput
}

export type QueryFundingRequestDestinationsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<FundingRequestDestinationOrderByInput>>
  where?: InputMaybe<FundingRequestDestinationWhereInput>
}

export type QueryFundingRequestDestinationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<FundingRequestDestinationOrderByInput>>
  where?: InputMaybe<FundingRequestDestinationWhereInput>
}

export type QueryFundingRequestDestinationsListByUniqueInputArgs = {
  where: FundingRequestDestinationsListWhereUniqueInput
}

export type QueryFundingRequestDestinationsListsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<FundingRequestDestinationsListOrderByInput>>
  where?: InputMaybe<FundingRequestDestinationsListWhereInput>
}

export type QueryFundingRequestDestinationsListsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<FundingRequestDestinationsListOrderByInput>>
  where?: InputMaybe<FundingRequestDestinationsListWhereInput>
}

export type QueryGeoCoordinatesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<GeoCoordinatesOrderByInput>>
  where?: InputMaybe<GeoCoordinatesWhereInput>
}

export type QueryGeoCoordinatesByUniqueInputArgs = {
  where: GeoCoordinatesWhereUniqueInput
}

export type QueryGeoCoordinatesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<GeoCoordinatesOrderByInput>>
  where?: InputMaybe<GeoCoordinatesWhereInput>
}

export type QueryChannelByUniqueInputArgs = {
  where: ChannelWhereUniqueInput
}

export type QueryChannelCategoriesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ChannelCategoryOrderByInput>>
  where?: InputMaybe<ChannelCategoryWhereInput>
}

export type QueryChannelCategoriesByNameArgs = {
  limit?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  text: Scalars['String']
  whereChannelCategory?: InputMaybe<ChannelCategoryWhereInput>
}

export type QueryChannelCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ChannelCategoryOrderByInput>>
  where?: InputMaybe<ChannelCategoryWhereInput>
}

export type QueryChannelCategoryByUniqueInputArgs = {
  where: ChannelCategoryWhereUniqueInput
}

export type QueryChannelsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ChannelOrderByInput>>
  where?: InputMaybe<ChannelWhereInput>
}

export type QueryChannelsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ChannelOrderByInput>>
  where?: InputMaybe<ChannelWhereInput>
}

export type QueryInitialInvitationBalanceUpdatedEventByUniqueInputArgs = {
  where: InitialInvitationBalanceUpdatedEventWhereUniqueInput
}

export type QueryInitialInvitationBalanceUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<InitialInvitationBalanceUpdatedEventOrderByInput>>
  where?: InputMaybe<InitialInvitationBalanceUpdatedEventWhereInput>
}

export type QueryInitialInvitationBalanceUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<InitialInvitationBalanceUpdatedEventOrderByInput>>
  where?: InputMaybe<InitialInvitationBalanceUpdatedEventWhereInput>
}

export type QueryInitialInvitationCountUpdatedEventByUniqueInputArgs = {
  where: InitialInvitationCountUpdatedEventWhereUniqueInput
}

export type QueryInitialInvitationCountUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<InitialInvitationCountUpdatedEventOrderByInput>>
  where?: InputMaybe<InitialInvitationCountUpdatedEventWhereInput>
}

export type QueryInitialInvitationCountUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<InitialInvitationCountUpdatedEventOrderByInput>>
  where?: InputMaybe<InitialInvitationCountUpdatedEventWhereInput>
}

export type QueryInvitesTransferredEventByUniqueInputArgs = {
  where: InvitesTransferredEventWhereUniqueInput
}

export type QueryInvitesTransferredEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<InvitesTransferredEventOrderByInput>>
  where?: InputMaybe<InvitesTransferredEventWhereInput>
}

export type QueryInvitesTransferredEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<InvitesTransferredEventOrderByInput>>
  where?: InputMaybe<InvitesTransferredEventWhereInput>
}

export type QueryLanguageByUniqueInputArgs = {
  where: LanguageWhereUniqueInput
}

export type QueryLanguagesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LanguageOrderByInput>>
  where?: InputMaybe<LanguageWhereInput>
}

export type QueryLanguagesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LanguageOrderByInput>>
  where?: InputMaybe<LanguageWhereInput>
}

export type QueryLeaderInvitationQuotaUpdatedEventByUniqueInputArgs = {
  where: LeaderInvitationQuotaUpdatedEventWhereUniqueInput
}

export type QueryLeaderInvitationQuotaUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LeaderInvitationQuotaUpdatedEventOrderByInput>>
  where?: InputMaybe<LeaderInvitationQuotaUpdatedEventWhereInput>
}

export type QueryLeaderInvitationQuotaUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LeaderInvitationQuotaUpdatedEventOrderByInput>>
  where?: InputMaybe<LeaderInvitationQuotaUpdatedEventWhereInput>
}

export type QueryLeaderSetEventByUniqueInputArgs = {
  where: LeaderSetEventWhereUniqueInput
}

export type QueryLeaderSetEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LeaderSetEventOrderByInput>>
  where?: InputMaybe<LeaderSetEventWhereInput>
}

export type QueryLeaderSetEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LeaderSetEventOrderByInput>>
  where?: InputMaybe<LeaderSetEventWhereInput>
}

export type QueryLeaderUnsetEventByUniqueInputArgs = {
  where: LeaderUnsetEventWhereUniqueInput
}

export type QueryLeaderUnsetEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LeaderUnsetEventOrderByInput>>
  where?: InputMaybe<LeaderUnsetEventWhereInput>
}

export type QueryLeaderUnsetEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LeaderUnsetEventOrderByInput>>
  where?: InputMaybe<LeaderUnsetEventWhereInput>
}

export type QueryLicenseByUniqueInputArgs = {
  where: LicenseWhereUniqueInput
}

export type QueryLicensesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LicenseOrderByInput>>
  where?: InputMaybe<LicenseWhereInput>
}

export type QueryLicensesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<LicenseOrderByInput>>
  where?: InputMaybe<LicenseWhereInput>
}

export type QueryMemberAccountsUpdatedEventByUniqueInputArgs = {
  where: MemberAccountsUpdatedEventWhereUniqueInput
}

export type QueryMemberAccountsUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberAccountsUpdatedEventOrderByInput>>
  where?: InputMaybe<MemberAccountsUpdatedEventWhereInput>
}

export type QueryMemberAccountsUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberAccountsUpdatedEventOrderByInput>>
  where?: InputMaybe<MemberAccountsUpdatedEventWhereInput>
}

export type QueryMemberInvitedEventByUniqueInputArgs = {
  where: MemberInvitedEventWhereUniqueInput
}

export type QueryMemberInvitedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberInvitedEventOrderByInput>>
  where?: InputMaybe<MemberInvitedEventWhereInput>
}

export type QueryMemberInvitedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberInvitedEventOrderByInput>>
  where?: InputMaybe<MemberInvitedEventWhereInput>
}

export type QueryMemberMetadataArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberMetadataOrderByInput>>
  where?: InputMaybe<MemberMetadataWhereInput>
}

export type QueryMemberMetadataByUniqueInputArgs = {
  where: MemberMetadataWhereUniqueInput
}

export type QueryMemberMetadataConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberMetadataOrderByInput>>
  where?: InputMaybe<MemberMetadataWhereInput>
}

export type QueryMemberProfileUpdatedEventByUniqueInputArgs = {
  where: MemberProfileUpdatedEventWhereUniqueInput
}

export type QueryMemberProfileUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberProfileUpdatedEventOrderByInput>>
  where?: InputMaybe<MemberProfileUpdatedEventWhereInput>
}

export type QueryMemberProfileUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberProfileUpdatedEventOrderByInput>>
  where?: InputMaybe<MemberProfileUpdatedEventWhereInput>
}

export type QueryMembersByHandleArgs = {
  limit?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  text: Scalars['String']
  whereMembership?: InputMaybe<MembershipWhereInput>
}

export type QueryMembershipBoughtEventByUniqueInputArgs = {
  where: MembershipBoughtEventWhereUniqueInput
}

export type QueryMembershipBoughtEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MembershipBoughtEventOrderByInput>>
  where?: InputMaybe<MembershipBoughtEventWhereInput>
}

export type QueryMembershipBoughtEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MembershipBoughtEventOrderByInput>>
  where?: InputMaybe<MembershipBoughtEventWhereInput>
}

export type QueryMembershipByUniqueInputArgs = {
  where: MembershipWhereUniqueInput
}

export type QueryMembershipPriceUpdatedEventByUniqueInputArgs = {
  where: MembershipPriceUpdatedEventWhereUniqueInput
}

export type QueryMembershipPriceUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MembershipPriceUpdatedEventOrderByInput>>
  where?: InputMaybe<MembershipPriceUpdatedEventWhereInput>
}

export type QueryMembershipPriceUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MembershipPriceUpdatedEventOrderByInput>>
  where?: InputMaybe<MembershipPriceUpdatedEventWhereInput>
}

export type QueryMembershipsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MembershipOrderByInput>>
  where?: InputMaybe<MembershipWhereInput>
}

export type QueryMembershipsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MembershipOrderByInput>>
  where?: InputMaybe<MembershipWhereInput>
}

export type QueryMembershipSystemSnapshotByUniqueInputArgs = {
  where: MembershipSystemSnapshotWhereUniqueInput
}

export type QueryMembershipSystemSnapshotsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MembershipSystemSnapshotOrderByInput>>
  where?: InputMaybe<MembershipSystemSnapshotWhereInput>
}

export type QueryMembershipSystemSnapshotsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MembershipSystemSnapshotOrderByInput>>
  where?: InputMaybe<MembershipSystemSnapshotWhereInput>
}

export type QueryMemberVerificationStatusUpdatedEventByUniqueInputArgs = {
  where: MemberVerificationStatusUpdatedEventWhereUniqueInput
}

export type QueryMemberVerificationStatusUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberVerificationStatusUpdatedEventOrderByInput>>
  where?: InputMaybe<MemberVerificationStatusUpdatedEventWhereInput>
}

export type QueryMemberVerificationStatusUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<MemberVerificationStatusUpdatedEventOrderByInput>>
  where?: InputMaybe<MemberVerificationStatusUpdatedEventWhereInput>
}

export type QueryNewCandidateEventByUniqueInputArgs = {
  where: NewCandidateEventWhereUniqueInput
}

export type QueryNewCandidateEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NewCandidateEventOrderByInput>>
  where?: InputMaybe<NewCandidateEventWhereInput>
}

export type QueryNewCandidateEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NewCandidateEventOrderByInput>>
  where?: InputMaybe<NewCandidateEventWhereInput>
}

export type QueryNewCouncilElectedEventByUniqueInputArgs = {
  where: NewCouncilElectedEventWhereUniqueInput
}

export type QueryNewCouncilElectedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NewCouncilElectedEventOrderByInput>>
  where?: InputMaybe<NewCouncilElectedEventWhereInput>
}

export type QueryNewCouncilElectedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NewCouncilElectedEventOrderByInput>>
  where?: InputMaybe<NewCouncilElectedEventWhereInput>
}

export type QueryNewCouncilNotElectedEventByUniqueInputArgs = {
  where: NewCouncilNotElectedEventWhereUniqueInput
}

export type QueryNewCouncilNotElectedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NewCouncilNotElectedEventOrderByInput>>
  where?: InputMaybe<NewCouncilNotElectedEventWhereInput>
}

export type QueryNewCouncilNotElectedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NewCouncilNotElectedEventOrderByInput>>
  where?: InputMaybe<NewCouncilNotElectedEventWhereInput>
}

export type QueryNewMissedRewardLevelReachedEventByUniqueInputArgs = {
  where: NewMissedRewardLevelReachedEventWhereUniqueInput
}

export type QueryNewMissedRewardLevelReachedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NewMissedRewardLevelReachedEventOrderByInput>>
  where?: InputMaybe<NewMissedRewardLevelReachedEventWhereInput>
}

export type QueryNewMissedRewardLevelReachedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NewMissedRewardLevelReachedEventOrderByInput>>
  where?: InputMaybe<NewMissedRewardLevelReachedEventWhereInput>
}

export type QueryNftBoughtEventByUniqueInputArgs = {
  where: NftBoughtEventWhereUniqueInput
}

export type QueryNftBoughtEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NftBoughtEventOrderByInput>>
  where?: InputMaybe<NftBoughtEventWhereInput>
}

export type QueryNftBoughtEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NftBoughtEventOrderByInput>>
  where?: InputMaybe<NftBoughtEventWhereInput>
}

export type QueryNftIssuedEventByUniqueInputArgs = {
  where: NftIssuedEventWhereUniqueInput
}

export type QueryNftIssuedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NftIssuedEventOrderByInput>>
  where?: InputMaybe<NftIssuedEventWhereInput>
}

export type QueryNftIssuedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NftIssuedEventOrderByInput>>
  where?: InputMaybe<NftIssuedEventWhereInput>
}

export type QueryNftSellOrderMadeEventByUniqueInputArgs = {
  where: NftSellOrderMadeEventWhereUniqueInput
}

export type QueryNftSellOrderMadeEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NftSellOrderMadeEventOrderByInput>>
  where?: InputMaybe<NftSellOrderMadeEventWhereInput>
}

export type QueryNftSellOrderMadeEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NftSellOrderMadeEventOrderByInput>>
  where?: InputMaybe<NftSellOrderMadeEventWhereInput>
}

export type QueryNodeLocationMetadataArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NodeLocationMetadataOrderByInput>>
  where?: InputMaybe<NodeLocationMetadataWhereInput>
}

export type QueryNodeLocationMetadataByUniqueInputArgs = {
  where: NodeLocationMetadataWhereUniqueInput
}

export type QueryNodeLocationMetadataConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NodeLocationMetadataOrderByInput>>
  where?: InputMaybe<NodeLocationMetadataWhereInput>
}

export type QueryNotEnoughCandidatesEventByUniqueInputArgs = {
  where: NotEnoughCandidatesEventWhereUniqueInput
}

export type QueryNotEnoughCandidatesEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NotEnoughCandidatesEventOrderByInput>>
  where?: InputMaybe<NotEnoughCandidatesEventWhereInput>
}

export type QueryNotEnoughCandidatesEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<NotEnoughCandidatesEventOrderByInput>>
  where?: InputMaybe<NotEnoughCandidatesEventWhereInput>
}

export type QueryOfferAcceptedEventByUniqueInputArgs = {
  where: OfferAcceptedEventWhereUniqueInput
}

export type QueryOfferAcceptedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OfferAcceptedEventOrderByInput>>
  where?: InputMaybe<OfferAcceptedEventWhereInput>
}

export type QueryOfferAcceptedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OfferAcceptedEventOrderByInput>>
  where?: InputMaybe<OfferAcceptedEventWhereInput>
}

export type QueryOfferCanceledEventByUniqueInputArgs = {
  where: OfferCanceledEventWhereUniqueInput
}

export type QueryOfferCanceledEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OfferCanceledEventOrderByInput>>
  where?: InputMaybe<OfferCanceledEventWhereInput>
}

export type QueryOfferCanceledEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OfferCanceledEventOrderByInput>>
  where?: InputMaybe<OfferCanceledEventWhereInput>
}

export type QueryOfferStartedEventByUniqueInputArgs = {
  where: OfferStartedEventWhereUniqueInput
}

export type QueryOfferStartedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OfferStartedEventOrderByInput>>
  where?: InputMaybe<OfferStartedEventWhereInput>
}

export type QueryOfferStartedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OfferStartedEventOrderByInput>>
  where?: InputMaybe<OfferStartedEventWhereInput>
}

export type QueryOpenAuctionBidAcceptedEventByUniqueInputArgs = {
  where: OpenAuctionBidAcceptedEventWhereUniqueInput
}

export type QueryOpenAuctionBidAcceptedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OpenAuctionBidAcceptedEventOrderByInput>>
  where?: InputMaybe<OpenAuctionBidAcceptedEventWhereInput>
}

export type QueryOpenAuctionBidAcceptedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OpenAuctionBidAcceptedEventOrderByInput>>
  where?: InputMaybe<OpenAuctionBidAcceptedEventWhereInput>
}

export type QueryOpeningAddedEventByUniqueInputArgs = {
  where: OpeningAddedEventWhereUniqueInput
}

export type QueryOpeningAddedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OpeningAddedEventOrderByInput>>
  where?: InputMaybe<OpeningAddedEventWhereInput>
}

export type QueryOpeningAddedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OpeningAddedEventOrderByInput>>
  where?: InputMaybe<OpeningAddedEventWhereInput>
}

export type QueryOpeningCanceledEventByUniqueInputArgs = {
  where: OpeningCanceledEventWhereUniqueInput
}

export type QueryOpeningCanceledEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OpeningCanceledEventOrderByInput>>
  where?: InputMaybe<OpeningCanceledEventWhereInput>
}

export type QueryOpeningCanceledEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OpeningCanceledEventOrderByInput>>
  where?: InputMaybe<OpeningCanceledEventWhereInput>
}

export type QueryOpeningFilledEventByUniqueInputArgs = {
  where: OpeningFilledEventWhereUniqueInput
}

export type QueryOpeningFilledEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OpeningFilledEventOrderByInput>>
  where?: InputMaybe<OpeningFilledEventWhereInput>
}

export type QueryOpeningFilledEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OpeningFilledEventOrderByInput>>
  where?: InputMaybe<OpeningFilledEventWhereInput>
}

export type QueryOwnedNftByUniqueInputArgs = {
  where: OwnedNftWhereUniqueInput
}

export type QueryOwnedNftsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OwnedNftOrderByInput>>
  where?: InputMaybe<OwnedNftWhereInput>
}

export type QueryOwnedNftsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<OwnedNftOrderByInput>>
  where?: InputMaybe<OwnedNftWhereInput>
}

export type QueryPostAddedEventByUniqueInputArgs = {
  where: PostAddedEventWhereUniqueInput
}

export type QueryPostAddedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostAddedEventOrderByInput>>
  where?: InputMaybe<PostAddedEventWhereInput>
}

export type QueryPostAddedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostAddedEventOrderByInput>>
  where?: InputMaybe<PostAddedEventWhereInput>
}

export type QueryPostDeletedEventByUniqueInputArgs = {
  where: PostDeletedEventWhereUniqueInput
}

export type QueryPostDeletedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostDeletedEventOrderByInput>>
  where?: InputMaybe<PostDeletedEventWhereInput>
}

export type QueryPostDeletedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostDeletedEventOrderByInput>>
  where?: InputMaybe<PostDeletedEventWhereInput>
}

export type QueryPostModeratedEventByUniqueInputArgs = {
  where: PostModeratedEventWhereUniqueInput
}

export type QueryPostModeratedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostModeratedEventOrderByInput>>
  where?: InputMaybe<PostModeratedEventWhereInput>
}

export type QueryPostModeratedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostModeratedEventOrderByInput>>
  where?: InputMaybe<PostModeratedEventWhereInput>
}

export type QueryPostReactedEventByUniqueInputArgs = {
  where: PostReactedEventWhereUniqueInput
}

export type QueryPostReactedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostReactedEventOrderByInput>>
  where?: InputMaybe<PostReactedEventWhereInput>
}

export type QueryPostReactedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostReactedEventOrderByInput>>
  where?: InputMaybe<PostReactedEventWhereInput>
}

export type QueryPostsByTextArgs = {
  limit?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  text: Scalars['String']
  whereForumPost?: InputMaybe<ForumPostWhereInput>
}

export type QueryPostTextUpdatedEventByUniqueInputArgs = {
  where: PostTextUpdatedEventWhereUniqueInput
}

export type QueryPostTextUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostTextUpdatedEventOrderByInput>>
  where?: InputMaybe<PostTextUpdatedEventWhereInput>
}

export type QueryPostTextUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<PostTextUpdatedEventOrderByInput>>
  where?: InputMaybe<PostTextUpdatedEventWhereInput>
}

export type QueryProposalByUniqueInputArgs = {
  where: ProposalWhereUniqueInput
}

export type QueryProposalCancelledEventByUniqueInputArgs = {
  where: ProposalCancelledEventWhereUniqueInput
}

export type QueryProposalCancelledEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalCancelledEventOrderByInput>>
  where?: InputMaybe<ProposalCancelledEventWhereInput>
}

export type QueryProposalCancelledEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalCancelledEventOrderByInput>>
  where?: InputMaybe<ProposalCancelledEventWhereInput>
}

export type QueryProposalCreatedEventByUniqueInputArgs = {
  where: ProposalCreatedEventWhereUniqueInput
}

export type QueryProposalCreatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalCreatedEventOrderByInput>>
  where?: InputMaybe<ProposalCreatedEventWhereInput>
}

export type QueryProposalCreatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalCreatedEventOrderByInput>>
  where?: InputMaybe<ProposalCreatedEventWhereInput>
}

export type QueryProposalDecisionMadeEventByUniqueInputArgs = {
  where: ProposalDecisionMadeEventWhereUniqueInput
}

export type QueryProposalDecisionMadeEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDecisionMadeEventOrderByInput>>
  where?: InputMaybe<ProposalDecisionMadeEventWhereInput>
}

export type QueryProposalDecisionMadeEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDecisionMadeEventOrderByInput>>
  where?: InputMaybe<ProposalDecisionMadeEventWhereInput>
}

export type QueryProposalDiscussionPostByUniqueInputArgs = {
  where: ProposalDiscussionPostWhereUniqueInput
}

export type QueryProposalDiscussionPostCreatedEventByUniqueInputArgs = {
  where: ProposalDiscussionPostCreatedEventWhereUniqueInput
}

export type QueryProposalDiscussionPostCreatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionPostCreatedEventOrderByInput>>
  where?: InputMaybe<ProposalDiscussionPostCreatedEventWhereInput>
}

export type QueryProposalDiscussionPostCreatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionPostCreatedEventOrderByInput>>
  where?: InputMaybe<ProposalDiscussionPostCreatedEventWhereInput>
}

export type QueryProposalDiscussionPostDeletedEventByUniqueInputArgs = {
  where: ProposalDiscussionPostDeletedEventWhereUniqueInput
}

export type QueryProposalDiscussionPostDeletedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionPostDeletedEventOrderByInput>>
  where?: InputMaybe<ProposalDiscussionPostDeletedEventWhereInput>
}

export type QueryProposalDiscussionPostDeletedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionPostDeletedEventOrderByInput>>
  where?: InputMaybe<ProposalDiscussionPostDeletedEventWhereInput>
}

export type QueryProposalDiscussionPostsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionPostOrderByInput>>
  where?: InputMaybe<ProposalDiscussionPostWhereInput>
}

export type QueryProposalDiscussionPostsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionPostOrderByInput>>
  where?: InputMaybe<ProposalDiscussionPostWhereInput>
}

export type QueryProposalDiscussionPostUpdatedEventByUniqueInputArgs = {
  where: ProposalDiscussionPostUpdatedEventWhereUniqueInput
}

export type QueryProposalDiscussionPostUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionPostUpdatedEventOrderByInput>>
  where?: InputMaybe<ProposalDiscussionPostUpdatedEventWhereInput>
}

export type QueryProposalDiscussionPostUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionPostUpdatedEventOrderByInput>>
  where?: InputMaybe<ProposalDiscussionPostUpdatedEventWhereInput>
}

export type QueryProposalDiscussionThreadByUniqueInputArgs = {
  where: ProposalDiscussionThreadWhereUniqueInput
}

export type QueryProposalDiscussionThreadModeChangedEventByUniqueInputArgs = {
  where: ProposalDiscussionThreadModeChangedEventWhereUniqueInput
}

export type QueryProposalDiscussionThreadModeChangedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionThreadModeChangedEventOrderByInput>>
  where?: InputMaybe<ProposalDiscussionThreadModeChangedEventWhereInput>
}

export type QueryProposalDiscussionThreadModeChangedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionThreadModeChangedEventOrderByInput>>
  where?: InputMaybe<ProposalDiscussionThreadModeChangedEventWhereInput>
}

export type QueryProposalDiscussionThreadsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionThreadOrderByInput>>
  where?: InputMaybe<ProposalDiscussionThreadWhereInput>
}

export type QueryProposalDiscussionThreadsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionThreadOrderByInput>>
  where?: InputMaybe<ProposalDiscussionThreadWhereInput>
}

export type QueryProposalDiscussionWhitelistByUniqueInputArgs = {
  where: ProposalDiscussionWhitelistWhereUniqueInput
}

export type QueryProposalDiscussionWhitelistsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionWhitelistOrderByInput>>
  where?: InputMaybe<ProposalDiscussionWhitelistWhereInput>
}

export type QueryProposalDiscussionWhitelistsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalDiscussionWhitelistOrderByInput>>
  where?: InputMaybe<ProposalDiscussionWhitelistWhereInput>
}

export type QueryProposalExecutedEventByUniqueInputArgs = {
  where: ProposalExecutedEventWhereUniqueInput
}

export type QueryProposalExecutedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalExecutedEventOrderByInput>>
  where?: InputMaybe<ProposalExecutedEventWhereInput>
}

export type QueryProposalExecutedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalExecutedEventOrderByInput>>
  where?: InputMaybe<ProposalExecutedEventWhereInput>
}

export type QueryProposalsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalOrderByInput>>
  where?: InputMaybe<ProposalWhereInput>
}

export type QueryProposalsByTitleArgs = {
  limit?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  text: Scalars['String']
  whereProposal?: InputMaybe<ProposalWhereInput>
}

export type QueryProposalsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalOrderByInput>>
  where?: InputMaybe<ProposalWhereInput>
}

export type QueryProposalStatusUpdatedEventByUniqueInputArgs = {
  where: ProposalStatusUpdatedEventWhereUniqueInput
}

export type QueryProposalStatusUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalStatusUpdatedEventOrderByInput>>
  where?: InputMaybe<ProposalStatusUpdatedEventWhereInput>
}

export type QueryProposalStatusUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalStatusUpdatedEventOrderByInput>>
  where?: InputMaybe<ProposalStatusUpdatedEventWhereInput>
}

export type QueryProposalVotedEventByUniqueInputArgs = {
  where: ProposalVotedEventWhereUniqueInput
}

export type QueryProposalVotedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalVotedEventOrderByInput>>
  where?: InputMaybe<ProposalVotedEventWhereInput>
}

export type QueryProposalVotedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ProposalVotedEventOrderByInput>>
  where?: InputMaybe<ProposalVotedEventWhereInput>
}

export type QueryReferendumFinishedEventByUniqueInputArgs = {
  where: ReferendumFinishedEventWhereUniqueInput
}

export type QueryReferendumFinishedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumFinishedEventOrderByInput>>
  where?: InputMaybe<ReferendumFinishedEventWhereInput>
}

export type QueryReferendumFinishedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumFinishedEventOrderByInput>>
  where?: InputMaybe<ReferendumFinishedEventWhereInput>
}

export type QueryReferendumStageRevealingByUniqueInputArgs = {
  where: ReferendumStageRevealingWhereUniqueInput
}

export type QueryReferendumStageRevealingsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumStageRevealingOrderByInput>>
  where?: InputMaybe<ReferendumStageRevealingWhereInput>
}

export type QueryReferendumStageRevealingsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumStageRevealingOrderByInput>>
  where?: InputMaybe<ReferendumStageRevealingWhereInput>
}

export type QueryReferendumStageVotingByUniqueInputArgs = {
  where: ReferendumStageVotingWhereUniqueInput
}

export type QueryReferendumStageVotingsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumStageVotingOrderByInput>>
  where?: InputMaybe<ReferendumStageVotingWhereInput>
}

export type QueryReferendumStageVotingsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumStageVotingOrderByInput>>
  where?: InputMaybe<ReferendumStageVotingWhereInput>
}

export type QueryReferendumStartedEventByUniqueInputArgs = {
  where: ReferendumStartedEventWhereUniqueInput
}

export type QueryReferendumStartedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumStartedEventOrderByInput>>
  where?: InputMaybe<ReferendumStartedEventWhereInput>
}

export type QueryReferendumStartedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumStartedEventOrderByInput>>
  where?: InputMaybe<ReferendumStartedEventWhereInput>
}

export type QueryReferendumStartedForcefullyEventByUniqueInputArgs = {
  where: ReferendumStartedForcefullyEventWhereUniqueInput
}

export type QueryReferendumStartedForcefullyEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumStartedForcefullyEventOrderByInput>>
  where?: InputMaybe<ReferendumStartedForcefullyEventWhereInput>
}

export type QueryReferendumStartedForcefullyEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferendumStartedForcefullyEventOrderByInput>>
  where?: InputMaybe<ReferendumStartedForcefullyEventWhereInput>
}

export type QueryReferralCutUpdatedEventByUniqueInputArgs = {
  where: ReferralCutUpdatedEventWhereUniqueInput
}

export type QueryReferralCutUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferralCutUpdatedEventOrderByInput>>
  where?: InputMaybe<ReferralCutUpdatedEventWhereInput>
}

export type QueryReferralCutUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ReferralCutUpdatedEventOrderByInput>>
  where?: InputMaybe<ReferralCutUpdatedEventWhereInput>
}

export type QueryRequestFundedEventByUniqueInputArgs = {
  where: RequestFundedEventWhereUniqueInput
}

export type QueryRequestFundedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RequestFundedEventOrderByInput>>
  where?: InputMaybe<RequestFundedEventWhereInput>
}

export type QueryRequestFundedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RequestFundedEventOrderByInput>>
  where?: InputMaybe<RequestFundedEventWhereInput>
}

export type QueryRevealingStageStartedEventByUniqueInputArgs = {
  where: RevealingStageStartedEventWhereUniqueInput
}

export type QueryRevealingStageStartedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RevealingStageStartedEventOrderByInput>>
  where?: InputMaybe<RevealingStageStartedEventWhereInput>
}

export type QueryRevealingStageStartedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RevealingStageStartedEventOrderByInput>>
  where?: InputMaybe<RevealingStageStartedEventWhereInput>
}

export type QueryRewardPaidEventByUniqueInputArgs = {
  where: RewardPaidEventWhereUniqueInput
}

export type QueryRewardPaidEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RewardPaidEventOrderByInput>>
  where?: InputMaybe<RewardPaidEventWhereInput>
}

export type QueryRewardPaidEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RewardPaidEventOrderByInput>>
  where?: InputMaybe<RewardPaidEventWhereInput>
}

export type QueryRewardPaymentEventByUniqueInputArgs = {
  where: RewardPaymentEventWhereUniqueInput
}

export type QueryRewardPaymentEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RewardPaymentEventOrderByInput>>
  where?: InputMaybe<RewardPaymentEventWhereInput>
}

export type QueryRewardPaymentEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RewardPaymentEventOrderByInput>>
  where?: InputMaybe<RewardPaymentEventWhereInput>
}

export type QueryRuntimeWasmBytecodeByUniqueInputArgs = {
  where: RuntimeWasmBytecodeWhereUniqueInput
}

export type QueryRuntimeWasmBytecodesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RuntimeWasmBytecodeOrderByInput>>
  where?: InputMaybe<RuntimeWasmBytecodeWhereInput>
}

export type QueryRuntimeWasmBytecodesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<RuntimeWasmBytecodeOrderByInput>>
  where?: InputMaybe<RuntimeWasmBytecodeWhereInput>
}

export type QuerySearchArgs = {
  limit?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  text: Scalars['String']
  whereChannel?: InputMaybe<ChannelWhereInput>
  whereVideo?: InputMaybe<VideoWhereInput>
}

export type QueryStakeDecreasedEventByUniqueInputArgs = {
  where: StakeDecreasedEventWhereUniqueInput
}

export type QueryStakeDecreasedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakeDecreasedEventOrderByInput>>
  where?: InputMaybe<StakeDecreasedEventWhereInput>
}

export type QueryStakeDecreasedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakeDecreasedEventOrderByInput>>
  where?: InputMaybe<StakeDecreasedEventWhereInput>
}

export type QueryStakeIncreasedEventByUniqueInputArgs = {
  where: StakeIncreasedEventWhereUniqueInput
}

export type QueryStakeIncreasedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakeIncreasedEventOrderByInput>>
  where?: InputMaybe<StakeIncreasedEventWhereInput>
}

export type QueryStakeIncreasedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakeIncreasedEventOrderByInput>>
  where?: InputMaybe<StakeIncreasedEventWhereInput>
}

export type QueryStakeReleasedEventByUniqueInputArgs = {
  where: StakeReleasedEventWhereUniqueInput
}

export type QueryStakeReleasedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakeReleasedEventOrderByInput>>
  where?: InputMaybe<StakeReleasedEventWhereInput>
}

export type QueryStakeReleasedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakeReleasedEventOrderByInput>>
  where?: InputMaybe<StakeReleasedEventWhereInput>
}

export type QueryStakeSlashedEventByUniqueInputArgs = {
  where: StakeSlashedEventWhereUniqueInput
}

export type QueryStakeSlashedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakeSlashedEventOrderByInput>>
  where?: InputMaybe<StakeSlashedEventWhereInput>
}

export type QueryStakeSlashedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakeSlashedEventOrderByInput>>
  where?: InputMaybe<StakeSlashedEventWhereInput>
}

export type QueryStakingAccountAddedEventByUniqueInputArgs = {
  where: StakingAccountAddedEventWhereUniqueInput
}

export type QueryStakingAccountAddedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakingAccountAddedEventOrderByInput>>
  where?: InputMaybe<StakingAccountAddedEventWhereInput>
}

export type QueryStakingAccountAddedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakingAccountAddedEventOrderByInput>>
  where?: InputMaybe<StakingAccountAddedEventWhereInput>
}

export type QueryStakingAccountConfirmedEventByUniqueInputArgs = {
  where: StakingAccountConfirmedEventWhereUniqueInput
}

export type QueryStakingAccountConfirmedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakingAccountConfirmedEventOrderByInput>>
  where?: InputMaybe<StakingAccountConfirmedEventWhereInput>
}

export type QueryStakingAccountConfirmedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakingAccountConfirmedEventOrderByInput>>
  where?: InputMaybe<StakingAccountConfirmedEventWhereInput>
}

export type QueryStakingAccountRemovedEventByUniqueInputArgs = {
  where: StakingAccountRemovedEventWhereUniqueInput
}

export type QueryStakingAccountRemovedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakingAccountRemovedEventOrderByInput>>
  where?: InputMaybe<StakingAccountRemovedEventWhereInput>
}

export type QueryStakingAccountRemovedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StakingAccountRemovedEventOrderByInput>>
  where?: InputMaybe<StakingAccountRemovedEventWhereInput>
}

export type QueryStatusTextChangedEventByUniqueInputArgs = {
  where: StatusTextChangedEventWhereUniqueInput
}

export type QueryStatusTextChangedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StatusTextChangedEventOrderByInput>>
  where?: InputMaybe<StatusTextChangedEventWhereInput>
}

export type QueryStatusTextChangedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StatusTextChangedEventOrderByInput>>
  where?: InputMaybe<StatusTextChangedEventWhereInput>
}

export type QueryStorageBagByUniqueInputArgs = {
  where: StorageBagWhereUniqueInput
}

export type QueryStorageBagsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageBagOrderByInput>>
  where?: InputMaybe<StorageBagWhereInput>
}

export type QueryStorageBagsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageBagOrderByInput>>
  where?: InputMaybe<StorageBagWhereInput>
}

export type QueryStorageBucketByUniqueInputArgs = {
  where: StorageBucketWhereUniqueInput
}

export type QueryStorageBucketOperatorMetadataArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageBucketOperatorMetadataOrderByInput>>
  where?: InputMaybe<StorageBucketOperatorMetadataWhereInput>
}

export type QueryStorageBucketOperatorMetadataByUniqueInputArgs = {
  where: StorageBucketOperatorMetadataWhereUniqueInput
}

export type QueryStorageBucketOperatorMetadataConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageBucketOperatorMetadataOrderByInput>>
  where?: InputMaybe<StorageBucketOperatorMetadataWhereInput>
}

export type QueryStorageBucketsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageBucketOrderByInput>>
  where?: InputMaybe<StorageBucketWhereInput>
}

export type QueryStorageBucketsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageBucketOrderByInput>>
  where?: InputMaybe<StorageBucketWhereInput>
}

export type QueryStorageDataObjectByUniqueInputArgs = {
  where: StorageDataObjectWhereUniqueInput
}

export type QueryStorageDataObjectsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageDataObjectOrderByInput>>
  where?: InputMaybe<StorageDataObjectWhereInput>
}

export type QueryStorageDataObjectsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageDataObjectOrderByInput>>
  where?: InputMaybe<StorageDataObjectWhereInput>
}

export type QueryStorageSystemParametersArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageSystemParametersOrderByInput>>
  where?: InputMaybe<StorageSystemParametersWhereInput>
}

export type QueryStorageSystemParametersByUniqueInputArgs = {
  where: StorageSystemParametersWhereUniqueInput
}

export type QueryStorageSystemParametersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<StorageSystemParametersOrderByInput>>
  where?: InputMaybe<StorageSystemParametersWhereInput>
}

export type QueryTerminatedLeaderEventByUniqueInputArgs = {
  where: TerminatedLeaderEventWhereUniqueInput
}

export type QueryTerminatedLeaderEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<TerminatedLeaderEventOrderByInput>>
  where?: InputMaybe<TerminatedLeaderEventWhereInput>
}

export type QueryTerminatedLeaderEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<TerminatedLeaderEventOrderByInput>>
  where?: InputMaybe<TerminatedLeaderEventWhereInput>
}

export type QueryTerminatedWorkerEventByUniqueInputArgs = {
  where: TerminatedWorkerEventWhereUniqueInput
}

export type QueryTerminatedWorkerEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<TerminatedWorkerEventOrderByInput>>
  where?: InputMaybe<TerminatedWorkerEventWhereInput>
}

export type QueryTerminatedWorkerEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<TerminatedWorkerEventOrderByInput>>
  where?: InputMaybe<TerminatedWorkerEventWhereInput>
}

export type QueryThreadCreatedEventByUniqueInputArgs = {
  where: ThreadCreatedEventWhereUniqueInput
}

export type QueryThreadCreatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadCreatedEventOrderByInput>>
  where?: InputMaybe<ThreadCreatedEventWhereInput>
}

export type QueryThreadCreatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadCreatedEventOrderByInput>>
  where?: InputMaybe<ThreadCreatedEventWhereInput>
}

export type QueryThreadDeletedEventByUniqueInputArgs = {
  where: ThreadDeletedEventWhereUniqueInput
}

export type QueryThreadDeletedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadDeletedEventOrderByInput>>
  where?: InputMaybe<ThreadDeletedEventWhereInput>
}

export type QueryThreadDeletedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadDeletedEventOrderByInput>>
  where?: InputMaybe<ThreadDeletedEventWhereInput>
}

export type QueryThreadMetadataUpdatedEventByUniqueInputArgs = {
  where: ThreadMetadataUpdatedEventWhereUniqueInput
}

export type QueryThreadMetadataUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadMetadataUpdatedEventOrderByInput>>
  where?: InputMaybe<ThreadMetadataUpdatedEventWhereInput>
}

export type QueryThreadMetadataUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadMetadataUpdatedEventOrderByInput>>
  where?: InputMaybe<ThreadMetadataUpdatedEventWhereInput>
}

export type QueryThreadModeratedEventByUniqueInputArgs = {
  where: ThreadModeratedEventWhereUniqueInput
}

export type QueryThreadModeratedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadModeratedEventOrderByInput>>
  where?: InputMaybe<ThreadModeratedEventWhereInput>
}

export type QueryThreadModeratedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadModeratedEventOrderByInput>>
  where?: InputMaybe<ThreadModeratedEventWhereInput>
}

export type QueryThreadMovedEventByUniqueInputArgs = {
  where: ThreadMovedEventWhereUniqueInput
}

export type QueryThreadMovedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadMovedEventOrderByInput>>
  where?: InputMaybe<ThreadMovedEventWhereInput>
}

export type QueryThreadMovedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<ThreadMovedEventOrderByInput>>
  where?: InputMaybe<ThreadMovedEventWhereInput>
}

export type QueryThreadsByTitleArgs = {
  limit?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  text: Scalars['String']
  whereForumThread?: InputMaybe<ForumThreadWhereInput>
}

export type QueryTransactionalStatusUpdateByUniqueInputArgs = {
  where: TransactionalStatusUpdateWhereUniqueInput
}

export type QueryTransactionalStatusUpdatesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<TransactionalStatusUpdateOrderByInput>>
  where?: InputMaybe<TransactionalStatusUpdateWhereInput>
}

export type QueryTransactionalStatusUpdatesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<TransactionalStatusUpdateOrderByInput>>
  where?: InputMaybe<TransactionalStatusUpdateWhereInput>
}

export type QueryUpcomingWorkingGroupOpeningByUniqueInputArgs = {
  where: UpcomingWorkingGroupOpeningWhereUniqueInput
}

export type QueryUpcomingWorkingGroupOpeningsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<UpcomingWorkingGroupOpeningOrderByInput>>
  where?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
}

export type QueryUpcomingWorkingGroupOpeningsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<UpcomingWorkingGroupOpeningOrderByInput>>
  where?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
}

export type QueryVideoByUniqueInputArgs = {
  where: VideoWhereUniqueInput
}

export type QueryVideoCategoriesArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VideoCategoryOrderByInput>>
  where?: InputMaybe<VideoCategoryWhereInput>
}

export type QueryVideoCategoriesByNameArgs = {
  limit?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  text: Scalars['String']
  whereVideoCategory?: InputMaybe<VideoCategoryWhereInput>
}

export type QueryVideoCategoriesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VideoCategoryOrderByInput>>
  where?: InputMaybe<VideoCategoryWhereInput>
}

export type QueryVideoCategoryByUniqueInputArgs = {
  where: VideoCategoryWhereUniqueInput
}

export type QueryVideoMediaEncodingByUniqueInputArgs = {
  where: VideoMediaEncodingWhereUniqueInput
}

export type QueryVideoMediaEncodingsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VideoMediaEncodingOrderByInput>>
  where?: InputMaybe<VideoMediaEncodingWhereInput>
}

export type QueryVideoMediaEncodingsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VideoMediaEncodingOrderByInput>>
  where?: InputMaybe<VideoMediaEncodingWhereInput>
}

export type QueryVideoMediaMetadataArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VideoMediaMetadataOrderByInput>>
  where?: InputMaybe<VideoMediaMetadataWhereInput>
}

export type QueryVideoMediaMetadataByUniqueInputArgs = {
  where: VideoMediaMetadataWhereUniqueInput
}

export type QueryVideoMediaMetadataConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VideoMediaMetadataOrderByInput>>
  where?: InputMaybe<VideoMediaMetadataWhereInput>
}

export type QueryVideosArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VideoOrderByInput>>
  where?: InputMaybe<VideoWhereInput>
}

export type QueryVideosConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VideoOrderByInput>>
  where?: InputMaybe<VideoWhereInput>
}

export type QueryVoteCastEventByUniqueInputArgs = {
  where: VoteCastEventWhereUniqueInput
}

export type QueryVoteCastEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VoteCastEventOrderByInput>>
  where?: InputMaybe<VoteCastEventWhereInput>
}

export type QueryVoteCastEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VoteCastEventOrderByInput>>
  where?: InputMaybe<VoteCastEventWhereInput>
}

export type QueryVoteOnPollEventByUniqueInputArgs = {
  where: VoteOnPollEventWhereUniqueInput
}

export type QueryVoteOnPollEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VoteOnPollEventOrderByInput>>
  where?: InputMaybe<VoteOnPollEventWhereInput>
}

export type QueryVoteOnPollEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VoteOnPollEventOrderByInput>>
  where?: InputMaybe<VoteOnPollEventWhereInput>
}

export type QueryVoteRevealedEventByUniqueInputArgs = {
  where: VoteRevealedEventWhereUniqueInput
}

export type QueryVoteRevealedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VoteRevealedEventOrderByInput>>
  where?: InputMaybe<VoteRevealedEventWhereInput>
}

export type QueryVoteRevealedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VoteRevealedEventOrderByInput>>
  where?: InputMaybe<VoteRevealedEventWhereInput>
}

export type QueryVotingPeriodStartedEventByUniqueInputArgs = {
  where: VotingPeriodStartedEventWhereUniqueInput
}

export type QueryVotingPeriodStartedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VotingPeriodStartedEventOrderByInput>>
  where?: InputMaybe<VotingPeriodStartedEventWhereInput>
}

export type QueryVotingPeriodStartedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<VotingPeriodStartedEventOrderByInput>>
  where?: InputMaybe<VotingPeriodStartedEventWhereInput>
}

export type QueryWorkerByUniqueInputArgs = {
  where: WorkerWhereUniqueInput
}

export type QueryWorkerExitedEventByUniqueInputArgs = {
  where: WorkerExitedEventWhereUniqueInput
}

export type QueryWorkerExitedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerExitedEventOrderByInput>>
  where?: InputMaybe<WorkerExitedEventWhereInput>
}

export type QueryWorkerExitedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerExitedEventOrderByInput>>
  where?: InputMaybe<WorkerExitedEventWhereInput>
}

export type QueryWorkerRewardAccountUpdatedEventByUniqueInputArgs = {
  where: WorkerRewardAccountUpdatedEventWhereUniqueInput
}

export type QueryWorkerRewardAccountUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerRewardAccountUpdatedEventOrderByInput>>
  where?: InputMaybe<WorkerRewardAccountUpdatedEventWhereInput>
}

export type QueryWorkerRewardAccountUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerRewardAccountUpdatedEventOrderByInput>>
  where?: InputMaybe<WorkerRewardAccountUpdatedEventWhereInput>
}

export type QueryWorkerRewardAmountUpdatedEventByUniqueInputArgs = {
  where: WorkerRewardAmountUpdatedEventWhereUniqueInput
}

export type QueryWorkerRewardAmountUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerRewardAmountUpdatedEventOrderByInput>>
  where?: InputMaybe<WorkerRewardAmountUpdatedEventWhereInput>
}

export type QueryWorkerRewardAmountUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerRewardAmountUpdatedEventOrderByInput>>
  where?: InputMaybe<WorkerRewardAmountUpdatedEventWhereInput>
}

export type QueryWorkerRoleAccountUpdatedEventByUniqueInputArgs = {
  where: WorkerRoleAccountUpdatedEventWhereUniqueInput
}

export type QueryWorkerRoleAccountUpdatedEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerRoleAccountUpdatedEventOrderByInput>>
  where?: InputMaybe<WorkerRoleAccountUpdatedEventWhereInput>
}

export type QueryWorkerRoleAccountUpdatedEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerRoleAccountUpdatedEventOrderByInput>>
  where?: InputMaybe<WorkerRoleAccountUpdatedEventWhereInput>
}

export type QueryWorkersArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerOrderByInput>>
  where?: InputMaybe<WorkerWhereInput>
}

export type QueryWorkersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerOrderByInput>>
  where?: InputMaybe<WorkerWhereInput>
}

export type QueryWorkerStartedLeavingEventByUniqueInputArgs = {
  where: WorkerStartedLeavingEventWhereUniqueInput
}

export type QueryWorkerStartedLeavingEventsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerStartedLeavingEventOrderByInput>>
  where?: InputMaybe<WorkerStartedLeavingEventWhereInput>
}

export type QueryWorkerStartedLeavingEventsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkerStartedLeavingEventOrderByInput>>
  where?: InputMaybe<WorkerStartedLeavingEventWhereInput>
}

export type QueryWorkingGroupApplicationByUniqueInputArgs = {
  where: WorkingGroupApplicationWhereUniqueInput
}

export type QueryWorkingGroupApplicationsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupApplicationOrderByInput>>
  where?: InputMaybe<WorkingGroupApplicationWhereInput>
}

export type QueryWorkingGroupApplicationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupApplicationOrderByInput>>
  where?: InputMaybe<WorkingGroupApplicationWhereInput>
}

export type QueryWorkingGroupByUniqueInputArgs = {
  where: WorkingGroupWhereUniqueInput
}

export type QueryWorkingGroupMetadataArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupMetadataOrderByInput>>
  where?: InputMaybe<WorkingGroupMetadataWhereInput>
}

export type QueryWorkingGroupMetadataByUniqueInputArgs = {
  where: WorkingGroupMetadataWhereUniqueInput
}

export type QueryWorkingGroupMetadataConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupMetadataOrderByInput>>
  where?: InputMaybe<WorkingGroupMetadataWhereInput>
}

export type QueryWorkingGroupOpeningByUniqueInputArgs = {
  where: WorkingGroupOpeningWhereUniqueInput
}

export type QueryWorkingGroupOpeningMetadataArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupOpeningMetadataOrderByInput>>
  where?: InputMaybe<WorkingGroupOpeningMetadataWhereInput>
}

export type QueryWorkingGroupOpeningMetadataByUniqueInputArgs = {
  where: WorkingGroupOpeningMetadataWhereUniqueInput
}

export type QueryWorkingGroupOpeningMetadataConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupOpeningMetadataOrderByInput>>
  where?: InputMaybe<WorkingGroupOpeningMetadataWhereInput>
}

export type QueryWorkingGroupOpeningsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupOpeningOrderByInput>>
  where?: InputMaybe<WorkingGroupOpeningWhereInput>
}

export type QueryWorkingGroupOpeningsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupOpeningOrderByInput>>
  where?: InputMaybe<WorkingGroupOpeningWhereInput>
}

export type QueryWorkingGroupsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  offset?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupOrderByInput>>
  where?: InputMaybe<WorkingGroupWhereInput>
}

export type QueryWorkingGroupsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  first?: InputMaybe<Scalars['Int']>
  last?: InputMaybe<Scalars['Int']>
  orderBy?: InputMaybe<Array<WorkingGroupOrderByInput>>
  where?: InputMaybe<WorkingGroupWhereInput>
}

export type AnnouncingPeriodStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type AnnouncingPeriodStartedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type BaseGraphQlObject = {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type Event = {
  /** Blocknumber of the block in which the event was emitted. */
  inBlock: Scalars['Int']
  /** Index of event in block from which it was emitted. */
  indexInBlock: Scalars['Int']
  /** Hash of the extrinsic which caused the event to be emitted */
  inExtrinsic?: Maybe<Scalars['String']>
  /** Network the block was produced in */
  network: Network
  /** Filtering options for interface implementers */
  type?: Maybe<EventTypeOptions>
}

export enum Network {
  Alexandria = 'ALEXANDRIA',
  Babylon = 'BABYLON',
  Giza = 'GIZA',
  Olympia = 'OLYMPIA',
  Rome = 'ROME',
}

export enum EventTypeOptions {
  AnnouncingPeriodStartedEvent = 'AnnouncingPeriodStartedEvent',
  ApplicationWithdrawnEvent = 'ApplicationWithdrawnEvent',
  AppliedOnOpeningEvent = 'AppliedOnOpeningEvent',
  AuctionBidCanceledEvent = 'AuctionBidCanceledEvent',
  AuctionBidMadeEvent = 'AuctionBidMadeEvent',
  AuctionCanceledEvent = 'AuctionCanceledEvent',
  AuctionStartedEvent = 'AuctionStartedEvent',
  BidMadeCompletingAuctionEvent = 'BidMadeCompletingAuctionEvent',
  BudgetBalanceSetEvent = 'BudgetBalanceSetEvent',
  BudgetIncrementUpdatedEvent = 'BudgetIncrementUpdatedEvent',
  BudgetRefillEvent = 'BudgetRefillEvent',
  BudgetRefillPlannedEvent = 'BudgetRefillPlannedEvent',
  BudgetSetEvent = 'BudgetSetEvent',
  BudgetSpendingEvent = 'BudgetSpendingEvent',
  BuyNowCanceledEvent = 'BuyNowCanceledEvent',
  CandidacyNoteSetEvent = 'CandidacyNoteSetEvent',
  CandidacyStakeReleaseEvent = 'CandidacyStakeReleaseEvent',
  CandidacyWithdrawEvent = 'CandidacyWithdrawEvent',
  CategoryArchivalStatusUpdatedEvent = 'CategoryArchivalStatusUpdatedEvent',
  CategoryCreatedEvent = 'CategoryCreatedEvent',
  CategoryDeletedEvent = 'CategoryDeletedEvent',
  CategoryMembershipOfModeratorUpdatedEvent = 'CategoryMembershipOfModeratorUpdatedEvent',
  CategoryStickyThreadUpdateEvent = 'CategoryStickyThreadUpdateEvent',
  CouncilorRewardUpdatedEvent = 'CouncilorRewardUpdatedEvent',
  EnglishAuctionCompletedEvent = 'EnglishAuctionCompletedEvent',
  InitialInvitationBalanceUpdatedEvent = 'InitialInvitationBalanceUpdatedEvent',
  InitialInvitationCountUpdatedEvent = 'InitialInvitationCountUpdatedEvent',
  InvitesTransferredEvent = 'InvitesTransferredEvent',
  LeaderInvitationQuotaUpdatedEvent = 'LeaderInvitationQuotaUpdatedEvent',
  LeaderSetEvent = 'LeaderSetEvent',
  LeaderUnsetEvent = 'LeaderUnsetEvent',
  MemberAccountsUpdatedEvent = 'MemberAccountsUpdatedEvent',
  MemberInvitedEvent = 'MemberInvitedEvent',
  MemberProfileUpdatedEvent = 'MemberProfileUpdatedEvent',
  MembershipBoughtEvent = 'MembershipBoughtEvent',
  MembershipPriceUpdatedEvent = 'MembershipPriceUpdatedEvent',
  MemberVerificationStatusUpdatedEvent = 'MemberVerificationStatusUpdatedEvent',
  NewCandidateEvent = 'NewCandidateEvent',
  NewCouncilElectedEvent = 'NewCouncilElectedEvent',
  NewCouncilNotElectedEvent = 'NewCouncilNotElectedEvent',
  NewMissedRewardLevelReachedEvent = 'NewMissedRewardLevelReachedEvent',
  NftBoughtEvent = 'NftBoughtEvent',
  NftIssuedEvent = 'NftIssuedEvent',
  NotEnoughCandidatesEvent = 'NotEnoughCandidatesEvent',
  OfferAcceptedEvent = 'OfferAcceptedEvent',
  OfferCanceledEvent = 'OfferCanceledEvent',
  OfferStartedEvent = 'OfferStartedEvent',
  OpenAuctionBidAcceptedEvent = 'OpenAuctionBidAcceptedEvent',
  OpeningAddedEvent = 'OpeningAddedEvent',
  OpeningCanceledEvent = 'OpeningCanceledEvent',
  OpeningFilledEvent = 'OpeningFilledEvent',
  PostAddedEvent = 'PostAddedEvent',
  PostDeletedEvent = 'PostDeletedEvent',
  PostModeratedEvent = 'PostModeratedEvent',
  PostReactedEvent = 'PostReactedEvent',
  PostTextUpdatedEvent = 'PostTextUpdatedEvent',
  ProposalCancelledEvent = 'ProposalCancelledEvent',
  ProposalCreatedEvent = 'ProposalCreatedEvent',
  ProposalDecisionMadeEvent = 'ProposalDecisionMadeEvent',
  ProposalDiscussionPostCreatedEvent = 'ProposalDiscussionPostCreatedEvent',
  ProposalDiscussionPostDeletedEvent = 'ProposalDiscussionPostDeletedEvent',
  ProposalDiscussionPostUpdatedEvent = 'ProposalDiscussionPostUpdatedEvent',
  ProposalDiscussionThreadModeChangedEvent = 'ProposalDiscussionThreadModeChangedEvent',
  ProposalExecutedEvent = 'ProposalExecutedEvent',
  ProposalStatusUpdatedEvent = 'ProposalStatusUpdatedEvent',
  ProposalVotedEvent = 'ProposalVotedEvent',
  ReferendumFinishedEvent = 'ReferendumFinishedEvent',
  ReferendumStartedEvent = 'ReferendumStartedEvent',
  ReferendumStartedForcefullyEvent = 'ReferendumStartedForcefullyEvent',
  ReferralCutUpdatedEvent = 'ReferralCutUpdatedEvent',
  RequestFundedEvent = 'RequestFundedEvent',
  RevealingStageStartedEvent = 'RevealingStageStartedEvent',
  RewardPaidEvent = 'RewardPaidEvent',
  RewardPaymentEvent = 'RewardPaymentEvent',
  StakeDecreasedEvent = 'StakeDecreasedEvent',
  StakeIncreasedEvent = 'StakeIncreasedEvent',
  StakeReleasedEvent = 'StakeReleasedEvent',
  StakeSlashedEvent = 'StakeSlashedEvent',
  StakingAccountAddedEvent = 'StakingAccountAddedEvent',
  StakingAccountConfirmedEvent = 'StakingAccountConfirmedEvent',
  StakingAccountRemovedEvent = 'StakingAccountRemovedEvent',
  StatusTextChangedEvent = 'StatusTextChangedEvent',
  TerminatedLeaderEvent = 'TerminatedLeaderEvent',
  TerminatedWorkerEvent = 'TerminatedWorkerEvent',
  ThreadCreatedEvent = 'ThreadCreatedEvent',
  ThreadDeletedEvent = 'ThreadDeletedEvent',
  ThreadMetadataUpdatedEvent = 'ThreadMetadataUpdatedEvent',
  ThreadModeratedEvent = 'ThreadModeratedEvent',
  ThreadMovedEvent = 'ThreadMovedEvent',
  VoteCastEvent = 'VoteCastEvent',
  VoteOnPollEvent = 'VoteOnPollEvent',
  VoteRevealedEvent = 'VoteRevealedEvent',
  VotingPeriodStartedEvent = 'VotingPeriodStartedEvent',
  WorkerExitedEvent = 'WorkerExitedEvent',
  WorkerRewardAccountUpdatedEvent = 'WorkerRewardAccountUpdatedEvent',
  WorkerRewardAmountUpdatedEvent = 'WorkerRewardAmountUpdatedEvent',
  WorkerRoleAccountUpdatedEvent = 'WorkerRoleAccountUpdatedEvent',
  WorkerStartedLeavingEvent = 'WorkerStartedLeavingEvent',
}

export enum AnnouncingPeriodStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type AnnouncingPeriodStartedEventWhereInput = {
  AND?: InputMaybe<Array<AnnouncingPeriodStartedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<AnnouncingPeriodStartedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type AnnouncingPeriodStartedEventConnection = {
  edges: Array<AnnouncingPeriodStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AnnouncingPeriodStartedEventEdge = {
  cursor: Scalars['String']
  node: AnnouncingPeriodStartedEvent
}

export type PageInfo = {
  endCursor?: Maybe<Scalars['String']>
  hasNextPage: Scalars['Boolean']
  hasPreviousPage: Scalars['Boolean']
  startCursor?: Maybe<Scalars['String']>
}

export type ApplicationFormQuestionAnswerWhereUniqueInput = {
  id: Scalars['ID']
}

export type ApplicationFormQuestionAnswer = BaseGraphQlObject & {
  /** Applicant's answer */
  answer: Scalars['String']
  application: WorkingGroupApplication
  applicationId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  question: ApplicationFormQuestion
  questionId: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type WorkingGroupApplication = BaseGraphQlObject & {
  answers: Array<ApplicationFormQuestionAnswer>
  applicant: Membership
  applicantId: Scalars['String']
  applicationwithdrawneventapplication?: Maybe<Array<ApplicationWithdrawnEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInEvent: AppliedOnOpeningEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  opening: WorkingGroupOpening
  openingId: Scalars['String']
  /** Applicant's initial reward account */
  rewardAccount: Scalars['String']
  /** Applicant's initial role account */
  roleAccount: Scalars['String']
  /** ApplicationId in specific working group module */
  runtimeId: Scalars['Int']
  /** Application stake */
  stake: Scalars['BigInt']
  /** Applicant's initial staking account */
  stakingAccount: Scalars['String']
  /** Current application status */
  status: WorkingGroupApplicationStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  workerapplication?: Maybe<Array<Worker>>
}

/** Stored information about a registered user */
export type Membership = BaseGraphQlObject & {
  auctionbidcanceledeventmember?: Maybe<Array<AuctionBidCanceledEvent>>
  auctionbidmadeeventmember?: Maybe<Array<AuctionBidMadeEvent>>
  auctioninitialOwner?: Maybe<Array<Auction>>
  auctionwinningMember?: Maybe<Array<Auction>>
  bidbidder?: Maybe<Array<Bid>>
  bidmadecompletingauctioneventmember?: Maybe<Array<BidMadeCompletingAuctionEvent>>
  /** Staking accounts bounded to membership. */
  boundAccounts: Array<Scalars['String']>
  collaboratorInChannels: Array<Channel>
  /** Member's controller account id */
  controllerAccount: Scalars['String']
  councilCandidacies: Array<Candidate>
  councilMembers: Array<CouncilMember>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  englishauctioncompletedeventwinner?: Maybe<Array<EnglishAuctionCompletedEvent>>
  /** How the member was registered */
  entry: MembershipEntryMethod
  forumpostauthor?: Maybe<Array<ForumPost>>
  forumpostreactionmember?: Maybe<Array<ForumPostReaction>>
  forumthreadauthor?: Maybe<Array<ForumThread>>
  /** The unique handle chosen by member */
  handle: Scalars['String']
  channels: Array<Channel>
  id: Scalars['ID']
  /** Current count of invites left to send. */
  inviteCount: Scalars['Int']
  invitedBy?: Maybe<Membership>
  invitedById?: Maybe<Scalars['String']>
  invitees: Array<Membership>
  invitestransferredeventsourceMember?: Maybe<Array<InvitesTransferredEvent>>
  invitestransferredeventtargetMember?: Maybe<Array<InvitesTransferredEvent>>
  /** Whether member is elected in the current council. */
  isCouncilMember: Scalars['Boolean']
  /** Whether member is founding member. */
  isFoundingMember: Scalars['Boolean']
  /** Whether member has been verified by membership working group. */
  isVerified: Scalars['Boolean']
  memberaccountsupdatedeventmember?: Maybe<Array<MemberAccountsUpdatedEvent>>
  memberinvitedeventinvitingMember?: Maybe<Array<MemberInvitedEvent>>
  memberinvitedeventnewMember?: Maybe<Array<MemberInvitedEvent>>
  memberprofileupdatedeventmember?: Maybe<Array<MemberProfileUpdatedEvent>>
  membershipboughteventnewMember?: Maybe<Array<MembershipBoughtEvent>>
  membershipboughteventreferrer?: Maybe<Array<MembershipBoughtEvent>>
  memberverificationstatusupdatedeventmember?: Maybe<Array<MemberVerificationStatusUpdatedEvent>>
  metadata: MemberMetadata
  metadataId: Scalars['String']
  nftboughteventmember?: Maybe<Array<NftBoughtEvent>>
  nftissuedeventnewOwner?: Maybe<Array<NftIssuedEvent>>
  offerstartedeventmember?: Maybe<Array<OfferStartedEvent>>
  ownedNfts: Array<OwnedNft>
  postdeletedeventactor?: Maybe<Array<PostDeletedEvent>>
  postreactedeventreactingMember?: Maybe<Array<PostReactedEvent>>
  proposalcreator?: Maybe<Array<Proposal>>
  proposaldiscussionpostauthor?: Maybe<Array<ProposalDiscussionPost>>
  proposaldiscussionpostdeletedeventactor?: Maybe<Array<ProposalDiscussionPostDeletedEvent>>
  proposaldiscussionthreadmodechangedeventactor?: Maybe<Array<ProposalDiscussionThreadModeChangedEvent>>
  proposalvotedeventvoter?: Maybe<Array<ProposalVotedEvent>>
  referredBy?: Maybe<Membership>
  referredById?: Maybe<Scalars['String']>
  referredMembers: Array<Membership>
  roles: Array<Worker>
  /** Member's root account id */
  rootAccount: Scalars['String']
  stakingaccountaddedeventmember?: Maybe<Array<StakingAccountAddedEvent>>
  stakingaccountconfirmedeventmember?: Maybe<Array<StakingAccountConfirmedEvent>>
  stakingaccountremovedeventmember?: Maybe<Array<StakingAccountRemovedEvent>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  voteonpolleventvotingMember?: Maybe<Array<VoteOnPollEvent>>
  whitelistedIn: Array<ProposalDiscussionWhitelist>
  whitelistedInAuctions: Array<Auction>
  workinggroupapplicationapplicant?: Maybe<Array<WorkingGroupApplication>>
}

export type AuctionBidCanceledEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type Video = BaseGraphQlObject & {
  auctionbidcanceledeventvideo?: Maybe<Array<AuctionBidCanceledEvent>>
  auctionbidmadeeventvideo?: Maybe<Array<AuctionBidMadeEvent>>
  auctioncanceledeventvideo?: Maybe<Array<AuctionCanceledEvent>>
  auctionstartedeventvideo?: Maybe<Array<AuctionStartedEvent>>
  bidmadecompletingauctioneventvideo?: Maybe<Array<BidMadeCompletingAuctionEvent>>
  buynowcanceledeventvideo?: Maybe<Array<BuyNowCanceledEvent>>
  category?: Maybe<VideoCategory>
  categoryId?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** The description of the Video */
  description?: Maybe<Scalars['String']>
  /** Video duration in seconds */
  duration?: Maybe<Scalars['Int']>
  englishauctioncompletedeventvideo?: Maybe<Array<EnglishAuctionCompletedEvent>>
  /** Whether or not Video contains marketing */
  hasMarketing?: Maybe<Scalars['Boolean']>
  channel: Channel
  channelId: Scalars['String']
  id: Scalars['ID']
  /** Flag signaling whether a video is censored. */
  isCensored: Scalars['Boolean']
  /** Whether the Video contains explicit material. */
  isExplicit?: Maybe<Scalars['Boolean']>
  /** Is video featured or not */
  isFeatured: Scalars['Boolean']
  /** Whether the Video is supposed to be publically displayed */
  isPublic?: Maybe<Scalars['Boolean']>
  language?: Maybe<Language>
  languageId?: Maybe<Scalars['String']>
  license?: Maybe<License>
  licenseId?: Maybe<Scalars['String']>
  media?: Maybe<StorageDataObject>
  mediaId?: Maybe<Scalars['String']>
  mediaMetadata?: Maybe<VideoMediaMetadata>
  mediaMetadataId?: Maybe<Scalars['String']>
  nft?: Maybe<OwnedNft>
  nftboughteventvideo?: Maybe<Array<NftBoughtEvent>>
  nftId?: Maybe<Scalars['String']>
  nftissuedeventvideo?: Maybe<Array<NftIssuedEvent>>
  nftsellordermadeeventvideo?: Maybe<Array<NftSellOrderMadeEvent>>
  offeracceptedeventvideo?: Maybe<Array<OfferAcceptedEvent>>
  offercanceledeventvideo?: Maybe<Array<OfferCanceledEvent>>
  offerstartedeventvideo?: Maybe<Array<OfferStartedEvent>>
  openauctionbidacceptedeventvideo?: Maybe<Array<OpenAuctionBidAcceptedEvent>>
  /** If the Video was published on other platform before beeing published on Joystream - the original publication date */
  publishedBeforeJoystream?: Maybe<Scalars['DateTime']>
  thumbnailPhoto?: Maybe<StorageDataObject>
  thumbnailPhotoId?: Maybe<Scalars['String']>
  /** The title of the video */
  title?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type AuctionBidMadeEvent = BaseGraphQlObject &
  Event & {
    /** Bid made. */
    bidAmount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    /** Sign of auction duration being extended by making this bid. */
    extendsAuction: Scalars['Boolean']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type AuctionCanceledEvent = BaseGraphQlObject &
  Event & {
    /** Content actor canceling the event. */
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type ContentActor = ContentActorCollaborator | ContentActorCurator | ContentActorLead | ContentActorMember

export type ContentActorCollaborator = {
  /** Type needs to have at least one non-relation entity. This value is not used. */
  dummy?: Maybe<Scalars['Int']>
  member?: Maybe<Membership>
}

export type ContentActorCurator = {
  curator?: Maybe<Curator>
  /** Type needs to have at least one non-relation entity. This value is not used. */
  dummy?: Maybe<Scalars['Int']>
}

export type Curator = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  curatorGroups: Array<CuratorGroup>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Type needs to have at least one non-relation entity. This value is not used. */
  dummy?: Maybe<Scalars['Int']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type CuratorGroup = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  curators: Array<Curator>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  channels: Array<Channel>
  id: Scalars['ID']
  /** Is group active or not */
  isActive: Scalars['Boolean']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type Channel = BaseGraphQlObject & {
  /** Count of channel's videos with an uploaded asset that are public and not censored. */
  activeVideosCounter: Scalars['Int']
  avatarPhoto?: Maybe<StorageDataObject>
  avatarPhotoId?: Maybe<Scalars['String']>
  category?: Maybe<ChannelCategory>
  categoryId?: Maybe<Scalars['String']>
  collaborators: Array<Membership>
  coverPhoto?: Maybe<StorageDataObject>
  coverPhotoId?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  /** Number of the block the channel was created in */
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** The description of a Channel */
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Flag signaling whether a channel is censored. */
  isCensored: Scalars['Boolean']
  /** Flag signaling whether a channel is public. */
  isPublic?: Maybe<Scalars['Boolean']>
  language?: Maybe<Language>
  languageId?: Maybe<Scalars['String']>
  ownerCuratorGroup?: Maybe<CuratorGroup>
  ownerCuratorGroupId?: Maybe<Scalars['String']>
  ownerMember?: Maybe<Membership>
  ownerMemberId?: Maybe<Scalars['String']>
  /** Reward account where revenue is sent if set. */
  rewardAccount?: Maybe<Scalars['String']>
  /** The title of the Channel */
  title?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  videos: Array<Video>
}

export type StorageDataObject = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Prize for removing the data object */
  deletionPrize: Scalars['BigInt']
  channelavatarPhoto?: Maybe<Array<Channel>>
  channelcoverPhoto?: Maybe<Array<Channel>>
  id: Scalars['ID']
  /** IPFS content hash */
  ipfsHash: Scalars['String']
  /** Whether the data object was uploaded and accepted by the storage provider */
  isAccepted: Scalars['Boolean']
  /** Data object size in bytes */
  size: Scalars['BigInt']
  storageBag: StorageBag
  storageBagId: Scalars['String']
  /** The type of the asset that the data object represents (if known) */
  type: DataObjectType
  /** If the object is no longer used as an asset - the time at which it was unset (if known) */
  unsetAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  videoMedia?: Maybe<Video>
  videoThumbnail?: Maybe<Video>
}

export type StorageBag = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  distributionBuckets: Array<DistributionBucket>
  id: Scalars['ID']
  objects: Array<StorageDataObject>
  /** Owner of the storage bag */
  owner: StorageBagOwner
  storageBuckets: Array<StorageBucket>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type DistributionBucket = BaseGraphQlObject & {
  /** Whether the bucket is accepting any new bags */
  acceptingNewBags: Scalars['Boolean']
  bags: Array<StorageBag>
  /** Bucket index within the family */
  bucketIndex: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Whether the bucket is currently distributing content */
  distributing: Scalars['Boolean']
  family: DistributionBucketFamily
  familyId: Scalars['String']
  id: Scalars['ID']
  operators: Array<DistributionBucketOperator>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type DistributionBucketFamily = BaseGraphQlObject & {
  buckets: Array<DistributionBucket>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  metadata?: Maybe<DistributionBucketFamilyMetadata>
  metadataId?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type DistributionBucketFamilyMetadata = BaseGraphQlObject & {
  areas: Array<DistributionBucketFamilyGeographicArea>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Optional, more specific description of the region covered by the family */
  description?: Maybe<Scalars['String']>
  distributionbucketfamilymetadata?: Maybe<Array<DistributionBucketFamily>>
  id: Scalars['ID']
  /** List of targets (hosts/ips) best suited latency measurements for the family */
  latencyTestTargets?: Maybe<Array<Scalars['String']>>
  /** Name of the geographical region covered by the family (ie.: us-east-1) */
  region?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type DistributionBucketFamilyGeographicArea = BaseGraphQlObject & {
  /** Geographical area (continent / country / subdivision) */
  area: GeographicalArea
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  distributionBucketFamilyMetadata: DistributionBucketFamilyMetadata
  distributionBucketFamilyMetadataId: Scalars['String']
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type GeographicalArea = GeographicalAreaContinent | GeographicalAreaCountry | GeographicalAreaSubdivistion

export type GeographicalAreaContinent = {
  code?: Maybe<Continent>
}

export enum Continent {
  Af = 'AF',
  An = 'AN',
  As = 'AS',
  Eu = 'EU',
  Na = 'NA',
  Oc = 'OC',
  Sa = 'SA',
}

export type GeographicalAreaCountry = {
  /** ISO 3166-1 alpha-2 country code */
  code?: Maybe<Scalars['String']>
}

export type GeographicalAreaSubdivistion = {
  /** ISO 3166-2 subdivision code */
  code?: Maybe<Scalars['String']>
}

export type DistributionBucketOperator = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  distributionBucket: DistributionBucket
  distributionBucketId: Scalars['String']
  id: Scalars['ID']
  metadata?: Maybe<DistributionBucketOperatorMetadata>
  metadataId?: Maybe<Scalars['String']>
  /** Current operator status */
  status: DistributionBucketOperatorStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  /** ID of the distribution group worker */
  workerId: Scalars['Int']
}

export type DistributionBucketOperatorMetadata = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  distributionbucketoperatormetadata?: Maybe<Array<DistributionBucketOperator>>
  /** Additional information about the node/operator */
  extra?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Root distributor node api endpoint */
  nodeEndpoint?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<NodeLocationMetadata>
  nodeLocationId?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type NodeLocationMetadata = BaseGraphQlObject & {
  /** City name */
  city?: Maybe<Scalars['String']>
  coordinates?: Maybe<GeoCoordinates>
  coordinatesId?: Maybe<Scalars['String']>
  /** ISO 3166-1 alpha-2 country code (2 letters) */
  countryCode?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  distributionbucketoperatormetadatanodeLocation?: Maybe<Array<DistributionBucketOperatorMetadata>>
  id: Scalars['ID']
  storagebucketoperatormetadatanodeLocation?: Maybe<Array<StorageBucketOperatorMetadata>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type GeoCoordinates = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  latitude: Scalars['Float']
  longitude: Scalars['Float']
  nodelocationmetadatacoordinates?: Maybe<Array<NodeLocationMetadata>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type StorageBucketOperatorMetadata = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Additional information about the node/operator */
  extra?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Root node endpoint */
  nodeEndpoint?: Maybe<Scalars['String']>
  nodeLocation?: Maybe<NodeLocationMetadata>
  nodeLocationId?: Maybe<Scalars['String']>
  storagebucketoperatorMetadata?: Maybe<Array<StorageBucket>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type StorageBucket = BaseGraphQlObject & {
  /** Whether the bucket is accepting any new storage bags */
  acceptingNewBags: Scalars['Boolean']
  bags: Array<StorageBag>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  /** Bucket's data object count limit */
  dataObjectCountLimit: Scalars['BigInt']
  /** Number of assigned data objects */
  dataObjectsCount: Scalars['BigInt']
  /** Total size of assigned data objects */
  dataObjectsSize: Scalars['BigInt']
  /** Bucket's data object size limit in bytes */
  dataObjectsSizeLimit: Scalars['BigInt']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  operatorMetadata?: Maybe<StorageBucketOperatorMetadata>
  operatorMetadataId?: Maybe<Scalars['String']>
  /** Current bucket operator status */
  operatorStatus: StorageBucketOperatorStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type StorageBucketOperatorStatus =
  | StorageBucketOperatorStatusActive
  | StorageBucketOperatorStatusInvited
  | StorageBucketOperatorStatusMissing

export type StorageBucketOperatorStatusActive = {
  transactorAccountId: Scalars['String']
  workerId: Scalars['Int']
}

export type StorageBucketOperatorStatusInvited = {
  workerId: Scalars['Int']
}

export type StorageBucketOperatorStatusMissing = {
  phantom?: Maybe<Scalars['Int']>
}

export enum DistributionBucketOperatorStatus {
  Active = 'ACTIVE',
  Invited = 'INVITED',
}

export type StorageBagOwner =
  | StorageBagOwnerCouncil
  | StorageBagOwnerDao
  | StorageBagOwnerChannel
  | StorageBagOwnerMember
  | StorageBagOwnerWorkingGroup

export type StorageBagOwnerCouncil = {
  phantom?: Maybe<Scalars['Int']>
}

export type StorageBagOwnerDao = {
  daoId?: Maybe<Scalars['Int']>
}

export type StorageBagOwnerChannel = {
  channelId?: Maybe<Scalars['Int']>
}

export type StorageBagOwnerMember = {
  memberId?: Maybe<Scalars['Int']>
}

export type StorageBagOwnerWorkingGroup = {
  workingGroupId?: Maybe<Scalars['String']>
}

export type DataObjectType =
  | DataObjectTypeChannelAvatar
  | DataObjectTypeChannelCoverPhoto
  | DataObjectTypeUnknown
  | DataObjectTypeVideoMedia
  | DataObjectTypeVideoThumbnail

export type DataObjectTypeChannelAvatar = {
  /** Related channel entity */
  channel?: Maybe<Channel>
}

export type DataObjectTypeChannelCoverPhoto = {
  /** Related channel entity */
  channel?: Maybe<Channel>
}

export type DataObjectTypeUnknown = {
  phantom?: Maybe<Scalars['Int']>
}

export type DataObjectTypeVideoMedia = {
  /** Related video entity */
  video?: Maybe<Video>
}

export type DataObjectTypeVideoThumbnail = {
  /** Related video entity */
  video?: Maybe<Video>
}

/** Category of media channel */
export type ChannelCategory = BaseGraphQlObject & {
  /** Count of channel's videos with an uploaded asset that are public and not censored. */
  activeVideosCounter: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  channels: Array<Channel>
  id: Scalars['ID']
  /** The name of the category */
  name?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type Language = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  channellanguage?: Maybe<Array<Channel>>
  id: Scalars['ID']
  /** Language identifier ISO 639-1 */
  iso: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  videolanguage?: Maybe<Array<Video>>
}

export type ContentActorLead = {
  /** Type needs to have at least one non-relation entity. This value is not used. */
  dummy?: Maybe<Scalars['Int']>
}

export type ContentActorMember = {
  /** Type needs to have at least one non-relation entity. This value is not used. */
  dummy?: Maybe<Scalars['Int']>
  member?: Maybe<Membership>
}

export type AuctionStartedEvent = BaseGraphQlObject &
  Event & {
    /** Actor that started this auction. */
    actor: ContentActor
    auction: Auction
    auctionId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

/** Represents NFT auction */
export type Auction = BaseGraphQlObject & {
  auctionstartedeventauction?: Maybe<Array<AuctionStartedEvent>>
  /** The type of auction */
  auctionType: AuctionType
  bids: Array<Bid>
  /** Whether auction can be completed instantly */
  buyNowPrice?: Maybe<Scalars['BigInt']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Block when auction ended */
  endedAtBlock?: Maybe<Scalars['Int']>
  id: Scalars['ID']
  initialOwner?: Maybe<Membership>
  initialOwnerId?: Maybe<Scalars['String']>
  /** Is auction canceled */
  isCanceled: Scalars['Boolean']
  /** Is auction completed */
  isCompleted: Scalars['Boolean']
  lastBid?: Maybe<Bid>
  lastBidId?: Maybe<Scalars['String']>
  /** Minimal step between auction bids */
  minimalBidStep: Scalars['BigInt']
  nft: OwnedNft
  nftId: Scalars['String']
  /** Block when auction is supposed to end */
  plannedEndAtBlock?: Maybe<Scalars['Int']>
  /** Auction starting price */
  startingPrice: Scalars['BigInt']
  /** Block when auction starts */
  startsAtBlock: Scalars['Int']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  whitelistedMembers: Array<Membership>
  winningMember?: Maybe<Membership>
  winningMemberId?: Maybe<Scalars['String']>
}

export type AuctionType = AuctionTypeEnglish | AuctionTypeOpen

export type AuctionTypeEnglish = {
  /** English auction duration */
  duration: Scalars['Int']
  /** Auction extension time */
  extensionPeriod?: Maybe<Scalars['Int']>
}

export type AuctionTypeOpen = {
  /** Auction bid lock duration */
  bidLockingTime: Scalars['Int']
}

/** Represents bid in NFT auction */
export type Bid = BaseGraphQlObject & {
  /** Amount bidded */
  amount: Scalars['BigInt']
  auction: Auction
  auctionId: Scalars['String']
  auctionlastBid?: Maybe<Array<Auction>>
  bidder: Membership
  bidderId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  /** Block in which the bid was placed */
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Sign for canceled bid */
  isCanceled: Scalars['Boolean']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

/** Represents NFT details */
export type OwnedNft = BaseGraphQlObject & {
  auctions: Array<Auction>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  /** Creator royalty */
  creatorRoyalty?: Maybe<Scalars['Float']>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** NFT's metadata */
  metadata: Scalars['String']
  ownerMember?: Maybe<Membership>
  ownerMemberId?: Maybe<Scalars['String']>
  /** NFT transactional status */
  transactionalStatus: TransactionalStatus
  transactionalStatusUpdates: Array<TransactionalStatusUpdate>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  video: Video
}

export type TransactionalStatus =
  | TransactionalStatusAuction
  | TransactionalStatusBuyNow
  | TransactionalStatusIdle
  | TransactionalStatusInitiatedOfferToMember

export type TransactionalStatusAuction = {
  /** Auction */
  auction?: Maybe<Auction>
  /** Type needs to have at least one non-relation entity. This value is not used. */
  dummy?: Maybe<Scalars['Int']>
}

export type TransactionalStatusBuyNow = {
  price: Scalars['Float']
}

export type TransactionalStatusIdle = {
  /** Type needs to have at least one non-relation entity. This value is not used. */
  dummy?: Maybe<Scalars['Int']>
}

export type TransactionalStatusInitiatedOfferToMember = {
  /** Member identifier */
  memberId: Scalars['Int']
  /** Whether member should pay to accept offer (optional) */
  price?: Maybe<Scalars['Float']>
}

export type TransactionalStatusUpdate = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Block number at which change happened */
  changedAt: Scalars['Int']
  id: Scalars['ID']
  nft: OwnedNft
  nftId: Scalars['String']
  /** NFT transactional status */
  transactionalStatus: TransactionalStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type BidMadeCompletingAuctionEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type BuyNowCanceledEvent = BaseGraphQlObject &
  Event & {
    /** Content actor acting as NFT owner. */
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type VideoCategory = BaseGraphQlObject & {
  /** Count of channel's videos with an uploaded asset that are public and not censored. */
  activeVideosCounter: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** The name of the category */
  name?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  videos: Array<Video>
}

export type EnglishAuctionCompletedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
    winner: Membership
    winnerId: Scalars['String']
  }

export type License = BaseGraphQlObject & {
  /** Attribution (if required by the license) */
  attribution?: Maybe<Scalars['String']>
  /** License code defined by Joystream */
  code?: Maybe<Scalars['Int']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  /** Custom license content */
  customText?: Maybe<Scalars['String']>
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  videolicense?: Maybe<Array<Video>>
}

export type VideoMediaMetadata = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInBlock: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  encoding?: Maybe<VideoMediaEncoding>
  encodingId?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Video media height in pixels */
  pixelHeight?: Maybe<Scalars['Int']>
  /** Video media width in pixels */
  pixelWidth?: Maybe<Scalars['Int']>
  /** Video media size in bytes */
  size?: Maybe<Scalars['BigInt']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  video?: Maybe<Video>
}

export type VideoMediaEncoding = BaseGraphQlObject & {
  /** Encoding of the video media object */
  codecName?: Maybe<Scalars['String']>
  /** Media container format */
  container?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Content MIME type */
  mimeMediaType?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  videomediametadataencoding?: Maybe<Array<VideoMediaMetadata>>
}

export type NftBoughtEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type NftIssuedEvent = BaseGraphQlObject &
  Event & {
    /** Content actor that issued the NFT. */
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    /** NFT's metadata. */
    metadata: Scalars['String']
    /** Network the block was produced in. */
    network: Network
    newOwner?: Maybe<Membership>
    newOwnerId?: Maybe<Scalars['String']>
    /** Royalty for the NFT/video. */
    royalty?: Maybe<Scalars['Float']>
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type NftSellOrderMadeEvent = BaseGraphQlObject & {
  /** Content actor acting as NFT owner. */
  contentActor: ContentActor
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Blocknumber of the block in which the event was emitted. */
  inBlock: Scalars['Int']
  /** Index of event in block from which it was emitted. */
  indexInBlock: Scalars['Int']
  /** Hash of the extrinsic which caused the event to be emitted. */
  inExtrinsic?: Maybe<Scalars['String']>
  /** Network the block was produced in. */
  network: Network
  /** Offer's price. */
  price: Scalars['BigInt']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  video: Video
  videoId: Scalars['String']
}

export type OfferAcceptedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type OfferCanceledEvent = BaseGraphQlObject &
  Event & {
    /** Content actor acting as NFT owner. */
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type OfferStartedEvent = BaseGraphQlObject &
  Event & {
    /** Content actor acting as NFT owner. */
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in. */
    network: Network
    /** Offer's price. */
    price?: Maybe<Scalars['BigInt']>
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type OpenAuctionBidAcceptedEvent = BaseGraphQlObject &
  Event & {
    /** Content actor canceling the event. */
    contentActor: ContentActor
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted. */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in. */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    video: Video
    videoId: Scalars['String']
  }

export type Candidate = BaseGraphQlObject & {
  candidacynoteseteventcandidate?: Maybe<Array<CandidacyNoteSetEvent>>
  candidacystakereleaseeventcandidate?: Maybe<Array<CandidacyStakeReleaseEvent>>
  candidacywithdraweventcandidate?: Maybe<Array<CandidacyWithdrawEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  electionRound: ElectionRound
  electionRoundId: Scalars['String']
  id: Scalars['ID']
  /** Block in which the last vote was received. */
  lastVoteReceivedAtBlock?: Maybe<Scalars['BigInt']>
  /** Event number in block in which the last vote was received. */
  lastVoteReceivedAtEventNumber?: Maybe<Scalars['Int']>
  member: Membership
  memberId: Scalars['String']
  newcandidateeventcandidate?: Maybe<Array<NewCandidateEvent>>
  noteMetadata: CandidacyNoteMetadata
  noteMetadataId: Scalars['String']
  /** Account that will receive rewards if candidate's elected to the council. */
  rewardAccountId: Scalars['String']
  /** Stake locked for the candidacy. */
  stake: Scalars['BigInt']
  /** Reflects if the stake is still locked for candidacy or has been already released by the member. */
  stakeLocked: Scalars['Boolean']
  /** Account used for staking currency needed for the candidacy. */
  stakingAccountId: Scalars['String']
  /** Current candidate status */
  status: CandidacyStatus
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  /** Sum of power of all votes received. */
  votePower: Scalars['BigInt']
  votesReceived: Array<CastVote>
}

export type CandidacyNoteSetEvent = BaseGraphQlObject &
  Event & {
    candidate: Candidate
    candidateId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    noteMetadata: CandidacyNoteMetadata
    noteMetadataId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type CandidacyNoteMetadata = BaseGraphQlObject & {
  /** Image uri of candidate's banner. */
  bannerImageUri?: Maybe<Scalars['String']>
  /** Candidate program in form of bullet points. Takes array with one empty string [''] as deletion request. */
  bulletPoints: Array<Scalars['String']>
  candidacynoteseteventnoteMetadata?: Maybe<Array<CandidacyNoteSetEvent>>
  candidatenoteMetadata?: Maybe<Array<Candidate>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Candidacy description (Markdown-formatted). */
  description?: Maybe<Scalars['String']>
  /** Candidacy header text. */
  header?: Maybe<Scalars['String']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type CandidacyStakeReleaseEvent = BaseGraphQlObject &
  Event & {
    candidate: Candidate
    candidateId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type CandidacyWithdrawEvent = BaseGraphQlObject &
  Event & {
    candidate: Candidate
    candidateId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ElectionRound = BaseGraphQlObject & {
  candidates: Array<Candidate>
  castVotes: Array<CastVote>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  /** Election cycle ID. */
  cycleId: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  electedCouncil: ElectedCouncil
  electedCouncilId: Scalars['String']
  /** Block number at which the election ended. */
  endedAtBlock?: Maybe<Scalars['Int']>
  /** Network running at the time the election ended. */
  endedAtNetwork?: Maybe<Network>
  /** Time at which the election ended. */
  endedAtTime?: Maybe<Scalars['DateTime']>
  id: Scalars['ID']
  /** Sign if election has already finished. */
  isFinished: Scalars['Boolean']
  nextElectedCouncil?: Maybe<ElectedCouncil>
  nextElectedCouncilId?: Maybe<Scalars['String']>
  referendumStageRevealing?: Maybe<ReferendumStageRevealing>
  referendumStageVoting?: Maybe<ReferendumStageVoting>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type CastVote = BaseGraphQlObject & {
  /** Account that cast the vote. */
  castBy: Scalars['String']
  /** Hashed vote that was casted before being revealed. Hex format. */
  commitment: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  electionRound: ElectionRound
  electionRoundId: Scalars['String']
  id: Scalars['ID']
  /** Stake used to back up the vote. */
  stake: Scalars['BigInt']
  /** Reflects if the stake is still locked for candidacy or has been already released by the member. */
  stakeLocked: Scalars['Boolean']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  votecasteventcastVote?: Maybe<Array<VoteCastEvent>>
  voteFor?: Maybe<Candidate>
  voteForId?: Maybe<Scalars['String']>
  /** Vote's power. */
  votePower: Scalars['BigInt']
  voterevealedeventcastVote?: Maybe<Array<VoteRevealedEvent>>
}

export type VoteCastEvent = BaseGraphQlObject &
  Event & {
    castVote: CastVote
    castVoteId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type VoteRevealedEvent = BaseGraphQlObject &
  Event & {
    castVote: CastVote
    castVoteId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ElectedCouncil = BaseGraphQlObject & {
  councilElections: Array<ElectionRound>
  councilMembers: Array<CouncilMember>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Block number at which the council was elected. */
  electedAtBlock: Scalars['Int']
  /** Network running at the time of election. */
  electedAtNetwork: Network
  /** Time at which the council was elected. */
  electedAtTime: Scalars['DateTime']
  /** Block number at which the council reign ended and a new council was elected. */
  endedAtBlock?: Maybe<Scalars['Int']>
  /** Network running at the time of resignation. */
  endedAtNetwork?: Maybe<Network>
  /** Time at which the council reign ended and a new council was elected. */
  endedAtTime?: Maybe<Scalars['DateTime']>
  id: Scalars['ID']
  /** Sign if council is already resigned. */
  isResigned: Scalars['Boolean']
  newcouncilelectedeventelectedCouncil?: Maybe<Array<NewCouncilElectedEvent>>
  nextCouncilElections: Array<ElectionRound>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  updates: Array<CouncilStageUpdate>
  version: Scalars['Int']
}

export type CouncilMember = BaseGraphQlObject & {
  /** Amount of reward collected by this council member so far. */
  accumulatedReward: Scalars['BigInt']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  electedInCouncil: ElectedCouncil
  electedInCouncilId: Scalars['String']
  id: Scalars['ID']
  /** Block number in which council member received the last reward payment. */
  lastPaymentBlock: Scalars['BigInt']
  member: Membership
  memberId: Scalars['String']
  /** Account that will receive used for reward currency for council membership. */
  rewardAccountId: Scalars['String']
  rewardpaymenteventcouncilMember?: Maybe<Array<RewardPaymentEvent>>
  /** Stake used for the council membership. */
  stake: Scalars['BigInt']
  /** Account used for staking currency for council membership. */
  stakingAccountId: Scalars['String']
  /** Reward amount that should have been paid but couldn't be paid off due to insufficient budget. */
  unpaidReward: Scalars['BigInt']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type RewardPaymentEvent = BaseGraphQlObject &
  Event & {
    councilMember: CouncilMember
    councilMemberId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Amount that couldn't be paid and will be paid the next time. */
    missingBalance: Scalars['BigInt']
    /** Network the block was produced in */
    network: Network
    /** Amount paid to the council member */
    paidBalance: Scalars['BigInt']
    /** Candidate's account that will be recieving rewards if candidate's elected. */
    rewardAccount: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type NewCouncilElectedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    electedCouncil: ElectedCouncil
    electedCouncilId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type CouncilStageUpdate = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  electedCouncil?: Maybe<ElectedCouncil>
  electedCouncilId?: Maybe<Scalars['String']>
  /** Election not completed due to insufficient candidates or winners. */
  electionProblem?: Maybe<ElectionProblem>
  /** Block number at which change happened. */
  changedAt: Scalars['BigInt']
  id: Scalars['ID']
  /** The new stage council got into. */
  stage: CouncilStage
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export enum ElectionProblem {
  NewCouncilNotElected = 'NEW_COUNCIL_NOT_ELECTED',
  NotEnoughCandidates = 'NOT_ENOUGH_CANDIDATES',
}

export type CouncilStage = CouncilStageAnnouncing | CouncilStageElection | CouncilStageIdle | VariantNone

export type CouncilStageAnnouncing = {
  /** Number of candidates aspiring to be elected as council members. */
  candidatesCount: Scalars['Float']
}

export type CouncilStageElection = {
  /** Number of candidates aspiring to be elected as council members. */
  candidatesCount: Scalars['Float']
}

export type CouncilStageIdle = {
  dummy?: Maybe<Scalars['Int']>
}

export type VariantNone = {
  phantom?: Maybe<Scalars['Int']>
}

export type ReferendumStageRevealing = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  electionRound: ElectionRound
  electionRoundId: Scalars['String']
  id: Scalars['ID']
  /** Block in which referendum started */
  startedAtBlock: Scalars['BigInt']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  /** Target number of winners */
  winningTargetCount: Scalars['BigInt']
}

export type ReferendumStageVoting = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  electionRound: ElectionRound
  electionRoundId: Scalars['String']
  id: Scalars['ID']
  /** Block in which referendum started. */
  startedAtBlock: Scalars['BigInt']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  /** Target number of winners. */
  winningTargetCount: Scalars['BigInt']
}

export type NewCandidateEvent = BaseGraphQlObject &
  Event & {
    /** Amount of currency to be staked for the candidacy. */
    balance: Scalars['BigInt']
    candidate: Candidate
    candidateId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Candidate's account that will be recieving rewards if candidate's elected. */
    rewardAccount: Scalars['String']
    /** Candidate's account used to stake currency. */
    stakingAccount: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum CandidacyStatus {
  Active = 'ACTIVE',
  Elected = 'ELECTED',
  Failed = 'FAILED',
  Withdrawn = 'WITHDRAWN',
}

export type MembershipEntryMethod = MembershipEntryGenesis | MembershipEntryInvited | MembershipEntryPaid

export type MembershipEntryGenesis = {
  phantom?: Maybe<Scalars['Int']>
}

export type MembershipEntryInvited = {
  /** The event the member was invited in */
  memberInvitedEvent?: Maybe<MemberInvitedEvent>
}

export type MemberInvitedEvent = BaseGraphQlObject &
  Event & {
    /** New member controller in SS58 encoding. */
    controllerAccount: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    /** New member handle. */
    handle: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    invitingMember: Membership
    invitingMemberId: Scalars['String']
    metadata: MemberMetadata
    metadataId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    newMember: Membership
    newMemberId: Scalars['String']
    /** New member root account in SS58 encoding. */
    rootAccount: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type MemberMetadata = BaseGraphQlObject & {
  /** Short text chosen by member to share information about themselves */
  about?: Maybe<Scalars['String']>
  /** Avatar data object */
  avatar?: Maybe<Avatar>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  memberinvitedeventmetadata?: Maybe<Array<MemberInvitedEvent>>
  memberprofileupdatedeventnewMetadata?: Maybe<Array<MemberProfileUpdatedEvent>>
  membershipboughteventmetadata?: Maybe<Array<MembershipBoughtEvent>>
  membershipmetadata?: Maybe<Array<Membership>>
  /** Member's name */
  name?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type Avatar = AvatarObject | AvatarUri

export type AvatarObject = {
  /** The avatar data object */
  avatarObject?: Maybe<StorageDataObject>
}

export type AvatarUri = {
  /** The avatar URL */
  avatarUri: Scalars['String']
}

export type MemberProfileUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    /** New member handle. Null means no new value was provided. */
    newHandle?: Maybe<Scalars['String']>
    newMetadata: MemberMetadata
    newMetadataId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type MembershipBoughtEvent = BaseGraphQlObject &
  Event & {
    /** New member controller in SS58 encoding. */
    controllerAccount: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    /** New member handle. */
    handle: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    metadata: MemberMetadata
    metadataId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    newMember: Membership
    newMemberId: Scalars['String']
    referrer?: Maybe<Membership>
    referrerId?: Maybe<Scalars['String']>
    /** New member root account in SS58 encoding. */
    rootAccount: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type MembershipEntryPaid = {
  /** The event the membership was bought in */
  membershipBoughtEvent?: Maybe<MembershipBoughtEvent>
}

export type ForumPost = BaseGraphQlObject & {
  author: Membership
  authorId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  deletedInEvent?: Maybe<PostDeletedEvent>
  deletedInEventId?: Maybe<Scalars['String']>
  edits: Array<PostTextUpdatedEvent>
  forumpostrepliesTo?: Maybe<Array<ForumPost>>
  forumthreadinitialPost?: Maybe<Array<ForumThread>>
  id: Scalars['ID']
  /** True if the post is either Active or Locked */
  isVisible: Scalars['Boolean']
  /** The origin of the post (either thread creation event or regular PostAdded event) */
  origin: PostOrigin
  postaddedeventpost?: Maybe<Array<PostAddedEvent>>
  postmoderatedeventpost?: Maybe<Array<PostModeratedEvent>>
  postreactedeventpost?: Maybe<Array<PostReactedEvent>>
  reactions: Array<ForumPostReaction>
  repliesTo?: Maybe<ForumPost>
  repliesToId?: Maybe<Scalars['String']>
  /** Current post status */
  status: PostStatus
  /** Content of the post (md-formatted) */
  text: Scalars['String']
  thread: ForumThread
  threadId: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type PostDeletedEvent = BaseGraphQlObject &
  Event & {
    actor: Membership
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    posts: Array<ForumPost>
    /** Posts deletion rationale */
    rationale: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type PostTextUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New post text */
    newText: Scalars['String']
    post: ForumPost
    postId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ForumThread = BaseGraphQlObject & {
  author: Membership
  authorId: Scalars['String']
  category: ForumCategory
  categoryId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInEvent: ThreadCreatedEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  initialPost?: Maybe<ForumPost>
  initialPostId?: Maybe<Scalars['String']>
  /** Whether the thread is sticky in the category */
  isSticky: Scalars['Boolean']
  /** True if the thread is either Active or Locked */
  isVisible: Scalars['Boolean']
  madeStickyInEvents: Array<CategoryStickyThreadUpdateEvent>
  metadataUpdates: Array<ThreadMetadataUpdatedEvent>
  movedInEvents: Array<ThreadMovedEvent>
  poll?: Maybe<ForumPoll>
  posts: Array<ForumPost>
  /** Current thread status */
  status: ThreadStatus
  tags: Array<ForumThreadTag>
  threaddeletedeventthread?: Maybe<Array<ThreadDeletedEvent>>
  threadmoderatedeventthread?: Maybe<Array<ThreadModeratedEvent>>
  /** Thread title */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  /** Number of non-deleted posts in the thread */
  visiblePostsCount: Scalars['Int']
}

export type ForumCategory = BaseGraphQlObject & {
  categoryarchivalstatusupdatedeventcategory?: Maybe<Array<CategoryArchivalStatusUpdatedEvent>>
  categorydeletedeventcategory?: Maybe<Array<CategoryDeletedEvent>>
  categorymembershipofmoderatorupdatedeventcategory?: Maybe<Array<CategoryMembershipOfModeratorUpdatedEvent>>
  categorystickythreadupdateeventcategory?: Maybe<Array<CategoryStickyThreadUpdateEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInEvent: CategoryCreatedEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Category description */
  description: Scalars['String']
  forumcategoryparent?: Maybe<Array<ForumCategory>>
  id: Scalars['ID']
  moderators: Array<Worker>
  parent?: Maybe<ForumCategory>
  parentId?: Maybe<Scalars['String']>
  /** Current category status */
  status: CategoryStatus
  threadmovedeventnewCategory?: Maybe<Array<ThreadMovedEvent>>
  threadmovedeventoldCategory?: Maybe<Array<ThreadMovedEvent>>
  threads: Array<ForumThread>
  /** Category title */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type CategoryArchivalStatusUpdatedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** The new archival status of the category (true = archived) */
    newArchivalStatus: Scalars['Boolean']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type Worker = BaseGraphQlObject & {
  application: WorkingGroupApplication
  applicationId: Scalars['String']
  categoryarchivalstatusupdatedeventactor?: Maybe<Array<CategoryArchivalStatusUpdatedEvent>>
  categorydeletedeventactor?: Maybe<Array<CategoryDeletedEvent>>
  categorymembershipofmoderatorupdatedeventmoderator?: Maybe<Array<CategoryMembershipOfModeratorUpdatedEvent>>
  categorystickythreadupdateeventactor?: Maybe<Array<CategoryStickyThreadUpdateEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  entry: OpeningFilledEvent
  entryId: Scalars['String']
  group: WorkingGroup
  /** The id the group that the worker belongs to */
  groupId: Scalars['String']
  id: Scalars['ID']
  /** Whether the worker is currently active */
  isActive: Scalars['Boolean']
  /** Whether the worker is also the working group lead */
  isLead: Scalars['Boolean']
  leaderseteventworker?: Maybe<Array<LeaderSetEvent>>
  leaderunseteventleader?: Maybe<Array<LeaderUnsetEvent>>
  managedForumCategories: Array<ForumCategory>
  membership: Membership
  membershipId: Scalars['String']
  memberverificationstatusupdatedeventworker?: Maybe<Array<MemberVerificationStatusUpdatedEvent>>
  /** The reward amount the worker is currently missing (due to empty working group budget) */
  missingRewardAmount?: Maybe<Scalars['BigInt']>
  newmissedrewardlevelreachedeventworker?: Maybe<Array<NewMissedRewardLevelReachedEvent>>
  payouts: Array<RewardPaidEvent>
  postmoderatedeventactor?: Maybe<Array<PostModeratedEvent>>
  /** Worker's reward account */
  rewardAccount: Scalars['String']
  /** Current reward per block */
  rewardPerBlock: Scalars['BigInt']
  /** Worker's role account */
  roleAccount: Scalars['String']
  /** WorkerId in specific working group module */
  runtimeId: Scalars['Int']
  slashes: Array<StakeSlashedEvent>
  /** Current role stake (in JOY) */
  stake: Scalars['BigInt']
  /** Worker's staking account */
  stakeAccount: Scalars['String']
  stakedecreasedeventworker?: Maybe<Array<StakeDecreasedEvent>>
  stakeincreasedeventworker?: Maybe<Array<StakeIncreasedEvent>>
  /** Current worker status */
  status: WorkerStatus
  /** Worker's storage data */
  storage?: Maybe<Scalars['String']>
  terminatedleadereventworker?: Maybe<Array<TerminatedLeaderEvent>>
  terminatedworkereventworker?: Maybe<Array<TerminatedWorkerEvent>>
  threadmoderatedeventactor?: Maybe<Array<ThreadModeratedEvent>>
  threadmovedeventactor?: Maybe<Array<ThreadMovedEvent>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  workerexitedeventworker?: Maybe<Array<WorkerExitedEvent>>
  workerrewardaccountupdatedeventworker?: Maybe<Array<WorkerRewardAccountUpdatedEvent>>
  workerrewardamountupdatedeventworker?: Maybe<Array<WorkerRewardAmountUpdatedEvent>>
  workerroleaccountupdatedeventworker?: Maybe<Array<WorkerRoleAccountUpdatedEvent>>
  workerstartedleavingeventworker?: Maybe<Array<WorkerStartedLeavingEvent>>
  workinggroupleader?: Maybe<Array<WorkingGroup>>
}

export type CategoryDeletedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type CategoryMembershipOfModeratorUpdatedEvent = BaseGraphQlObject &
  Event & {
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    moderator: Worker
    moderatorId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    /** The flag indicating whether the permissions to moderate the category are granted or revoked */
    newCanModerateValue: Scalars['Boolean']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type CategoryStickyThreadUpdateEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    newStickyThreads: Array<ForumThread>
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type OpeningFilledEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    opening: WorkingGroupOpening
    openingId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    workersHired: Array<Worker>
  }

export type WorkingGroup = BaseGraphQlObject & {
  applicationwithdrawneventgroup?: Maybe<Array<ApplicationWithdrawnEvent>>
  appliedonopeningeventgroup?: Maybe<Array<AppliedOnOpeningEvent>>
  /** Current working group budget (JOY) */
  budget: Scalars['BigInt']
  budgetseteventgroup?: Maybe<Array<BudgetSetEvent>>
  budgetspendingeventgroup?: Maybe<Array<BudgetSpendingEvent>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  leader?: Maybe<Worker>
  leaderId?: Maybe<Scalars['String']>
  leaderseteventgroup?: Maybe<Array<LeaderSetEvent>>
  leaderunseteventgroup?: Maybe<Array<LeaderUnsetEvent>>
  metadata?: Maybe<WorkingGroupMetadata>
  metadataId?: Maybe<Scalars['String']>
  /** Working group name */
  name: Scalars['String']
  newmissedrewardlevelreachedeventgroup?: Maybe<Array<NewMissedRewardLevelReachedEvent>>
  openingaddedeventgroup?: Maybe<Array<OpeningAddedEvent>>
  openingcanceledeventgroup?: Maybe<Array<OpeningCanceledEvent>>
  openingfilledeventgroup?: Maybe<Array<OpeningFilledEvent>>
  openings: Array<WorkingGroupOpening>
  rewardpaideventgroup?: Maybe<Array<RewardPaidEvent>>
  stakedecreasedeventgroup?: Maybe<Array<StakeDecreasedEvent>>
  stakeincreasedeventgroup?: Maybe<Array<StakeIncreasedEvent>>
  stakeslashedeventgroup?: Maybe<Array<StakeSlashedEvent>>
  statustextchangedeventgroup?: Maybe<Array<StatusTextChangedEvent>>
  terminatedleadereventgroup?: Maybe<Array<TerminatedLeaderEvent>>
  terminatedworkereventgroup?: Maybe<Array<TerminatedWorkerEvent>>
  upcomingworkinggroupopeninggroup?: Maybe<Array<UpcomingWorkingGroupOpening>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  workerexitedeventgroup?: Maybe<Array<WorkerExitedEvent>>
  workerrewardaccountupdatedeventgroup?: Maybe<Array<WorkerRewardAccountUpdatedEvent>>
  workerrewardamountupdatedeventgroup?: Maybe<Array<WorkerRewardAmountUpdatedEvent>>
  workerroleaccountupdatedeventgroup?: Maybe<Array<WorkerRoleAccountUpdatedEvent>>
  workers: Array<Worker>
  workerstartedleavingeventgroup?: Maybe<Array<WorkerStartedLeavingEvent>>
  workinggroupmetadatagroup?: Maybe<Array<WorkingGroupMetadata>>
}

export type ApplicationWithdrawnEvent = BaseGraphQlObject &
  Event & {
    application: WorkingGroupApplication
    applicationId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type AppliedOnOpeningEvent = BaseGraphQlObject &
  Event & {
    application: WorkingGroupApplication
    applicationId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    opening: WorkingGroupOpening
    openingId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type WorkingGroupOpening = BaseGraphQlObject & {
  applications: Array<WorkingGroupApplication>
  appliedonopeningeventopening?: Maybe<Array<AppliedOnOpeningEvent>>
  /** Time of opening creation */
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInEvent: OpeningAddedEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  group: WorkingGroup
  groupId: Scalars['String']
  id: Scalars['ID']
  metadata: WorkingGroupOpeningMetadata
  metadataId: Scalars['String']
  openingcanceledeventopening?: Maybe<Array<OpeningCanceledEvent>>
  openingfilledeventopening?: Maybe<Array<OpeningFilledEvent>>
  /** Initial workers' reward per block */
  rewardPerBlock: Scalars['BigInt']
  /** OpeningId in specific working group module */
  runtimeId: Scalars['Int']
  /** Min. application/role stake amount */
  stakeAmount: Scalars['BigInt']
  /** Current opening status */
  status: WorkingGroupOpeningStatus
  /** Type of the opening (Leader/Regular) */
  type: WorkingGroupOpeningType
  /** Role stake unstaking period in blocks */
  unstakingPeriod: Scalars['Int']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type OpeningAddedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    opening: WorkingGroupOpening
    openingId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type WorkingGroupOpeningMetadata = BaseGraphQlObject & {
  /** Md-formatted text explaining the application process */
  applicationDetails?: Maybe<Scalars['String']>
  applicationFormQuestions: Array<ApplicationFormQuestion>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Opening description (md-formatted) */
  description?: Maybe<Scalars['String']>
  /** Expected time when the opening will close */
  expectedEnding?: Maybe<Scalars['DateTime']>
  /** Expected max. number of applicants that will be hired */
  hiringLimit?: Maybe<Scalars['Int']>
  id: Scalars['ID']
  /** Whether the originally provided metadata was valid */
  originallyValid: Scalars['Boolean']
  /** Opening short description */
  shortDescription?: Maybe<Scalars['String']>
  upcomingworkinggroupopeningmetadata?: Maybe<Array<UpcomingWorkingGroupOpening>>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  workinggroupopeningmetadata?: Maybe<Array<WorkingGroupOpening>>
}

export type ApplicationFormQuestion = BaseGraphQlObject & {
  applicationformquestionanswerquestion?: Maybe<Array<ApplicationFormQuestionAnswer>>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Index of the question */
  index: Scalars['Int']
  openingMetadata: WorkingGroupOpeningMetadata
  openingMetadataId: Scalars['String']
  /** The question itself */
  question?: Maybe<Scalars['String']>
  /** Type of the question (UI answer input type) */
  type: ApplicationFormQuestionType
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export enum ApplicationFormQuestionType {
  Text = 'TEXT',
  Textarea = 'TEXTAREA',
}

export type UpcomingWorkingGroupOpening = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInEvent: StatusTextChangedEvent
  createdInEventId: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Expected opening start time */
  expectedStart?: Maybe<Scalars['DateTime']>
  group: WorkingGroup
  groupId: Scalars['String']
  id: Scalars['ID']
  metadata: WorkingGroupOpeningMetadata
  metadataId: Scalars['String']
  /** Expected reward per block */
  rewardPerBlock?: Maybe<Scalars['BigInt']>
  /** Expected min. application/role stake amount */
  stakeAmount?: Maybe<Scalars['BigInt']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type StatusTextChangedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Original action metadata as hex string */
    metadata?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Event result depeding on the metadata action type */
    result: WorkingGroupMetadataActionResult
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    upcomingworkinggroupopeningcreatedInEvent?: Maybe<Array<UpcomingWorkingGroupOpening>>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    workinggroupmetadatasetInEvent?: Maybe<Array<WorkingGroupMetadata>>
  }

export type WorkingGroupMetadataActionResult =
  | InvalidActionMetadata
  | UpcomingOpeningAdded
  | UpcomingOpeningRemoved
  | WorkingGroupMetadataSet

export type InvalidActionMetadata = {
  /** Reason why the action metadata was considered invalid */
  reason: Scalars['String']
}

export type UpcomingOpeningAdded = {
  upcomingOpeningId: Scalars['String']
}

export type UpcomingOpeningRemoved = {
  upcomingOpeningId: Scalars['String']
}

export type WorkingGroupMetadataSet = {
  /** The new metadata snapshot resulting from the update */
  metadata?: Maybe<WorkingGroupMetadata>
}

export type WorkingGroupMetadata = BaseGraphQlObject & {
  /** Working group about text */
  about?: Maybe<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Working group description text */
  description?: Maybe<Scalars['String']>
  group: WorkingGroup
  groupId: Scalars['String']
  id: Scalars['ID']
  setInEvent: StatusTextChangedEvent
  setInEventId: Scalars['String']
  /** Working group status */
  status?: Maybe<Scalars['String']>
  /** Working group status message */
  statusMessage?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  workinggroupmetadata?: Maybe<Array<WorkingGroup>>
}

export type OpeningCanceledEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    opening: WorkingGroupOpening
    openingId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type WorkingGroupOpeningStatus = OpeningStatusCancelled | OpeningStatusFilled | OpeningStatusOpen

export type OpeningStatusCancelled = {
  /** Related event emitted on opening cancellation */
  openingCanceledEvent?: Maybe<OpeningCanceledEvent>
}

export type OpeningStatusFilled = {
  /** Related event emitted after filling the opening */
  openingFilledEvent?: Maybe<OpeningFilledEvent>
}

export type OpeningStatusOpen = {
  phantom?: Maybe<Scalars['Int']>
}

export enum WorkingGroupOpeningType {
  Leader = 'LEADER',
  Regular = 'REGULAR',
}

export type BudgetSetEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New working group budget */
    newBudget: Scalars['BigInt']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type BudgetSpendingEvent = BaseGraphQlObject &
  Event & {
    /** Amount beeing spent */
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Optional rationale */
    rationale?: Maybe<Scalars['String']>
    /** Reciever account address */
    reciever: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type LeaderSetEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker?: Maybe<Worker>
    workerId?: Maybe<Scalars['String']>
  }

export type LeaderUnsetEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    leader: Worker
    leaderId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type NewMissedRewardLevelReachedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New missed reward amount */
    newMissedRewardAmount: Scalars['BigInt']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type RewardPaidEvent = BaseGraphQlObject &
  Event & {
    /** Amount recieved */
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Type of the payment (REGULAR/MISSED) */
    paymentType: RewardPaymentType
    /** The account that recieved the reward */
    rewardAccount: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export enum RewardPaymentType {
  Missed = 'MISSED',
  Regular = 'REGULAR',
}

export type StakeDecreasedEvent = BaseGraphQlObject &
  Event & {
    /** The amount of JOY the stake was decreased by */
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type StakeIncreasedEvent = BaseGraphQlObject &
  Event & {
    /** The amount of JOY the stake was increased by */
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type StakeSlashedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Optional rationale */
    rationale?: Maybe<Scalars['String']>
    /** Balance that was requested to be slashed */
    requestedAmount: Scalars['BigInt']
    /** Balance that was actually slashed */
    slashedAmount: Scalars['BigInt']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type TerminatedLeaderEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Slash amount (if any) */
    penalty?: Maybe<Scalars['BigInt']>
    /** Optional rationale */
    rationale?: Maybe<Scalars['String']>
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type TerminatedWorkerEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Slash amount (if any) */
    penalty?: Maybe<Scalars['BigInt']>
    /** Optional rationale */
    rationale?: Maybe<Scalars['String']>
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerExitedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerRewardAccountUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New reward account */
    newRewardAccount: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerRewardAmountUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New worker reward per block */
    newRewardPerBlock: Scalars['BigInt']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerRoleAccountUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New role account */
    newRoleAccount: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type WorkerStartedLeavingEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    group: WorkingGroup
    groupId: Scalars['String']
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Optional rationale */
    rationale?: Maybe<Scalars['String']>
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type MemberVerificationStatusUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** New status. */
    isVerified: Scalars['Boolean']
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    worker: Worker
    workerId: Scalars['String']
  }

export type PostModeratedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    post: ForumPost
    postId: Scalars['String']
    /** The rationale behind the moderation */
    rationale: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type WorkerStatus = WorkerStatusActive | WorkerStatusLeaving | WorkerStatusLeft | WorkerStatusTerminated

export type WorkerStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type WorkerStatusLeaving = {
  /** Related event emitted on leaving initialization */
  workerStartedLeavingEvent?: Maybe<WorkerStartedLeavingEvent>
}

export type WorkerStatusLeft = {
  /** Related event emitted once the worker has exited the role (after the unstaking period) */
  workerExitedEvent?: Maybe<WorkerExitedEvent>
  /** Related event emitted on leaving initialization */
  workerStartedLeavingEvent?: Maybe<WorkerStartedLeavingEvent>
}

export type WorkerStatusTerminated = {
  /** Related event emitted on worker termination */
  terminatedWorkerEvent?: Maybe<TerminatedWorkerEvent>
}

export type ThreadModeratedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Rationale behind the moderation */
    rationale: Scalars['String']
    thread: ForumThread
    threadId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ThreadMovedEvent = BaseGraphQlObject &
  Event & {
    actor: Worker
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    newCategory: ForumCategory
    newCategoryId: Scalars['String']
    oldCategory: ForumCategory
    oldCategoryId: Scalars['String']
    thread: ForumThread
    threadId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type CategoryCreatedEvent = BaseGraphQlObject &
  Event & {
    category: ForumCategory
    categoryId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type CategoryStatus = CategoryStatusActive | CategoryStatusArchived | CategoryStatusRemoved

export type CategoryStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type CategoryStatusArchived = {
  /** Event the category was archived in */
  categoryArchivalStatusUpdatedEvent?: Maybe<CategoryArchivalStatusUpdatedEvent>
}

export type CategoryStatusRemoved = {
  /** Event the category was deleted in */
  categoryDeletedEvent?: Maybe<CategoryDeletedEvent>
}

export type ThreadCreatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Thread's original text */
    text: Scalars['String']
    thread: ForumThread
    threadId: Scalars['String']
    /** Thread's original title */
    title: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ThreadMetadataUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New title of the thread */
    newTitle?: Maybe<Scalars['String']>
    thread: ForumThread
    threadId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ForumPoll = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Poll description */
  description: Scalars['String']
  /** The time at which the poll ends */
  endTime: Scalars['DateTime']
  id: Scalars['ID']
  pollAlternatives: Array<ForumPollAlternative>
  thread: ForumThread
  threadId: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type ForumPollAlternative = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Index uniquely identifying the alternative in given poll */
  index: Scalars['Int']
  poll: ForumPoll
  pollId: Scalars['String']
  /** The alternative text */
  text: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  votes: Array<VoteOnPollEvent>
}

export type VoteOnPollEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    pollAlternative: ForumPollAlternative
    pollAlternativeId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    votingMember: Membership
    votingMemberId: Scalars['String']
  }

export type ThreadStatus = ThreadStatusActive | ThreadStatusLocked | ThreadStatusModerated | ThreadStatusRemoved

export type ThreadStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type ThreadStatusLocked = {
  /** Event the thread was deleted (locked) in */
  threadDeletedEvent?: Maybe<ThreadDeletedEvent>
}

export type ThreadDeletedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    thread: ForumThread
    threadId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ThreadStatusModerated = {
  /** Event the thread was moderated in */
  threadModeratedEvent?: Maybe<ThreadModeratedEvent>
}

export type ThreadStatusRemoved = {
  /** Event the thread was removed in */
  threadDeletedEvent?: Maybe<ThreadDeletedEvent>
}

export type ForumThreadTag = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  threads: Array<ForumThread>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  /** Number of non-removed threads currently assigned to the tag */
  visibleThreadsCount: Scalars['Int']
}

export type PostOrigin = PostOriginThreadInitial | PostOriginThreadReply

export type PostOriginThreadInitial = {
  /** Thread creation event */
  threadCreatedEvent?: Maybe<ThreadCreatedEvent>
}

export type PostOriginThreadReply = {
  /** Related PostAdded event */
  postAddedEvent?: Maybe<PostAddedEvent>
}

export type PostAddedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Whether the added post is editable */
    isEditable?: Maybe<Scalars['Boolean']>
    /** Network the block was produced in */
    network: Network
    post: ForumPost
    postId: Scalars['String']
    /** Post's original text */
    text: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type PostReactedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    post: ForumPost
    postId: Scalars['String']
    reactingMember: Membership
    reactingMemberId: Scalars['String']
    /**
     * The reaction result - new valid reaction, cancelation of previous reaction or
     * invalid reaction (which also cancels the previous one)
     */
    reactionResult: PostReactionResult
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type PostReactionResult = PostReactionResultCancel | PostReactionResultInvalid | PostReactionResultValid

export type PostReactionResultCancel = {
  phantom?: Maybe<Scalars['Int']>
}

export type PostReactionResultInvalid = {
  reactionId: Scalars['Int']
}

export type PostReactionResultValid = {
  reaction: PostReaction
  reactionId: Scalars['Int']
}

export enum PostReaction {
  Like = 'LIKE',
}

export type ForumPostReaction = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  member: Membership
  memberId: Scalars['String']
  post: ForumPost
  postId: Scalars['String']
  /** The reaction */
  reaction: PostReaction
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type PostStatus = PostStatusActive | PostStatusLocked | PostStatusModerated | PostStatusRemoved

export type PostStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type PostStatusLocked = {
  /** Post deleted event in case the post became locked through runtime removal */
  postDeletedEvent?: Maybe<PostDeletedEvent>
}

export type PostStatusModerated = {
  /** Event the post was moderated in */
  postModeratedEvent?: Maybe<PostModeratedEvent>
}

export type PostStatusRemoved = {
  /** Event the post was removed in */
  postDeletedEvent?: Maybe<PostDeletedEvent>
}

export type InvitesTransferredEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Number of invites transferred. */
    numberOfInvites: Scalars['Int']
    sourceMember: Membership
    sourceMemberId: Scalars['String']
    targetMember: Membership
    targetMemberId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type MemberAccountsUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    /** New member controller in SS58 encoding. Null means no new value was provided. */
    newControllerAccount?: Maybe<Scalars['String']>
    /** New member root account in SS58 encoding. Null means no new value was provided. */
    newRootAccount?: Maybe<Scalars['String']>
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type Proposal = BaseGraphQlObject & {
  /** How many prior councils have already approved the proposal (starts with 0) */
  councilApprovals: Scalars['Int']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInEvent: ProposalCreatedEvent
  creator: Membership
  creatorId: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** Proposal description */
  description: Scalars['String']
  /** Proposal details depending on proposal type */
  details: ProposalDetails
  discussionThread: ProposalDiscussionThread
  /** Exact block number the proposal is supposed to be executed at (if specified) */
  exactExecutionBlock?: Maybe<Scalars['Int']>
  id: Scalars['ID']
  /** If true then the proposal status is final and will not change form this point */
  isFinalized?: Maybe<Scalars['Boolean']>
  proposalcancelledeventproposal?: Maybe<Array<ProposalCancelledEvent>>
  proposaldecisionmadeeventproposal?: Maybe<Array<ProposalDecisionMadeEvent>>
  proposalexecutedeventproposal?: Maybe<Array<ProposalExecutedEvent>>
  proposalStatusUpdates: Array<ProposalStatusUpdatedEvent>
  /** Staking account with proposal stake (in case a stake is required) */
  stakingAccount?: Maybe<Scalars['String']>
  /** Current proposal status */
  status: ProposalStatus
  /** Number of the block the current status was set at */
  statusSetAtBlock: Scalars['Int']
  /** Time the current status was set at (based on block timestamp) */
  statusSetAtTime: Scalars['DateTime']
  /** Proposal title */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
  votes: Array<ProposalVotedEvent>
}

export type ProposalCreatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ProposalDetails =
  | AmendConstitutionProposalDetails
  | CancelWorkingGroupLeadOpeningProposalDetails
  | CreateBlogPostProposalDetails
  | CreateWorkingGroupLeadOpeningProposalDetails
  | DecreaseWorkingGroupLeadStakeProposalDetails
  | EditBlogPostProposalDetails
  | FillWorkingGroupLeadOpeningProposalDetails
  | FundingRequestProposalDetails
  | LockBlogPostProposalDetails
  | RuntimeUpgradeProposalDetails
  | SetCouncilBudgetIncrementProposalDetails
  | SetCouncilorRewardProposalDetails
  | SetInitialInvitationBalanceProposalDetails
  | SetInitialInvitationCountProposalDetails
  | SetMaxValidatorCountProposalDetails
  | SetMembershipLeadInvitationQuotaProposalDetails
  | SetMembershipPriceProposalDetails
  | SetReferralCutProposalDetails
  | SetWorkingGroupLeadRewardProposalDetails
  | SignalProposalDetails
  | SlashWorkingGroupLeadProposalDetails
  | TerminateWorkingGroupLeadProposalDetails
  | UnlockBlogPostProposalDetails
  | UpdateWorkingGroupBudgetProposalDetails
  | VetoProposalDetails

export type AmendConstitutionProposalDetails = {
  /** New (proposed) constitution text (md-formatted) */
  text: Scalars['String']
}

export type CancelWorkingGroupLeadOpeningProposalDetails = {
  /** Opening to be cancelled */
  opening?: Maybe<WorkingGroupOpening>
}

export type CreateBlogPostProposalDetails = {
  /** Blog post content (md-formatted) */
  body: Scalars['String']
  /** Blog post title */
  title: Scalars['String']
}

export type CreateWorkingGroupLeadOpeningProposalDetails = {
  /** Related working group */
  group?: Maybe<WorkingGroup>
  /** The opening metadata */
  metadata?: Maybe<WorkingGroupOpeningMetadata>
  /** Initial workers' reward per block */
  rewardPerBlock: Scalars['Float']
  /** Min. application / role stake amount */
  stakeAmount: Scalars['Float']
  /** Role stake unstaking period in blocks */
  unstakingPeriod: Scalars['Int']
}

export type DecreaseWorkingGroupLeadStakeProposalDetails = {
  /** Amount to decrease the stake by */
  amount: Scalars['Float']
  /** The lead that should be affected */
  lead?: Maybe<Worker>
}

export type EditBlogPostProposalDetails = {
  /** The related blog post */
  blogPost: Scalars['String']
  /** The new blog post body (if should be updated) */
  newBody?: Maybe<Scalars['String']>
  /** The new blog post title (if should be updated) */
  newTitle?: Maybe<Scalars['String']>
}

export type FillWorkingGroupLeadOpeningProposalDetails = {
  /** Selected successful application */
  application?: Maybe<WorkingGroupApplication>
  /** Lead opening to to be filled */
  opening?: Maybe<WorkingGroupOpening>
}

export type FundingRequestProposalDetails = {
  /** Related list of funding request destinations */
  destinationsList?: Maybe<FundingRequestDestinationsList>
}

export type FundingRequestDestinationsList = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  destinations: Array<FundingRequestDestination>
  id: Scalars['ID']
  phantom?: Maybe<Scalars['Int']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type FundingRequestDestination = BaseGraphQlObject & {
  /** Destination account */
  account: Scalars['String']
  /** Amount of funds requested */
  amount: Scalars['BigInt']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  list: FundingRequestDestinationsList
  listId: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type LockBlogPostProposalDetails = {
  /** The blog post that should be locked */
  blogPost: Scalars['String']
}

export type RuntimeUpgradeProposalDetails = {
  /** Runtime upgrade WASM bytecode */
  newRuntimeBytecode?: Maybe<RuntimeWasmBytecode>
}

export type RuntimeWasmBytecode = BaseGraphQlObject & {
  /** The bytecode itself */
  bytecode: Scalars['Bytes']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type SetCouncilBudgetIncrementProposalDetails = {
  /** New (proposed) amount the council budget should be increased by per each budget period */
  newAmount: Scalars['Float']
}

export type SetCouncilorRewardProposalDetails = {
  /** New (proposed) council members' reward per block */
  newRewardPerBlock: Scalars['Float']
}

export type SetInitialInvitationBalanceProposalDetails = {
  /** The new (proposed) initial balance credited to controller account of an invitee (locked for transaction fee payments only) */
  newInitialInvitationBalance: Scalars['Float']
}

export type SetInitialInvitationCountProposalDetails = {
  /** The new (proposed) initial invitations count for paid memberships */
  newInitialInvitationsCount: Scalars['Int']
}

export type SetMaxValidatorCountProposalDetails = {
  /** The new (propsed) max. number of active validators */
  newMaxValidatorCount: Scalars['Int']
}

export type SetMembershipLeadInvitationQuotaProposalDetails = {
  /** The new (proposed) membership working group lead invitation quota */
  newLeadInvitationQuota: Scalars['Int']
}

export type SetMembershipPriceProposalDetails = {
  /** New (proposed) membership price */
  newPrice: Scalars['Float']
}

export type SetReferralCutProposalDetails = {
  /** The new (proposed) percentage of tokens diverted to referrer (from referred member's membership price). */
  newReferralCut: Scalars['Int']
}

export type SetWorkingGroupLeadRewardProposalDetails = {
  /** The lead that should be affected */
  lead?: Maybe<Worker>
  /** Lead's new (proposed) reward per block */
  newRewardPerBlock: Scalars['Float']
}

export type SignalProposalDetails = {
  /** Signal proposal content */
  text: Scalars['String']
}

export type SlashWorkingGroupLeadProposalDetails = {
  /** Amount to slash the stake by */
  amount: Scalars['Float']
  /** The lead that should be affected */
  lead?: Maybe<Worker>
}

export type TerminateWorkingGroupLeadProposalDetails = {
  /** Lead that's supposed to be terminated */
  lead?: Maybe<Worker>
  /** Optionally - the amount to slash the lead's stake by */
  slashingAmount?: Maybe<Scalars['Float']>
}

export type UnlockBlogPostProposalDetails = {
  /** The blog post that should be unlocked */
  blogPost: Scalars['String']
}

export type UpdateWorkingGroupBudgetProposalDetails = {
  /** Amount to increase / decrease the working group budget by (will be decudted from / appended to council budget accordingly) */
  amount: Scalars['Float']
  /** Related working group */
  group?: Maybe<WorkingGroup>
}

export type VetoProposalDetails = {
  /** Proposal to be vetoed */
  proposal?: Maybe<Proposal>
}

export type ProposalDiscussionThread = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Current thread mode */
  mode: ProposalDiscussionThreadMode
  modeChanges: Array<ProposalDiscussionThreadModeChangedEvent>
  posts: Array<ProposalDiscussionPost>
  proposal: Proposal
  proposalId: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type ProposalDiscussionThreadMode = ProposalDiscussionThreadModeClosed | ProposalDiscussionThreadModeOpen

export type ProposalDiscussionThreadModeClosed = {
  /** Whitelist containing members allowed to participate in the discussion */
  whitelist?: Maybe<ProposalDiscussionWhitelist>
}

export type ProposalDiscussionWhitelist = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  members: Array<Membership>
  phantom?: Maybe<Scalars['Int']>
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type ProposalDiscussionThreadModeOpen = {
  phantom?: Maybe<Scalars['Int']>
}

export type ProposalDiscussionThreadModeChangedEvent = BaseGraphQlObject &
  Event & {
    actor: Membership
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** The new thread mode */
    newMode: ProposalDiscussionThreadMode
    thread: ProposalDiscussionThread
    threadId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ProposalDiscussionPost = BaseGraphQlObject & {
  author: Membership
  authorId: Scalars['String']
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  createdInEvent: ProposalDiscussionPostCreatedEvent
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  discussionThread: ProposalDiscussionThread
  discussionThreadId: Scalars['String']
  id: Scalars['ID']
  /** True if the post is either Active or Locked */
  isVisible: Scalars['Boolean']
  proposaldiscussionpostdeletedeventpost?: Maybe<Array<ProposalDiscussionPostDeletedEvent>>
  proposaldiscussionpostrepliesTo?: Maybe<Array<ProposalDiscussionPost>>
  repliesTo?: Maybe<ProposalDiscussionPost>
  repliesToId?: Maybe<Scalars['String']>
  /** Current post status */
  status: ProposalDiscussionPostStatus
  /** Post's md-formatted text */
  text: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  updates: Array<ProposalDiscussionPostUpdatedEvent>
  version: Scalars['Int']
}

export type ProposalDiscussionPostCreatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    post: ProposalDiscussionPost
    postId: Scalars['String']
    /** Initial post text */
    text: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ProposalDiscussionPostDeletedEvent = BaseGraphQlObject &
  Event & {
    actor: Membership
    actorId: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    post: ProposalDiscussionPost
    postId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ProposalDiscussionPostStatus =
  | ProposalDiscussionPostStatusActive
  | ProposalDiscussionPostStatusLocked
  | ProposalDiscussionPostStatusRemoved

export type ProposalDiscussionPostStatusActive = {
  phantom?: Maybe<Scalars['Int']>
}

export type ProposalDiscussionPostStatusLocked = {
  /** ProposalDiscussionPostDeletedEvent in case the post became locked through runtime removal */
  deletedInEvent?: Maybe<ProposalDiscussionPostDeletedEvent>
}

export type ProposalDiscussionPostStatusRemoved = {
  /** The event the post was removed in */
  deletedInEvent?: Maybe<ProposalDiscussionPostDeletedEvent>
}

export type ProposalDiscussionPostUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    post: ProposalDiscussionPost
    postId: Scalars['String']
    /** New post text */
    text: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ProposalCancelledEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ProposalDecisionMadeEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    /** The voting decision status */
    decisionStatus: ProposalDecisionStatus
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ProposalDecisionStatus =
  | ProposalStatusCanceledByRuntime
  | ProposalStatusCancelled
  | ProposalStatusDormant
  | ProposalStatusExpired
  | ProposalStatusGracing
  | ProposalStatusRejected
  | ProposalStatusSlashed
  | ProposalStatusVetoed

export type ProposalStatusCanceledByRuntime = {
  /** Related ProposalDecisionMadeEvent */
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalStatusCancelled = {
  /** The related ProposalCancelledEvent */
  cancelledInEvent?: Maybe<ProposalCancelledEvent>
}

export type ProposalStatusDormant = {
  /** Related ProposalStatusUpdatedEvent */
  proposalStatusUpdatedEvent?: Maybe<ProposalStatusUpdatedEvent>
}

export type ProposalStatusUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** The new proposal intermediate status (Deciding/Gracing/Dormant) */
    newStatus: ProposalIntermediateStatus
    proposal: Proposal
    proposalId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ProposalIntermediateStatus = ProposalStatusDeciding | ProposalStatusDormant | ProposalStatusGracing

export type ProposalStatusDeciding = {
  /** Related ProposalStatusUpdatedEvent */
  proposalStatusUpdatedEvent?: Maybe<ProposalStatusUpdatedEvent>
}

export type ProposalStatusGracing = {
  /** Related ProposalStatusUpdatedEvent */
  proposalStatusUpdatedEvent?: Maybe<ProposalStatusUpdatedEvent>
}

export type ProposalStatusExpired = {
  /** Related ProposalDecisionMadeEvent */
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalStatusRejected = {
  /** Related ProposalDecisionMadeEvent */
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalStatusSlashed = {
  /** Related ProposalDecisionMadeEvent */
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalStatusVetoed = {
  /** Related ProposalDecisionMadeEvent event */
  proposalDecisionMadeEvent?: Maybe<ProposalDecisionMadeEvent>
}

export type ProposalExecutedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    /** The execution status */
    executionStatus: ProposalExecutionStatus
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type ProposalExecutionStatus = ProposalStatusExecuted | ProposalStatusExecutionFailed

export type ProposalStatusExecuted = {
  /** Related ProposalExecutedEvent */
  proposalExecutedEvent?: Maybe<ProposalExecutedEvent>
}

export type ProposalStatusExecutionFailed = {
  /** The runtime execution error message */
  errorMessage: Scalars['String']
  /** Related ProposalExecutedEvent */
  proposalExecutedEvent?: Maybe<ProposalExecutedEvent>
}

export type ProposalStatus =
  | ProposalStatusCanceledByRuntime
  | ProposalStatusCancelled
  | ProposalStatusDeciding
  | ProposalStatusDormant
  | ProposalStatusExecuted
  | ProposalStatusExecutionFailed
  | ProposalStatusExpired
  | ProposalStatusGracing
  | ProposalStatusRejected
  | ProposalStatusSlashed
  | ProposalStatusVetoed

export type ProposalVotedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    proposal: Proposal
    proposalId: Scalars['String']
    /** The rationale behind the vote */
    rationale: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    /** The kind of the vote that was casted */
    voteKind: ProposalVoteKind
    voter: Membership
    voterId: Scalars['String']
    /**
     * The voting round - number representing which Deciding period the vote was
     * casted in (starting with 1), useful when the proposal must be approved during
     * multiple council terms (constitution > 1)
     */
    votingRound: Scalars['Int']
  }

export enum ProposalVoteKind {
  Abstain = 'ABSTAIN',
  Approve = 'APPROVE',
  Reject = 'REJECT',
  Slash = 'SLASH',
}

export type StakingAccountAddedEvent = BaseGraphQlObject &
  Event & {
    /** New staking account in SS58 encoding. */
    account: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type StakingAccountConfirmedEvent = BaseGraphQlObject &
  Event & {
    /** New staking account in SS58 encoding. */
    account: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type StakingAccountRemovedEvent = BaseGraphQlObject &
  Event & {
    /** New staking account in SS58 encoding. */
    account: Scalars['String']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    member: Membership
    memberId: Scalars['String']
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export type WorkingGroupApplicationStatus =
  | ApplicationStatusAccepted
  | ApplicationStatusCancelled
  | ApplicationStatusPending
  | ApplicationStatusRejected
  | ApplicationStatusWithdrawn

export type ApplicationStatusAccepted = {
  /** Related OpeningFilled event */
  openingFilledEvent?: Maybe<OpeningFilledEvent>
}

export type ApplicationStatusCancelled = {
  /** Related OpeningCanceled event */
  openingCanceledEvent?: Maybe<OpeningCanceledEvent>
}

export type ApplicationStatusPending = {
  phantom?: Maybe<Scalars['Int']>
}

export type ApplicationStatusRejected = {
  /** Related OpeningFilled event */
  openingFilledEvent?: Maybe<OpeningFilledEvent>
}

export type ApplicationStatusWithdrawn = {
  /** Related ApplicationWithdrawn event */
  applicationWithdrawnEvent?: Maybe<ApplicationWithdrawnEvent>
}

export enum ApplicationFormQuestionAnswerOrderByInput {
  AnswerAsc = 'answer_ASC',
  AnswerDesc = 'answer_DESC',
  ApplicationAsc = 'application_ASC',
  ApplicationDesc = 'application_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  QuestionAsc = 'question_ASC',
  QuestionDesc = 'question_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ApplicationFormQuestionAnswerWhereInput = {
  AND?: InputMaybe<Array<ApplicationFormQuestionAnswerWhereInput>>
  answer_contains?: InputMaybe<Scalars['String']>
  answer_endsWith?: InputMaybe<Scalars['String']>
  answer_eq?: InputMaybe<Scalars['String']>
  answer_in?: InputMaybe<Array<Scalars['String']>>
  answer_startsWith?: InputMaybe<Scalars['String']>
  application?: InputMaybe<WorkingGroupApplicationWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<ApplicationFormQuestionAnswerWhereInput>>
  question?: InputMaybe<ApplicationFormQuestionWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type WorkingGroupApplicationWhereInput = {
  AND?: InputMaybe<Array<WorkingGroupApplicationWhereInput>>
  answers_every?: InputMaybe<ApplicationFormQuestionAnswerWhereInput>
  answers_none?: InputMaybe<ApplicationFormQuestionAnswerWhereInput>
  answers_some?: InputMaybe<ApplicationFormQuestionAnswerWhereInput>
  applicant?: InputMaybe<MembershipWhereInput>
  applicationwithdrawneventapplication_every?: InputMaybe<ApplicationWithdrawnEventWhereInput>
  applicationwithdrawneventapplication_none?: InputMaybe<ApplicationWithdrawnEventWhereInput>
  applicationwithdrawneventapplication_some?: InputMaybe<ApplicationWithdrawnEventWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInEvent?: InputMaybe<AppliedOnOpeningEventWhereInput>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  opening?: InputMaybe<WorkingGroupOpeningWhereInput>
  OR?: InputMaybe<Array<WorkingGroupApplicationWhereInput>>
  rewardAccount_contains?: InputMaybe<Scalars['String']>
  rewardAccount_endsWith?: InputMaybe<Scalars['String']>
  rewardAccount_eq?: InputMaybe<Scalars['String']>
  rewardAccount_in?: InputMaybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: InputMaybe<Scalars['String']>
  roleAccount_contains?: InputMaybe<Scalars['String']>
  roleAccount_endsWith?: InputMaybe<Scalars['String']>
  roleAccount_eq?: InputMaybe<Scalars['String']>
  roleAccount_in?: InputMaybe<Array<Scalars['String']>>
  roleAccount_startsWith?: InputMaybe<Scalars['String']>
  runtimeId_eq?: InputMaybe<Scalars['Int']>
  runtimeId_gt?: InputMaybe<Scalars['Int']>
  runtimeId_gte?: InputMaybe<Scalars['Int']>
  runtimeId_in?: InputMaybe<Array<Scalars['Int']>>
  runtimeId_lt?: InputMaybe<Scalars['Int']>
  runtimeId_lte?: InputMaybe<Scalars['Int']>
  stake_eq?: InputMaybe<Scalars['BigInt']>
  stake_gt?: InputMaybe<Scalars['BigInt']>
  stake_gte?: InputMaybe<Scalars['BigInt']>
  stake_in?: InputMaybe<Array<Scalars['BigInt']>>
  stake_lt?: InputMaybe<Scalars['BigInt']>
  stake_lte?: InputMaybe<Scalars['BigInt']>
  stakingAccount_contains?: InputMaybe<Scalars['String']>
  stakingAccount_endsWith?: InputMaybe<Scalars['String']>
  stakingAccount_eq?: InputMaybe<Scalars['String']>
  stakingAccount_in?: InputMaybe<Array<Scalars['String']>>
  stakingAccount_startsWith?: InputMaybe<Scalars['String']>
  status_json?: InputMaybe<Scalars['JSONObject']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  workerapplication_every?: InputMaybe<WorkerWhereInput>
  workerapplication_none?: InputMaybe<WorkerWhereInput>
  workerapplication_some?: InputMaybe<WorkerWhereInput>
}

export type MembershipWhereInput = {
  AND?: InputMaybe<Array<MembershipWhereInput>>
  auctionbidcanceledeventmember_every?: InputMaybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventmember_none?: InputMaybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventmember_some?: InputMaybe<AuctionBidCanceledEventWhereInput>
  auctionbidmadeeventmember_every?: InputMaybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventmember_none?: InputMaybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventmember_some?: InputMaybe<AuctionBidMadeEventWhereInput>
  auctioninitialOwner_every?: InputMaybe<AuctionWhereInput>
  auctioninitialOwner_none?: InputMaybe<AuctionWhereInput>
  auctioninitialOwner_some?: InputMaybe<AuctionWhereInput>
  auctionwinningMember_every?: InputMaybe<AuctionWhereInput>
  auctionwinningMember_none?: InputMaybe<AuctionWhereInput>
  auctionwinningMember_some?: InputMaybe<AuctionWhereInput>
  bidbidder_every?: InputMaybe<BidWhereInput>
  bidbidder_none?: InputMaybe<BidWhereInput>
  bidbidder_some?: InputMaybe<BidWhereInput>
  bidmadecompletingauctioneventmember_every?: InputMaybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventmember_none?: InputMaybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventmember_some?: InputMaybe<BidMadeCompletingAuctionEventWhereInput>
  boundAccounts_containsAll?: InputMaybe<Array<Scalars['String']>>
  boundAccounts_containsAny?: InputMaybe<Array<Scalars['String']>>
  boundAccounts_containsNone?: InputMaybe<Array<Scalars['String']>>
  collaboratorInChannels_every?: InputMaybe<ChannelWhereInput>
  collaboratorInChannels_none?: InputMaybe<ChannelWhereInput>
  collaboratorInChannels_some?: InputMaybe<ChannelWhereInput>
  controllerAccount_contains?: InputMaybe<Scalars['String']>
  controllerAccount_endsWith?: InputMaybe<Scalars['String']>
  controllerAccount_eq?: InputMaybe<Scalars['String']>
  controllerAccount_in?: InputMaybe<Array<Scalars['String']>>
  controllerAccount_startsWith?: InputMaybe<Scalars['String']>
  councilCandidacies_every?: InputMaybe<CandidateWhereInput>
  councilCandidacies_none?: InputMaybe<CandidateWhereInput>
  councilCandidacies_some?: InputMaybe<CandidateWhereInput>
  councilMembers_every?: InputMaybe<CouncilMemberWhereInput>
  councilMembers_none?: InputMaybe<CouncilMemberWhereInput>
  councilMembers_some?: InputMaybe<CouncilMemberWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  englishauctioncompletedeventwinner_every?: InputMaybe<EnglishAuctionCompletedEventWhereInput>
  englishauctioncompletedeventwinner_none?: InputMaybe<EnglishAuctionCompletedEventWhereInput>
  englishauctioncompletedeventwinner_some?: InputMaybe<EnglishAuctionCompletedEventWhereInput>
  entry_json?: InputMaybe<Scalars['JSONObject']>
  forumpostauthor_every?: InputMaybe<ForumPostWhereInput>
  forumpostauthor_none?: InputMaybe<ForumPostWhereInput>
  forumpostauthor_some?: InputMaybe<ForumPostWhereInput>
  forumpostreactionmember_every?: InputMaybe<ForumPostReactionWhereInput>
  forumpostreactionmember_none?: InputMaybe<ForumPostReactionWhereInput>
  forumpostreactionmember_some?: InputMaybe<ForumPostReactionWhereInput>
  forumthreadauthor_every?: InputMaybe<ForumThreadWhereInput>
  forumthreadauthor_none?: InputMaybe<ForumThreadWhereInput>
  forumthreadauthor_some?: InputMaybe<ForumThreadWhereInput>
  handle_contains?: InputMaybe<Scalars['String']>
  handle_endsWith?: InputMaybe<Scalars['String']>
  handle_eq?: InputMaybe<Scalars['String']>
  handle_in?: InputMaybe<Array<Scalars['String']>>
  handle_startsWith?: InputMaybe<Scalars['String']>
  channels_every?: InputMaybe<ChannelWhereInput>
  channels_none?: InputMaybe<ChannelWhereInput>
  channels_some?: InputMaybe<ChannelWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inviteCount_eq?: InputMaybe<Scalars['Int']>
  inviteCount_gt?: InputMaybe<Scalars['Int']>
  inviteCount_gte?: InputMaybe<Scalars['Int']>
  inviteCount_in?: InputMaybe<Array<Scalars['Int']>>
  inviteCount_lt?: InputMaybe<Scalars['Int']>
  inviteCount_lte?: InputMaybe<Scalars['Int']>
  invitedBy?: InputMaybe<MembershipWhereInput>
  invitees_every?: InputMaybe<MembershipWhereInput>
  invitees_none?: InputMaybe<MembershipWhereInput>
  invitees_some?: InputMaybe<MembershipWhereInput>
  invitestransferredeventsourceMember_every?: InputMaybe<InvitesTransferredEventWhereInput>
  invitestransferredeventsourceMember_none?: InputMaybe<InvitesTransferredEventWhereInput>
  invitestransferredeventsourceMember_some?: InputMaybe<InvitesTransferredEventWhereInput>
  invitestransferredeventtargetMember_every?: InputMaybe<InvitesTransferredEventWhereInput>
  invitestransferredeventtargetMember_none?: InputMaybe<InvitesTransferredEventWhereInput>
  invitestransferredeventtargetMember_some?: InputMaybe<InvitesTransferredEventWhereInput>
  isCouncilMember_eq?: InputMaybe<Scalars['Boolean']>
  isCouncilMember_in?: InputMaybe<Array<Scalars['Boolean']>>
  isFoundingMember_eq?: InputMaybe<Scalars['Boolean']>
  isFoundingMember_in?: InputMaybe<Array<Scalars['Boolean']>>
  isVerified_eq?: InputMaybe<Scalars['Boolean']>
  isVerified_in?: InputMaybe<Array<Scalars['Boolean']>>
  memberaccountsupdatedeventmember_every?: InputMaybe<MemberAccountsUpdatedEventWhereInput>
  memberaccountsupdatedeventmember_none?: InputMaybe<MemberAccountsUpdatedEventWhereInput>
  memberaccountsupdatedeventmember_some?: InputMaybe<MemberAccountsUpdatedEventWhereInput>
  memberinvitedeventinvitingMember_every?: InputMaybe<MemberInvitedEventWhereInput>
  memberinvitedeventinvitingMember_none?: InputMaybe<MemberInvitedEventWhereInput>
  memberinvitedeventinvitingMember_some?: InputMaybe<MemberInvitedEventWhereInput>
  memberinvitedeventnewMember_every?: InputMaybe<MemberInvitedEventWhereInput>
  memberinvitedeventnewMember_none?: InputMaybe<MemberInvitedEventWhereInput>
  memberinvitedeventnewMember_some?: InputMaybe<MemberInvitedEventWhereInput>
  memberprofileupdatedeventmember_every?: InputMaybe<MemberProfileUpdatedEventWhereInput>
  memberprofileupdatedeventmember_none?: InputMaybe<MemberProfileUpdatedEventWhereInput>
  memberprofileupdatedeventmember_some?: InputMaybe<MemberProfileUpdatedEventWhereInput>
  membershipboughteventnewMember_every?: InputMaybe<MembershipBoughtEventWhereInput>
  membershipboughteventnewMember_none?: InputMaybe<MembershipBoughtEventWhereInput>
  membershipboughteventnewMember_some?: InputMaybe<MembershipBoughtEventWhereInput>
  membershipboughteventreferrer_every?: InputMaybe<MembershipBoughtEventWhereInput>
  membershipboughteventreferrer_none?: InputMaybe<MembershipBoughtEventWhereInput>
  membershipboughteventreferrer_some?: InputMaybe<MembershipBoughtEventWhereInput>
  memberverificationstatusupdatedeventmember_every?: InputMaybe<MemberVerificationStatusUpdatedEventWhereInput>
  memberverificationstatusupdatedeventmember_none?: InputMaybe<MemberVerificationStatusUpdatedEventWhereInput>
  memberverificationstatusupdatedeventmember_some?: InputMaybe<MemberVerificationStatusUpdatedEventWhereInput>
  metadata?: InputMaybe<MemberMetadataWhereInput>
  nftboughteventmember_every?: InputMaybe<NftBoughtEventWhereInput>
  nftboughteventmember_none?: InputMaybe<NftBoughtEventWhereInput>
  nftboughteventmember_some?: InputMaybe<NftBoughtEventWhereInput>
  nftissuedeventnewOwner_every?: InputMaybe<NftIssuedEventWhereInput>
  nftissuedeventnewOwner_none?: InputMaybe<NftIssuedEventWhereInput>
  nftissuedeventnewOwner_some?: InputMaybe<NftIssuedEventWhereInput>
  offerstartedeventmember_every?: InputMaybe<OfferStartedEventWhereInput>
  offerstartedeventmember_none?: InputMaybe<OfferStartedEventWhereInput>
  offerstartedeventmember_some?: InputMaybe<OfferStartedEventWhereInput>
  OR?: InputMaybe<Array<MembershipWhereInput>>
  ownedNfts_every?: InputMaybe<OwnedNftWhereInput>
  ownedNfts_none?: InputMaybe<OwnedNftWhereInput>
  ownedNfts_some?: InputMaybe<OwnedNftWhereInput>
  postdeletedeventactor_every?: InputMaybe<PostDeletedEventWhereInput>
  postdeletedeventactor_none?: InputMaybe<PostDeletedEventWhereInput>
  postdeletedeventactor_some?: InputMaybe<PostDeletedEventWhereInput>
  postreactedeventreactingMember_every?: InputMaybe<PostReactedEventWhereInput>
  postreactedeventreactingMember_none?: InputMaybe<PostReactedEventWhereInput>
  postreactedeventreactingMember_some?: InputMaybe<PostReactedEventWhereInput>
  proposalcreator_every?: InputMaybe<ProposalWhereInput>
  proposalcreator_none?: InputMaybe<ProposalWhereInput>
  proposalcreator_some?: InputMaybe<ProposalWhereInput>
  proposaldiscussionpostauthor_every?: InputMaybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostauthor_none?: InputMaybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostauthor_some?: InputMaybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostdeletedeventactor_every?: InputMaybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostdeletedeventactor_none?: InputMaybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostdeletedeventactor_some?: InputMaybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionthreadmodechangedeventactor_every?: InputMaybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  proposaldiscussionthreadmodechangedeventactor_none?: InputMaybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  proposaldiscussionthreadmodechangedeventactor_some?: InputMaybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  proposalvotedeventvoter_every?: InputMaybe<ProposalVotedEventWhereInput>
  proposalvotedeventvoter_none?: InputMaybe<ProposalVotedEventWhereInput>
  proposalvotedeventvoter_some?: InputMaybe<ProposalVotedEventWhereInput>
  referredBy?: InputMaybe<MembershipWhereInput>
  referredMembers_every?: InputMaybe<MembershipWhereInput>
  referredMembers_none?: InputMaybe<MembershipWhereInput>
  referredMembers_some?: InputMaybe<MembershipWhereInput>
  roles_every?: InputMaybe<WorkerWhereInput>
  roles_none?: InputMaybe<WorkerWhereInput>
  roles_some?: InputMaybe<WorkerWhereInput>
  rootAccount_contains?: InputMaybe<Scalars['String']>
  rootAccount_endsWith?: InputMaybe<Scalars['String']>
  rootAccount_eq?: InputMaybe<Scalars['String']>
  rootAccount_in?: InputMaybe<Array<Scalars['String']>>
  rootAccount_startsWith?: InputMaybe<Scalars['String']>
  stakingaccountaddedeventmember_every?: InputMaybe<StakingAccountAddedEventWhereInput>
  stakingaccountaddedeventmember_none?: InputMaybe<StakingAccountAddedEventWhereInput>
  stakingaccountaddedeventmember_some?: InputMaybe<StakingAccountAddedEventWhereInput>
  stakingaccountconfirmedeventmember_every?: InputMaybe<StakingAccountConfirmedEventWhereInput>
  stakingaccountconfirmedeventmember_none?: InputMaybe<StakingAccountConfirmedEventWhereInput>
  stakingaccountconfirmedeventmember_some?: InputMaybe<StakingAccountConfirmedEventWhereInput>
  stakingaccountremovedeventmember_every?: InputMaybe<StakingAccountRemovedEventWhereInput>
  stakingaccountremovedeventmember_none?: InputMaybe<StakingAccountRemovedEventWhereInput>
  stakingaccountremovedeventmember_some?: InputMaybe<StakingAccountRemovedEventWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  voteonpolleventvotingMember_every?: InputMaybe<VoteOnPollEventWhereInput>
  voteonpolleventvotingMember_none?: InputMaybe<VoteOnPollEventWhereInput>
  voteonpolleventvotingMember_some?: InputMaybe<VoteOnPollEventWhereInput>
  whitelistedIn_every?: InputMaybe<ProposalDiscussionWhitelistWhereInput>
  whitelistedIn_none?: InputMaybe<ProposalDiscussionWhitelistWhereInput>
  whitelistedIn_some?: InputMaybe<ProposalDiscussionWhitelistWhereInput>
  whitelistedInAuctions_every?: InputMaybe<AuctionWhereInput>
  whitelistedInAuctions_none?: InputMaybe<AuctionWhereInput>
  whitelistedInAuctions_some?: InputMaybe<AuctionWhereInput>
  workinggroupapplicationapplicant_every?: InputMaybe<WorkingGroupApplicationWhereInput>
  workinggroupapplicationapplicant_none?: InputMaybe<WorkingGroupApplicationWhereInput>
  workinggroupapplicationapplicant_some?: InputMaybe<WorkingGroupApplicationWhereInput>
}

export type AuctionBidCanceledEventWhereInput = {
  AND?: InputMaybe<Array<AuctionBidCanceledEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<AuctionBidCanceledEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type VideoWhereInput = {
  AND?: InputMaybe<Array<VideoWhereInput>>
  auctionbidcanceledeventvideo_every?: InputMaybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventvideo_none?: InputMaybe<AuctionBidCanceledEventWhereInput>
  auctionbidcanceledeventvideo_some?: InputMaybe<AuctionBidCanceledEventWhereInput>
  auctionbidmadeeventvideo_every?: InputMaybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventvideo_none?: InputMaybe<AuctionBidMadeEventWhereInput>
  auctionbidmadeeventvideo_some?: InputMaybe<AuctionBidMadeEventWhereInput>
  auctioncanceledeventvideo_every?: InputMaybe<AuctionCanceledEventWhereInput>
  auctioncanceledeventvideo_none?: InputMaybe<AuctionCanceledEventWhereInput>
  auctioncanceledeventvideo_some?: InputMaybe<AuctionCanceledEventWhereInput>
  auctionstartedeventvideo_every?: InputMaybe<AuctionStartedEventWhereInput>
  auctionstartedeventvideo_none?: InputMaybe<AuctionStartedEventWhereInput>
  auctionstartedeventvideo_some?: InputMaybe<AuctionStartedEventWhereInput>
  bidmadecompletingauctioneventvideo_every?: InputMaybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventvideo_none?: InputMaybe<BidMadeCompletingAuctionEventWhereInput>
  bidmadecompletingauctioneventvideo_some?: InputMaybe<BidMadeCompletingAuctionEventWhereInput>
  buynowcanceledeventvideo_every?: InputMaybe<BuyNowCanceledEventWhereInput>
  buynowcanceledeventvideo_none?: InputMaybe<BuyNowCanceledEventWhereInput>
  buynowcanceledeventvideo_some?: InputMaybe<BuyNowCanceledEventWhereInput>
  category?: InputMaybe<VideoCategoryWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInBlock_eq?: InputMaybe<Scalars['Int']>
  createdInBlock_gt?: InputMaybe<Scalars['Int']>
  createdInBlock_gte?: InputMaybe<Scalars['Int']>
  createdInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  createdInBlock_lt?: InputMaybe<Scalars['Int']>
  createdInBlock_lte?: InputMaybe<Scalars['Int']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  description_contains?: InputMaybe<Scalars['String']>
  description_endsWith?: InputMaybe<Scalars['String']>
  description_eq?: InputMaybe<Scalars['String']>
  description_in?: InputMaybe<Array<Scalars['String']>>
  description_startsWith?: InputMaybe<Scalars['String']>
  duration_eq?: InputMaybe<Scalars['Int']>
  duration_gt?: InputMaybe<Scalars['Int']>
  duration_gte?: InputMaybe<Scalars['Int']>
  duration_in?: InputMaybe<Array<Scalars['Int']>>
  duration_lt?: InputMaybe<Scalars['Int']>
  duration_lte?: InputMaybe<Scalars['Int']>
  englishauctioncompletedeventvideo_every?: InputMaybe<EnglishAuctionCompletedEventWhereInput>
  englishauctioncompletedeventvideo_none?: InputMaybe<EnglishAuctionCompletedEventWhereInput>
  englishauctioncompletedeventvideo_some?: InputMaybe<EnglishAuctionCompletedEventWhereInput>
  hasMarketing_eq?: InputMaybe<Scalars['Boolean']>
  hasMarketing_in?: InputMaybe<Array<Scalars['Boolean']>>
  channel?: InputMaybe<ChannelWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isCensored_eq?: InputMaybe<Scalars['Boolean']>
  isCensored_in?: InputMaybe<Array<Scalars['Boolean']>>
  isExplicit_eq?: InputMaybe<Scalars['Boolean']>
  isExplicit_in?: InputMaybe<Array<Scalars['Boolean']>>
  isFeatured_eq?: InputMaybe<Scalars['Boolean']>
  isFeatured_in?: InputMaybe<Array<Scalars['Boolean']>>
  isPublic_eq?: InputMaybe<Scalars['Boolean']>
  isPublic_in?: InputMaybe<Array<Scalars['Boolean']>>
  language?: InputMaybe<LanguageWhereInput>
  license?: InputMaybe<LicenseWhereInput>
  media?: InputMaybe<StorageDataObjectWhereInput>
  mediaMetadata?: InputMaybe<VideoMediaMetadataWhereInput>
  nft?: InputMaybe<OwnedNftWhereInput>
  nftboughteventvideo_every?: InputMaybe<NftBoughtEventWhereInput>
  nftboughteventvideo_none?: InputMaybe<NftBoughtEventWhereInput>
  nftboughteventvideo_some?: InputMaybe<NftBoughtEventWhereInput>
  nftissuedeventvideo_every?: InputMaybe<NftIssuedEventWhereInput>
  nftissuedeventvideo_none?: InputMaybe<NftIssuedEventWhereInput>
  nftissuedeventvideo_some?: InputMaybe<NftIssuedEventWhereInput>
  nftsellordermadeeventvideo_every?: InputMaybe<NftSellOrderMadeEventWhereInput>
  nftsellordermadeeventvideo_none?: InputMaybe<NftSellOrderMadeEventWhereInput>
  nftsellordermadeeventvideo_some?: InputMaybe<NftSellOrderMadeEventWhereInput>
  offeracceptedeventvideo_every?: InputMaybe<OfferAcceptedEventWhereInput>
  offeracceptedeventvideo_none?: InputMaybe<OfferAcceptedEventWhereInput>
  offeracceptedeventvideo_some?: InputMaybe<OfferAcceptedEventWhereInput>
  offercanceledeventvideo_every?: InputMaybe<OfferCanceledEventWhereInput>
  offercanceledeventvideo_none?: InputMaybe<OfferCanceledEventWhereInput>
  offercanceledeventvideo_some?: InputMaybe<OfferCanceledEventWhereInput>
  offerstartedeventvideo_every?: InputMaybe<OfferStartedEventWhereInput>
  offerstartedeventvideo_none?: InputMaybe<OfferStartedEventWhereInput>
  offerstartedeventvideo_some?: InputMaybe<OfferStartedEventWhereInput>
  openauctionbidacceptedeventvideo_every?: InputMaybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventvideo_none?: InputMaybe<OpenAuctionBidAcceptedEventWhereInput>
  openauctionbidacceptedeventvideo_some?: InputMaybe<OpenAuctionBidAcceptedEventWhereInput>
  OR?: InputMaybe<Array<VideoWhereInput>>
  publishedBeforeJoystream_eq?: InputMaybe<Scalars['DateTime']>
  publishedBeforeJoystream_gt?: InputMaybe<Scalars['DateTime']>
  publishedBeforeJoystream_gte?: InputMaybe<Scalars['DateTime']>
  publishedBeforeJoystream_lt?: InputMaybe<Scalars['DateTime']>
  publishedBeforeJoystream_lte?: InputMaybe<Scalars['DateTime']>
  thumbnailPhoto?: InputMaybe<StorageDataObjectWhereInput>
  title_contains?: InputMaybe<Scalars['String']>
  title_endsWith?: InputMaybe<Scalars['String']>
  title_eq?: InputMaybe<Scalars['String']>
  title_in?: InputMaybe<Array<Scalars['String']>>
  title_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type AuctionBidMadeEventWhereInput = {
  AND?: InputMaybe<Array<AuctionBidMadeEventWhereInput>>
  bidAmount_eq?: InputMaybe<Scalars['BigInt']>
  bidAmount_gt?: InputMaybe<Scalars['BigInt']>
  bidAmount_gte?: InputMaybe<Scalars['BigInt']>
  bidAmount_in?: InputMaybe<Array<Scalars['BigInt']>>
  bidAmount_lt?: InputMaybe<Scalars['BigInt']>
  bidAmount_lte?: InputMaybe<Scalars['BigInt']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  extendsAuction_eq?: InputMaybe<Scalars['Boolean']>
  extendsAuction_in?: InputMaybe<Array<Scalars['Boolean']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<AuctionBidMadeEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type AuctionCanceledEventWhereInput = {
  AND?: InputMaybe<Array<AuctionCanceledEventWhereInput>>
  contentActor_json?: InputMaybe<Scalars['JSONObject']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<AuctionCanceledEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type AuctionStartedEventWhereInput = {
  actor_json?: InputMaybe<Scalars['JSONObject']>
  AND?: InputMaybe<Array<AuctionStartedEventWhereInput>>
  auction?: InputMaybe<AuctionWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<AuctionStartedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type AuctionWhereInput = {
  AND?: InputMaybe<Array<AuctionWhereInput>>
  auctionstartedeventauction_every?: InputMaybe<AuctionStartedEventWhereInput>
  auctionstartedeventauction_none?: InputMaybe<AuctionStartedEventWhereInput>
  auctionstartedeventauction_some?: InputMaybe<AuctionStartedEventWhereInput>
  auctionType_json?: InputMaybe<Scalars['JSONObject']>
  bids_every?: InputMaybe<BidWhereInput>
  bids_none?: InputMaybe<BidWhereInput>
  bids_some?: InputMaybe<BidWhereInput>
  buyNowPrice_eq?: InputMaybe<Scalars['BigInt']>
  buyNowPrice_gt?: InputMaybe<Scalars['BigInt']>
  buyNowPrice_gte?: InputMaybe<Scalars['BigInt']>
  buyNowPrice_in?: InputMaybe<Array<Scalars['BigInt']>>
  buyNowPrice_lt?: InputMaybe<Scalars['BigInt']>
  buyNowPrice_lte?: InputMaybe<Scalars['BigInt']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  endedAtBlock_eq?: InputMaybe<Scalars['Int']>
  endedAtBlock_gt?: InputMaybe<Scalars['Int']>
  endedAtBlock_gte?: InputMaybe<Scalars['Int']>
  endedAtBlock_in?: InputMaybe<Array<Scalars['Int']>>
  endedAtBlock_lt?: InputMaybe<Scalars['Int']>
  endedAtBlock_lte?: InputMaybe<Scalars['Int']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  initialOwner?: InputMaybe<MembershipWhereInput>
  isCanceled_eq?: InputMaybe<Scalars['Boolean']>
  isCanceled_in?: InputMaybe<Array<Scalars['Boolean']>>
  isCompleted_eq?: InputMaybe<Scalars['Boolean']>
  isCompleted_in?: InputMaybe<Array<Scalars['Boolean']>>
  lastBid?: InputMaybe<BidWhereInput>
  minimalBidStep_eq?: InputMaybe<Scalars['BigInt']>
  minimalBidStep_gt?: InputMaybe<Scalars['BigInt']>
  minimalBidStep_gte?: InputMaybe<Scalars['BigInt']>
  minimalBidStep_in?: InputMaybe<Array<Scalars['BigInt']>>
  minimalBidStep_lt?: InputMaybe<Scalars['BigInt']>
  minimalBidStep_lte?: InputMaybe<Scalars['BigInt']>
  nft?: InputMaybe<OwnedNftWhereInput>
  OR?: InputMaybe<Array<AuctionWhereInput>>
  plannedEndAtBlock_eq?: InputMaybe<Scalars['Int']>
  plannedEndAtBlock_gt?: InputMaybe<Scalars['Int']>
  plannedEndAtBlock_gte?: InputMaybe<Scalars['Int']>
  plannedEndAtBlock_in?: InputMaybe<Array<Scalars['Int']>>
  plannedEndAtBlock_lt?: InputMaybe<Scalars['Int']>
  plannedEndAtBlock_lte?: InputMaybe<Scalars['Int']>
  startingPrice_eq?: InputMaybe<Scalars['BigInt']>
  startingPrice_gt?: InputMaybe<Scalars['BigInt']>
  startingPrice_gte?: InputMaybe<Scalars['BigInt']>
  startingPrice_in?: InputMaybe<Array<Scalars['BigInt']>>
  startingPrice_lt?: InputMaybe<Scalars['BigInt']>
  startingPrice_lte?: InputMaybe<Scalars['BigInt']>
  startsAtBlock_eq?: InputMaybe<Scalars['Int']>
  startsAtBlock_gt?: InputMaybe<Scalars['Int']>
  startsAtBlock_gte?: InputMaybe<Scalars['Int']>
  startsAtBlock_in?: InputMaybe<Array<Scalars['Int']>>
  startsAtBlock_lt?: InputMaybe<Scalars['Int']>
  startsAtBlock_lte?: InputMaybe<Scalars['Int']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  whitelistedMembers_every?: InputMaybe<MembershipWhereInput>
  whitelistedMembers_none?: InputMaybe<MembershipWhereInput>
  whitelistedMembers_some?: InputMaybe<MembershipWhereInput>
  winningMember?: InputMaybe<MembershipWhereInput>
}

export type BidWhereInput = {
  amount_eq?: InputMaybe<Scalars['BigInt']>
  amount_gt?: InputMaybe<Scalars['BigInt']>
  amount_gte?: InputMaybe<Scalars['BigInt']>
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>
  amount_lt?: InputMaybe<Scalars['BigInt']>
  amount_lte?: InputMaybe<Scalars['BigInt']>
  AND?: InputMaybe<Array<BidWhereInput>>
  auction?: InputMaybe<AuctionWhereInput>
  auctionlastBid_every?: InputMaybe<AuctionWhereInput>
  auctionlastBid_none?: InputMaybe<AuctionWhereInput>
  auctionlastBid_some?: InputMaybe<AuctionWhereInput>
  bidder?: InputMaybe<MembershipWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInBlock_eq?: InputMaybe<Scalars['Int']>
  createdInBlock_gt?: InputMaybe<Scalars['Int']>
  createdInBlock_gte?: InputMaybe<Scalars['Int']>
  createdInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  createdInBlock_lt?: InputMaybe<Scalars['Int']>
  createdInBlock_lte?: InputMaybe<Scalars['Int']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isCanceled_eq?: InputMaybe<Scalars['Boolean']>
  isCanceled_in?: InputMaybe<Array<Scalars['Boolean']>>
  OR?: InputMaybe<Array<BidWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type OwnedNftWhereInput = {
  AND?: InputMaybe<Array<OwnedNftWhereInput>>
  auctions_every?: InputMaybe<AuctionWhereInput>
  auctions_none?: InputMaybe<AuctionWhereInput>
  auctions_some?: InputMaybe<AuctionWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  creatorRoyalty_eq?: InputMaybe<Scalars['Float']>
  creatorRoyalty_gt?: InputMaybe<Scalars['Float']>
  creatorRoyalty_gte?: InputMaybe<Scalars['Float']>
  creatorRoyalty_in?: InputMaybe<Array<Scalars['Float']>>
  creatorRoyalty_lt?: InputMaybe<Scalars['Float']>
  creatorRoyalty_lte?: InputMaybe<Scalars['Float']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  metadata_contains?: InputMaybe<Scalars['String']>
  metadata_endsWith?: InputMaybe<Scalars['String']>
  metadata_eq?: InputMaybe<Scalars['String']>
  metadata_in?: InputMaybe<Array<Scalars['String']>>
  metadata_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<OwnedNftWhereInput>>
  ownerMember?: InputMaybe<MembershipWhereInput>
  transactionalStatus_json?: InputMaybe<Scalars['JSONObject']>
  transactionalStatusUpdates_every?: InputMaybe<TransactionalStatusUpdateWhereInput>
  transactionalStatusUpdates_none?: InputMaybe<TransactionalStatusUpdateWhereInput>
  transactionalStatusUpdates_some?: InputMaybe<TransactionalStatusUpdateWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type TransactionalStatusUpdateWhereInput = {
  AND?: InputMaybe<Array<TransactionalStatusUpdateWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  changedAt_eq?: InputMaybe<Scalars['Int']>
  changedAt_gt?: InputMaybe<Scalars['Int']>
  changedAt_gte?: InputMaybe<Scalars['Int']>
  changedAt_in?: InputMaybe<Array<Scalars['Int']>>
  changedAt_lt?: InputMaybe<Scalars['Int']>
  changedAt_lte?: InputMaybe<Scalars['Int']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  nft?: InputMaybe<OwnedNftWhereInput>
  OR?: InputMaybe<Array<TransactionalStatusUpdateWhereInput>>
  transactionalStatus_json?: InputMaybe<Scalars['JSONObject']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type BidMadeCompletingAuctionEventWhereInput = {
  AND?: InputMaybe<Array<BidMadeCompletingAuctionEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<BidMadeCompletingAuctionEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type BuyNowCanceledEventWhereInput = {
  AND?: InputMaybe<Array<BuyNowCanceledEventWhereInput>>
  contentActor_json?: InputMaybe<Scalars['JSONObject']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<BuyNowCanceledEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type VideoCategoryWhereInput = {
  activeVideosCounter_eq?: InputMaybe<Scalars['Int']>
  activeVideosCounter_gt?: InputMaybe<Scalars['Int']>
  activeVideosCounter_gte?: InputMaybe<Scalars['Int']>
  activeVideosCounter_in?: InputMaybe<Array<Scalars['Int']>>
  activeVideosCounter_lt?: InputMaybe<Scalars['Int']>
  activeVideosCounter_lte?: InputMaybe<Scalars['Int']>
  AND?: InputMaybe<Array<VideoCategoryWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInBlock_eq?: InputMaybe<Scalars['Int']>
  createdInBlock_gt?: InputMaybe<Scalars['Int']>
  createdInBlock_gte?: InputMaybe<Scalars['Int']>
  createdInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  createdInBlock_lt?: InputMaybe<Scalars['Int']>
  createdInBlock_lte?: InputMaybe<Scalars['Int']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  name_contains?: InputMaybe<Scalars['String']>
  name_endsWith?: InputMaybe<Scalars['String']>
  name_eq?: InputMaybe<Scalars['String']>
  name_in?: InputMaybe<Array<Scalars['String']>>
  name_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<VideoCategoryWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  videos_every?: InputMaybe<VideoWhereInput>
  videos_none?: InputMaybe<VideoWhereInput>
  videos_some?: InputMaybe<VideoWhereInput>
}

export type EnglishAuctionCompletedEventWhereInput = {
  AND?: InputMaybe<Array<EnglishAuctionCompletedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<EnglishAuctionCompletedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
  winner?: InputMaybe<MembershipWhereInput>
}

export type ChannelWhereInput = {
  activeVideosCounter_eq?: InputMaybe<Scalars['Int']>
  activeVideosCounter_gt?: InputMaybe<Scalars['Int']>
  activeVideosCounter_gte?: InputMaybe<Scalars['Int']>
  activeVideosCounter_in?: InputMaybe<Array<Scalars['Int']>>
  activeVideosCounter_lt?: InputMaybe<Scalars['Int']>
  activeVideosCounter_lte?: InputMaybe<Scalars['Int']>
  AND?: InputMaybe<Array<ChannelWhereInput>>
  avatarPhoto?: InputMaybe<StorageDataObjectWhereInput>
  category?: InputMaybe<ChannelCategoryWhereInput>
  collaborators_every?: InputMaybe<MembershipWhereInput>
  collaborators_none?: InputMaybe<MembershipWhereInput>
  collaborators_some?: InputMaybe<MembershipWhereInput>
  coverPhoto?: InputMaybe<StorageDataObjectWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInBlock_eq?: InputMaybe<Scalars['Int']>
  createdInBlock_gt?: InputMaybe<Scalars['Int']>
  createdInBlock_gte?: InputMaybe<Scalars['Int']>
  createdInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  createdInBlock_lt?: InputMaybe<Scalars['Int']>
  createdInBlock_lte?: InputMaybe<Scalars['Int']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  description_contains?: InputMaybe<Scalars['String']>
  description_endsWith?: InputMaybe<Scalars['String']>
  description_eq?: InputMaybe<Scalars['String']>
  description_in?: InputMaybe<Array<Scalars['String']>>
  description_startsWith?: InputMaybe<Scalars['String']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isCensored_eq?: InputMaybe<Scalars['Boolean']>
  isCensored_in?: InputMaybe<Array<Scalars['Boolean']>>
  isPublic_eq?: InputMaybe<Scalars['Boolean']>
  isPublic_in?: InputMaybe<Array<Scalars['Boolean']>>
  language?: InputMaybe<LanguageWhereInput>
  OR?: InputMaybe<Array<ChannelWhereInput>>
  ownerCuratorGroup?: InputMaybe<CuratorGroupWhereInput>
  ownerMember?: InputMaybe<MembershipWhereInput>
  rewardAccount_contains?: InputMaybe<Scalars['String']>
  rewardAccount_endsWith?: InputMaybe<Scalars['String']>
  rewardAccount_eq?: InputMaybe<Scalars['String']>
  rewardAccount_in?: InputMaybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: InputMaybe<Scalars['String']>
  title_contains?: InputMaybe<Scalars['String']>
  title_endsWith?: InputMaybe<Scalars['String']>
  title_eq?: InputMaybe<Scalars['String']>
  title_in?: InputMaybe<Array<Scalars['String']>>
  title_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  videos_every?: InputMaybe<VideoWhereInput>
  videos_none?: InputMaybe<VideoWhereInput>
  videos_some?: InputMaybe<VideoWhereInput>
}

export type StorageDataObjectWhereInput = {
  AND?: InputMaybe<Array<StorageDataObjectWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  deletionPrize_eq?: InputMaybe<Scalars['BigInt']>
  deletionPrize_gt?: InputMaybe<Scalars['BigInt']>
  deletionPrize_gte?: InputMaybe<Scalars['BigInt']>
  deletionPrize_in?: InputMaybe<Array<Scalars['BigInt']>>
  deletionPrize_lt?: InputMaybe<Scalars['BigInt']>
  deletionPrize_lte?: InputMaybe<Scalars['BigInt']>
  channelavatarPhoto_every?: InputMaybe<ChannelWhereInput>
  channelavatarPhoto_none?: InputMaybe<ChannelWhereInput>
  channelavatarPhoto_some?: InputMaybe<ChannelWhereInput>
  channelcoverPhoto_every?: InputMaybe<ChannelWhereInput>
  channelcoverPhoto_none?: InputMaybe<ChannelWhereInput>
  channelcoverPhoto_some?: InputMaybe<ChannelWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  ipfsHash_contains?: InputMaybe<Scalars['String']>
  ipfsHash_endsWith?: InputMaybe<Scalars['String']>
  ipfsHash_eq?: InputMaybe<Scalars['String']>
  ipfsHash_in?: InputMaybe<Array<Scalars['String']>>
  ipfsHash_startsWith?: InputMaybe<Scalars['String']>
  isAccepted_eq?: InputMaybe<Scalars['Boolean']>
  isAccepted_in?: InputMaybe<Array<Scalars['Boolean']>>
  OR?: InputMaybe<Array<StorageDataObjectWhereInput>>
  size_eq?: InputMaybe<Scalars['BigInt']>
  size_gt?: InputMaybe<Scalars['BigInt']>
  size_gte?: InputMaybe<Scalars['BigInt']>
  size_in?: InputMaybe<Array<Scalars['BigInt']>>
  size_lt?: InputMaybe<Scalars['BigInt']>
  size_lte?: InputMaybe<Scalars['BigInt']>
  storageBag?: InputMaybe<StorageBagWhereInput>
  type_json?: InputMaybe<Scalars['JSONObject']>
  unsetAt_eq?: InputMaybe<Scalars['DateTime']>
  unsetAt_gt?: InputMaybe<Scalars['DateTime']>
  unsetAt_gte?: InputMaybe<Scalars['DateTime']>
  unsetAt_lt?: InputMaybe<Scalars['DateTime']>
  unsetAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  videoMedia?: InputMaybe<VideoWhereInput>
  videoThumbnail?: InputMaybe<VideoWhereInput>
}

export type StorageBagWhereInput = {
  AND?: InputMaybe<Array<StorageBagWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  distributionBuckets_every?: InputMaybe<DistributionBucketWhereInput>
  distributionBuckets_none?: InputMaybe<DistributionBucketWhereInput>
  distributionBuckets_some?: InputMaybe<DistributionBucketWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  objects_every?: InputMaybe<StorageDataObjectWhereInput>
  objects_none?: InputMaybe<StorageDataObjectWhereInput>
  objects_some?: InputMaybe<StorageDataObjectWhereInput>
  OR?: InputMaybe<Array<StorageBagWhereInput>>
  owner_json?: InputMaybe<Scalars['JSONObject']>
  storageBuckets_every?: InputMaybe<StorageBucketWhereInput>
  storageBuckets_none?: InputMaybe<StorageBucketWhereInput>
  storageBuckets_some?: InputMaybe<StorageBucketWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type DistributionBucketWhereInput = {
  acceptingNewBags_eq?: InputMaybe<Scalars['Boolean']>
  acceptingNewBags_in?: InputMaybe<Array<Scalars['Boolean']>>
  AND?: InputMaybe<Array<DistributionBucketWhereInput>>
  bags_every?: InputMaybe<StorageBagWhereInput>
  bags_none?: InputMaybe<StorageBagWhereInput>
  bags_some?: InputMaybe<StorageBagWhereInput>
  bucketIndex_eq?: InputMaybe<Scalars['Int']>
  bucketIndex_gt?: InputMaybe<Scalars['Int']>
  bucketIndex_gte?: InputMaybe<Scalars['Int']>
  bucketIndex_in?: InputMaybe<Array<Scalars['Int']>>
  bucketIndex_lt?: InputMaybe<Scalars['Int']>
  bucketIndex_lte?: InputMaybe<Scalars['Int']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  distributing_eq?: InputMaybe<Scalars['Boolean']>
  distributing_in?: InputMaybe<Array<Scalars['Boolean']>>
  family?: InputMaybe<DistributionBucketFamilyWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  operators_every?: InputMaybe<DistributionBucketOperatorWhereInput>
  operators_none?: InputMaybe<DistributionBucketOperatorWhereInput>
  operators_some?: InputMaybe<DistributionBucketOperatorWhereInput>
  OR?: InputMaybe<Array<DistributionBucketWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type DistributionBucketFamilyWhereInput = {
  AND?: InputMaybe<Array<DistributionBucketFamilyWhereInput>>
  buckets_every?: InputMaybe<DistributionBucketWhereInput>
  buckets_none?: InputMaybe<DistributionBucketWhereInput>
  buckets_some?: InputMaybe<DistributionBucketWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  metadata?: InputMaybe<DistributionBucketFamilyMetadataWhereInput>
  OR?: InputMaybe<Array<DistributionBucketFamilyWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type DistributionBucketFamilyMetadataWhereInput = {
  AND?: InputMaybe<Array<DistributionBucketFamilyMetadataWhereInput>>
  areas_every?: InputMaybe<DistributionBucketFamilyGeographicAreaWhereInput>
  areas_none?: InputMaybe<DistributionBucketFamilyGeographicAreaWhereInput>
  areas_some?: InputMaybe<DistributionBucketFamilyGeographicAreaWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  description_contains?: InputMaybe<Scalars['String']>
  description_endsWith?: InputMaybe<Scalars['String']>
  description_eq?: InputMaybe<Scalars['String']>
  description_in?: InputMaybe<Array<Scalars['String']>>
  description_startsWith?: InputMaybe<Scalars['String']>
  distributionbucketfamilymetadata_every?: InputMaybe<DistributionBucketFamilyWhereInput>
  distributionbucketfamilymetadata_none?: InputMaybe<DistributionBucketFamilyWhereInput>
  distributionbucketfamilymetadata_some?: InputMaybe<DistributionBucketFamilyWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  latencyTestTargets_containsAll?: InputMaybe<Array<Scalars['String']>>
  latencyTestTargets_containsAny?: InputMaybe<Array<Scalars['String']>>
  latencyTestTargets_containsNone?: InputMaybe<Array<Scalars['String']>>
  OR?: InputMaybe<Array<DistributionBucketFamilyMetadataWhereInput>>
  region_contains?: InputMaybe<Scalars['String']>
  region_endsWith?: InputMaybe<Scalars['String']>
  region_eq?: InputMaybe<Scalars['String']>
  region_in?: InputMaybe<Array<Scalars['String']>>
  region_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type DistributionBucketFamilyGeographicAreaWhereInput = {
  AND?: InputMaybe<Array<DistributionBucketFamilyGeographicAreaWhereInput>>
  area_json?: InputMaybe<Scalars['JSONObject']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  distributionBucketFamilyMetadata?: InputMaybe<DistributionBucketFamilyMetadataWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<DistributionBucketFamilyGeographicAreaWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type DistributionBucketOperatorWhereInput = {
  AND?: InputMaybe<Array<DistributionBucketOperatorWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  distributionBucket?: InputMaybe<DistributionBucketWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  metadata?: InputMaybe<DistributionBucketOperatorMetadataWhereInput>
  OR?: InputMaybe<Array<DistributionBucketOperatorWhereInput>>
  status_eq?: InputMaybe<DistributionBucketOperatorStatus>
  status_in?: InputMaybe<Array<DistributionBucketOperatorStatus>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  workerId_eq?: InputMaybe<Scalars['Int']>
  workerId_gt?: InputMaybe<Scalars['Int']>
  workerId_gte?: InputMaybe<Scalars['Int']>
  workerId_in?: InputMaybe<Array<Scalars['Int']>>
  workerId_lt?: InputMaybe<Scalars['Int']>
  workerId_lte?: InputMaybe<Scalars['Int']>
}

export type DistributionBucketOperatorMetadataWhereInput = {
  AND?: InputMaybe<Array<DistributionBucketOperatorMetadataWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  distributionbucketoperatormetadata_every?: InputMaybe<DistributionBucketOperatorWhereInput>
  distributionbucketoperatormetadata_none?: InputMaybe<DistributionBucketOperatorWhereInput>
  distributionbucketoperatormetadata_some?: InputMaybe<DistributionBucketOperatorWhereInput>
  extra_contains?: InputMaybe<Scalars['String']>
  extra_endsWith?: InputMaybe<Scalars['String']>
  extra_eq?: InputMaybe<Scalars['String']>
  extra_in?: InputMaybe<Array<Scalars['String']>>
  extra_startsWith?: InputMaybe<Scalars['String']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  nodeEndpoint_contains?: InputMaybe<Scalars['String']>
  nodeEndpoint_endsWith?: InputMaybe<Scalars['String']>
  nodeEndpoint_eq?: InputMaybe<Scalars['String']>
  nodeEndpoint_in?: InputMaybe<Array<Scalars['String']>>
  nodeEndpoint_startsWith?: InputMaybe<Scalars['String']>
  nodeLocation?: InputMaybe<NodeLocationMetadataWhereInput>
  OR?: InputMaybe<Array<DistributionBucketOperatorMetadataWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type NodeLocationMetadataWhereInput = {
  AND?: InputMaybe<Array<NodeLocationMetadataWhereInput>>
  city_contains?: InputMaybe<Scalars['String']>
  city_endsWith?: InputMaybe<Scalars['String']>
  city_eq?: InputMaybe<Scalars['String']>
  city_in?: InputMaybe<Array<Scalars['String']>>
  city_startsWith?: InputMaybe<Scalars['String']>
  coordinates?: InputMaybe<GeoCoordinatesWhereInput>
  countryCode_contains?: InputMaybe<Scalars['String']>
  countryCode_endsWith?: InputMaybe<Scalars['String']>
  countryCode_eq?: InputMaybe<Scalars['String']>
  countryCode_in?: InputMaybe<Array<Scalars['String']>>
  countryCode_startsWith?: InputMaybe<Scalars['String']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  distributionbucketoperatormetadatanodeLocation_every?: InputMaybe<DistributionBucketOperatorMetadataWhereInput>
  distributionbucketoperatormetadatanodeLocation_none?: InputMaybe<DistributionBucketOperatorMetadataWhereInput>
  distributionbucketoperatormetadatanodeLocation_some?: InputMaybe<DistributionBucketOperatorMetadataWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<NodeLocationMetadataWhereInput>>
  storagebucketoperatormetadatanodeLocation_every?: InputMaybe<StorageBucketOperatorMetadataWhereInput>
  storagebucketoperatormetadatanodeLocation_none?: InputMaybe<StorageBucketOperatorMetadataWhereInput>
  storagebucketoperatormetadatanodeLocation_some?: InputMaybe<StorageBucketOperatorMetadataWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type GeoCoordinatesWhereInput = {
  AND?: InputMaybe<Array<GeoCoordinatesWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  latitude_eq?: InputMaybe<Scalars['Float']>
  latitude_gt?: InputMaybe<Scalars['Float']>
  latitude_gte?: InputMaybe<Scalars['Float']>
  latitude_in?: InputMaybe<Array<Scalars['Float']>>
  latitude_lt?: InputMaybe<Scalars['Float']>
  latitude_lte?: InputMaybe<Scalars['Float']>
  longitude_eq?: InputMaybe<Scalars['Float']>
  longitude_gt?: InputMaybe<Scalars['Float']>
  longitude_gte?: InputMaybe<Scalars['Float']>
  longitude_in?: InputMaybe<Array<Scalars['Float']>>
  longitude_lt?: InputMaybe<Scalars['Float']>
  longitude_lte?: InputMaybe<Scalars['Float']>
  nodelocationmetadatacoordinates_every?: InputMaybe<NodeLocationMetadataWhereInput>
  nodelocationmetadatacoordinates_none?: InputMaybe<NodeLocationMetadataWhereInput>
  nodelocationmetadatacoordinates_some?: InputMaybe<NodeLocationMetadataWhereInput>
  OR?: InputMaybe<Array<GeoCoordinatesWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type StorageBucketOperatorMetadataWhereInput = {
  AND?: InputMaybe<Array<StorageBucketOperatorMetadataWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  extra_contains?: InputMaybe<Scalars['String']>
  extra_endsWith?: InputMaybe<Scalars['String']>
  extra_eq?: InputMaybe<Scalars['String']>
  extra_in?: InputMaybe<Array<Scalars['String']>>
  extra_startsWith?: InputMaybe<Scalars['String']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  nodeEndpoint_contains?: InputMaybe<Scalars['String']>
  nodeEndpoint_endsWith?: InputMaybe<Scalars['String']>
  nodeEndpoint_eq?: InputMaybe<Scalars['String']>
  nodeEndpoint_in?: InputMaybe<Array<Scalars['String']>>
  nodeEndpoint_startsWith?: InputMaybe<Scalars['String']>
  nodeLocation?: InputMaybe<NodeLocationMetadataWhereInput>
  OR?: InputMaybe<Array<StorageBucketOperatorMetadataWhereInput>>
  storagebucketoperatorMetadata_every?: InputMaybe<StorageBucketWhereInput>
  storagebucketoperatorMetadata_none?: InputMaybe<StorageBucketWhereInput>
  storagebucketoperatorMetadata_some?: InputMaybe<StorageBucketWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type StorageBucketWhereInput = {
  acceptingNewBags_eq?: InputMaybe<Scalars['Boolean']>
  acceptingNewBags_in?: InputMaybe<Array<Scalars['Boolean']>>
  AND?: InputMaybe<Array<StorageBucketWhereInput>>
  bags_every?: InputMaybe<StorageBagWhereInput>
  bags_none?: InputMaybe<StorageBagWhereInput>
  bags_some?: InputMaybe<StorageBagWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  dataObjectCountLimit_eq?: InputMaybe<Scalars['BigInt']>
  dataObjectCountLimit_gt?: InputMaybe<Scalars['BigInt']>
  dataObjectCountLimit_gte?: InputMaybe<Scalars['BigInt']>
  dataObjectCountLimit_in?: InputMaybe<Array<Scalars['BigInt']>>
  dataObjectCountLimit_lt?: InputMaybe<Scalars['BigInt']>
  dataObjectCountLimit_lte?: InputMaybe<Scalars['BigInt']>
  dataObjectsCount_eq?: InputMaybe<Scalars['BigInt']>
  dataObjectsCount_gt?: InputMaybe<Scalars['BigInt']>
  dataObjectsCount_gte?: InputMaybe<Scalars['BigInt']>
  dataObjectsCount_in?: InputMaybe<Array<Scalars['BigInt']>>
  dataObjectsCount_lt?: InputMaybe<Scalars['BigInt']>
  dataObjectsCount_lte?: InputMaybe<Scalars['BigInt']>
  dataObjectsSize_eq?: InputMaybe<Scalars['BigInt']>
  dataObjectsSize_gt?: InputMaybe<Scalars['BigInt']>
  dataObjectsSize_gte?: InputMaybe<Scalars['BigInt']>
  dataObjectsSize_in?: InputMaybe<Array<Scalars['BigInt']>>
  dataObjectsSize_lt?: InputMaybe<Scalars['BigInt']>
  dataObjectsSize_lte?: InputMaybe<Scalars['BigInt']>
  dataObjectsSizeLimit_eq?: InputMaybe<Scalars['BigInt']>
  dataObjectsSizeLimit_gt?: InputMaybe<Scalars['BigInt']>
  dataObjectsSizeLimit_gte?: InputMaybe<Scalars['BigInt']>
  dataObjectsSizeLimit_in?: InputMaybe<Array<Scalars['BigInt']>>
  dataObjectsSizeLimit_lt?: InputMaybe<Scalars['BigInt']>
  dataObjectsSizeLimit_lte?: InputMaybe<Scalars['BigInt']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  operatorMetadata?: InputMaybe<StorageBucketOperatorMetadataWhereInput>
  operatorStatus_json?: InputMaybe<Scalars['JSONObject']>
  OR?: InputMaybe<Array<StorageBucketWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ChannelCategoryWhereInput = {
  activeVideosCounter_eq?: InputMaybe<Scalars['Int']>
  activeVideosCounter_gt?: InputMaybe<Scalars['Int']>
  activeVideosCounter_gte?: InputMaybe<Scalars['Int']>
  activeVideosCounter_in?: InputMaybe<Array<Scalars['Int']>>
  activeVideosCounter_lt?: InputMaybe<Scalars['Int']>
  activeVideosCounter_lte?: InputMaybe<Scalars['Int']>
  AND?: InputMaybe<Array<ChannelCategoryWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInBlock_eq?: InputMaybe<Scalars['Int']>
  createdInBlock_gt?: InputMaybe<Scalars['Int']>
  createdInBlock_gte?: InputMaybe<Scalars['Int']>
  createdInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  createdInBlock_lt?: InputMaybe<Scalars['Int']>
  createdInBlock_lte?: InputMaybe<Scalars['Int']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  channels_every?: InputMaybe<ChannelWhereInput>
  channels_none?: InputMaybe<ChannelWhereInput>
  channels_some?: InputMaybe<ChannelWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  name_contains?: InputMaybe<Scalars['String']>
  name_endsWith?: InputMaybe<Scalars['String']>
  name_eq?: InputMaybe<Scalars['String']>
  name_in?: InputMaybe<Array<Scalars['String']>>
  name_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<ChannelCategoryWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type LanguageWhereInput = {
  AND?: InputMaybe<Array<LanguageWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInBlock_eq?: InputMaybe<Scalars['Int']>
  createdInBlock_gt?: InputMaybe<Scalars['Int']>
  createdInBlock_gte?: InputMaybe<Scalars['Int']>
  createdInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  createdInBlock_lt?: InputMaybe<Scalars['Int']>
  createdInBlock_lte?: InputMaybe<Scalars['Int']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  channellanguage_every?: InputMaybe<ChannelWhereInput>
  channellanguage_none?: InputMaybe<ChannelWhereInput>
  channellanguage_some?: InputMaybe<ChannelWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  iso_contains?: InputMaybe<Scalars['String']>
  iso_endsWith?: InputMaybe<Scalars['String']>
  iso_eq?: InputMaybe<Scalars['String']>
  iso_in?: InputMaybe<Array<Scalars['String']>>
  iso_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<LanguageWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  videolanguage_every?: InputMaybe<VideoWhereInput>
  videolanguage_none?: InputMaybe<VideoWhereInput>
  videolanguage_some?: InputMaybe<VideoWhereInput>
}

export type CuratorGroupWhereInput = {
  AND?: InputMaybe<Array<CuratorGroupWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  curators_every?: InputMaybe<CuratorWhereInput>
  curators_none?: InputMaybe<CuratorWhereInput>
  curators_some?: InputMaybe<CuratorWhereInput>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  channels_every?: InputMaybe<ChannelWhereInput>
  channels_none?: InputMaybe<ChannelWhereInput>
  channels_some?: InputMaybe<ChannelWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isActive_eq?: InputMaybe<Scalars['Boolean']>
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>
  OR?: InputMaybe<Array<CuratorGroupWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CuratorWhereInput = {
  AND?: InputMaybe<Array<CuratorWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  curatorGroups_every?: InputMaybe<CuratorGroupWhereInput>
  curatorGroups_none?: InputMaybe<CuratorGroupWhereInput>
  curatorGroups_some?: InputMaybe<CuratorGroupWhereInput>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  dummy_eq?: InputMaybe<Scalars['Int']>
  dummy_gt?: InputMaybe<Scalars['Int']>
  dummy_gte?: InputMaybe<Scalars['Int']>
  dummy_in?: InputMaybe<Array<Scalars['Int']>>
  dummy_lt?: InputMaybe<Scalars['Int']>
  dummy_lte?: InputMaybe<Scalars['Int']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<CuratorWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type LicenseWhereInput = {
  AND?: InputMaybe<Array<LicenseWhereInput>>
  attribution_contains?: InputMaybe<Scalars['String']>
  attribution_endsWith?: InputMaybe<Scalars['String']>
  attribution_eq?: InputMaybe<Scalars['String']>
  attribution_in?: InputMaybe<Array<Scalars['String']>>
  attribution_startsWith?: InputMaybe<Scalars['String']>
  code_eq?: InputMaybe<Scalars['Int']>
  code_gt?: InputMaybe<Scalars['Int']>
  code_gte?: InputMaybe<Scalars['Int']>
  code_in?: InputMaybe<Array<Scalars['Int']>>
  code_lt?: InputMaybe<Scalars['Int']>
  code_lte?: InputMaybe<Scalars['Int']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  customText_contains?: InputMaybe<Scalars['String']>
  customText_endsWith?: InputMaybe<Scalars['String']>
  customText_eq?: InputMaybe<Scalars['String']>
  customText_in?: InputMaybe<Array<Scalars['String']>>
  customText_startsWith?: InputMaybe<Scalars['String']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<LicenseWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  videolicense_every?: InputMaybe<VideoWhereInput>
  videolicense_none?: InputMaybe<VideoWhereInput>
  videolicense_some?: InputMaybe<VideoWhereInput>
}

export type VideoMediaMetadataWhereInput = {
  AND?: InputMaybe<Array<VideoMediaMetadataWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInBlock_eq?: InputMaybe<Scalars['Int']>
  createdInBlock_gt?: InputMaybe<Scalars['Int']>
  createdInBlock_gte?: InputMaybe<Scalars['Int']>
  createdInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  createdInBlock_lt?: InputMaybe<Scalars['Int']>
  createdInBlock_lte?: InputMaybe<Scalars['Int']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  encoding?: InputMaybe<VideoMediaEncodingWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<VideoMediaMetadataWhereInput>>
  pixelHeight_eq?: InputMaybe<Scalars['Int']>
  pixelHeight_gt?: InputMaybe<Scalars['Int']>
  pixelHeight_gte?: InputMaybe<Scalars['Int']>
  pixelHeight_in?: InputMaybe<Array<Scalars['Int']>>
  pixelHeight_lt?: InputMaybe<Scalars['Int']>
  pixelHeight_lte?: InputMaybe<Scalars['Int']>
  pixelWidth_eq?: InputMaybe<Scalars['Int']>
  pixelWidth_gt?: InputMaybe<Scalars['Int']>
  pixelWidth_gte?: InputMaybe<Scalars['Int']>
  pixelWidth_in?: InputMaybe<Array<Scalars['Int']>>
  pixelWidth_lt?: InputMaybe<Scalars['Int']>
  pixelWidth_lte?: InputMaybe<Scalars['Int']>
  size_eq?: InputMaybe<Scalars['BigInt']>
  size_gt?: InputMaybe<Scalars['BigInt']>
  size_gte?: InputMaybe<Scalars['BigInt']>
  size_in?: InputMaybe<Array<Scalars['BigInt']>>
  size_lt?: InputMaybe<Scalars['BigInt']>
  size_lte?: InputMaybe<Scalars['BigInt']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type VideoMediaEncodingWhereInput = {
  AND?: InputMaybe<Array<VideoMediaEncodingWhereInput>>
  codecName_contains?: InputMaybe<Scalars['String']>
  codecName_endsWith?: InputMaybe<Scalars['String']>
  codecName_eq?: InputMaybe<Scalars['String']>
  codecName_in?: InputMaybe<Array<Scalars['String']>>
  codecName_startsWith?: InputMaybe<Scalars['String']>
  container_contains?: InputMaybe<Scalars['String']>
  container_endsWith?: InputMaybe<Scalars['String']>
  container_eq?: InputMaybe<Scalars['String']>
  container_in?: InputMaybe<Array<Scalars['String']>>
  container_startsWith?: InputMaybe<Scalars['String']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  mimeMediaType_contains?: InputMaybe<Scalars['String']>
  mimeMediaType_endsWith?: InputMaybe<Scalars['String']>
  mimeMediaType_eq?: InputMaybe<Scalars['String']>
  mimeMediaType_in?: InputMaybe<Array<Scalars['String']>>
  mimeMediaType_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<VideoMediaEncodingWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  videomediametadataencoding_every?: InputMaybe<VideoMediaMetadataWhereInput>
  videomediametadataencoding_none?: InputMaybe<VideoMediaMetadataWhereInput>
  videomediametadataencoding_some?: InputMaybe<VideoMediaMetadataWhereInput>
}

export type NftBoughtEventWhereInput = {
  AND?: InputMaybe<Array<NftBoughtEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<NftBoughtEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type NftIssuedEventWhereInput = {
  AND?: InputMaybe<Array<NftIssuedEventWhereInput>>
  contentActor_json?: InputMaybe<Scalars['JSONObject']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  metadata_contains?: InputMaybe<Scalars['String']>
  metadata_endsWith?: InputMaybe<Scalars['String']>
  metadata_eq?: InputMaybe<Scalars['String']>
  metadata_in?: InputMaybe<Array<Scalars['String']>>
  metadata_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newOwner?: InputMaybe<MembershipWhereInput>
  OR?: InputMaybe<Array<NftIssuedEventWhereInput>>
  royalty_eq?: InputMaybe<Scalars['Float']>
  royalty_gt?: InputMaybe<Scalars['Float']>
  royalty_gte?: InputMaybe<Scalars['Float']>
  royalty_in?: InputMaybe<Array<Scalars['Float']>>
  royalty_lt?: InputMaybe<Scalars['Float']>
  royalty_lte?: InputMaybe<Scalars['Float']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type NftSellOrderMadeEventWhereInput = {
  AND?: InputMaybe<Array<NftSellOrderMadeEventWhereInput>>
  contentActor_json?: InputMaybe<Scalars['JSONObject']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<NftSellOrderMadeEventWhereInput>>
  price_eq?: InputMaybe<Scalars['BigInt']>
  price_gt?: InputMaybe<Scalars['BigInt']>
  price_gte?: InputMaybe<Scalars['BigInt']>
  price_in?: InputMaybe<Array<Scalars['BigInt']>>
  price_lt?: InputMaybe<Scalars['BigInt']>
  price_lte?: InputMaybe<Scalars['BigInt']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type OfferAcceptedEventWhereInput = {
  AND?: InputMaybe<Array<OfferAcceptedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<OfferAcceptedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type OfferCanceledEventWhereInput = {
  AND?: InputMaybe<Array<OfferCanceledEventWhereInput>>
  contentActor_json?: InputMaybe<Scalars['JSONObject']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<OfferCanceledEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type OfferStartedEventWhereInput = {
  AND?: InputMaybe<Array<OfferStartedEventWhereInput>>
  contentActor_json?: InputMaybe<Scalars['JSONObject']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<OfferStartedEventWhereInput>>
  price_eq?: InputMaybe<Scalars['BigInt']>
  price_gt?: InputMaybe<Scalars['BigInt']>
  price_gte?: InputMaybe<Scalars['BigInt']>
  price_in?: InputMaybe<Array<Scalars['BigInt']>>
  price_lt?: InputMaybe<Scalars['BigInt']>
  price_lte?: InputMaybe<Scalars['BigInt']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type OpenAuctionBidAcceptedEventWhereInput = {
  AND?: InputMaybe<Array<OpenAuctionBidAcceptedEventWhereInput>>
  contentActor_json?: InputMaybe<Scalars['JSONObject']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<OpenAuctionBidAcceptedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  video?: InputMaybe<VideoWhereInput>
}

export type CandidateWhereInput = {
  AND?: InputMaybe<Array<CandidateWhereInput>>
  candidacynoteseteventcandidate_every?: InputMaybe<CandidacyNoteSetEventWhereInput>
  candidacynoteseteventcandidate_none?: InputMaybe<CandidacyNoteSetEventWhereInput>
  candidacynoteseteventcandidate_some?: InputMaybe<CandidacyNoteSetEventWhereInput>
  candidacystakereleaseeventcandidate_every?: InputMaybe<CandidacyStakeReleaseEventWhereInput>
  candidacystakereleaseeventcandidate_none?: InputMaybe<CandidacyStakeReleaseEventWhereInput>
  candidacystakereleaseeventcandidate_some?: InputMaybe<CandidacyStakeReleaseEventWhereInput>
  candidacywithdraweventcandidate_every?: InputMaybe<CandidacyWithdrawEventWhereInput>
  candidacywithdraweventcandidate_none?: InputMaybe<CandidacyWithdrawEventWhereInput>
  candidacywithdraweventcandidate_some?: InputMaybe<CandidacyWithdrawEventWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  electionRound?: InputMaybe<ElectionRoundWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  lastVoteReceivedAtBlock_eq?: InputMaybe<Scalars['BigInt']>
  lastVoteReceivedAtBlock_gt?: InputMaybe<Scalars['BigInt']>
  lastVoteReceivedAtBlock_gte?: InputMaybe<Scalars['BigInt']>
  lastVoteReceivedAtBlock_in?: InputMaybe<Array<Scalars['BigInt']>>
  lastVoteReceivedAtBlock_lt?: InputMaybe<Scalars['BigInt']>
  lastVoteReceivedAtBlock_lte?: InputMaybe<Scalars['BigInt']>
  lastVoteReceivedAtEventNumber_eq?: InputMaybe<Scalars['Int']>
  lastVoteReceivedAtEventNumber_gt?: InputMaybe<Scalars['Int']>
  lastVoteReceivedAtEventNumber_gte?: InputMaybe<Scalars['Int']>
  lastVoteReceivedAtEventNumber_in?: InputMaybe<Array<Scalars['Int']>>
  lastVoteReceivedAtEventNumber_lt?: InputMaybe<Scalars['Int']>
  lastVoteReceivedAtEventNumber_lte?: InputMaybe<Scalars['Int']>
  member?: InputMaybe<MembershipWhereInput>
  newcandidateeventcandidate_every?: InputMaybe<NewCandidateEventWhereInput>
  newcandidateeventcandidate_none?: InputMaybe<NewCandidateEventWhereInput>
  newcandidateeventcandidate_some?: InputMaybe<NewCandidateEventWhereInput>
  noteMetadata?: InputMaybe<CandidacyNoteMetadataWhereInput>
  OR?: InputMaybe<Array<CandidateWhereInput>>
  rewardAccountId_contains?: InputMaybe<Scalars['String']>
  rewardAccountId_endsWith?: InputMaybe<Scalars['String']>
  rewardAccountId_eq?: InputMaybe<Scalars['String']>
  rewardAccountId_in?: InputMaybe<Array<Scalars['String']>>
  rewardAccountId_startsWith?: InputMaybe<Scalars['String']>
  stake_eq?: InputMaybe<Scalars['BigInt']>
  stake_gt?: InputMaybe<Scalars['BigInt']>
  stake_gte?: InputMaybe<Scalars['BigInt']>
  stake_in?: InputMaybe<Array<Scalars['BigInt']>>
  stake_lt?: InputMaybe<Scalars['BigInt']>
  stake_lte?: InputMaybe<Scalars['BigInt']>
  stakeLocked_eq?: InputMaybe<Scalars['Boolean']>
  stakeLocked_in?: InputMaybe<Array<Scalars['Boolean']>>
  stakingAccountId_contains?: InputMaybe<Scalars['String']>
  stakingAccountId_endsWith?: InputMaybe<Scalars['String']>
  stakingAccountId_eq?: InputMaybe<Scalars['String']>
  stakingAccountId_in?: InputMaybe<Array<Scalars['String']>>
  stakingAccountId_startsWith?: InputMaybe<Scalars['String']>
  status_eq?: InputMaybe<CandidacyStatus>
  status_in?: InputMaybe<Array<CandidacyStatus>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  votePower_eq?: InputMaybe<Scalars['BigInt']>
  votePower_gt?: InputMaybe<Scalars['BigInt']>
  votePower_gte?: InputMaybe<Scalars['BigInt']>
  votePower_in?: InputMaybe<Array<Scalars['BigInt']>>
  votePower_lt?: InputMaybe<Scalars['BigInt']>
  votePower_lte?: InputMaybe<Scalars['BigInt']>
  votesReceived_every?: InputMaybe<CastVoteWhereInput>
  votesReceived_none?: InputMaybe<CastVoteWhereInput>
  votesReceived_some?: InputMaybe<CastVoteWhereInput>
}

export type CandidacyNoteSetEventWhereInput = {
  AND?: InputMaybe<Array<CandidacyNoteSetEventWhereInput>>
  candidate?: InputMaybe<CandidateWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  noteMetadata?: InputMaybe<CandidacyNoteMetadataWhereInput>
  OR?: InputMaybe<Array<CandidacyNoteSetEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CandidacyNoteMetadataWhereInput = {
  AND?: InputMaybe<Array<CandidacyNoteMetadataWhereInput>>
  bannerImageUri_contains?: InputMaybe<Scalars['String']>
  bannerImageUri_endsWith?: InputMaybe<Scalars['String']>
  bannerImageUri_eq?: InputMaybe<Scalars['String']>
  bannerImageUri_in?: InputMaybe<Array<Scalars['String']>>
  bannerImageUri_startsWith?: InputMaybe<Scalars['String']>
  bulletPoints_containsAll?: InputMaybe<Array<Scalars['String']>>
  bulletPoints_containsAny?: InputMaybe<Array<Scalars['String']>>
  bulletPoints_containsNone?: InputMaybe<Array<Scalars['String']>>
  candidacynoteseteventnoteMetadata_every?: InputMaybe<CandidacyNoteSetEventWhereInput>
  candidacynoteseteventnoteMetadata_none?: InputMaybe<CandidacyNoteSetEventWhereInput>
  candidacynoteseteventnoteMetadata_some?: InputMaybe<CandidacyNoteSetEventWhereInput>
  candidatenoteMetadata_every?: InputMaybe<CandidateWhereInput>
  candidatenoteMetadata_none?: InputMaybe<CandidateWhereInput>
  candidatenoteMetadata_some?: InputMaybe<CandidateWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  description_contains?: InputMaybe<Scalars['String']>
  description_endsWith?: InputMaybe<Scalars['String']>
  description_eq?: InputMaybe<Scalars['String']>
  description_in?: InputMaybe<Array<Scalars['String']>>
  description_startsWith?: InputMaybe<Scalars['String']>
  header_contains?: InputMaybe<Scalars['String']>
  header_endsWith?: InputMaybe<Scalars['String']>
  header_eq?: InputMaybe<Scalars['String']>
  header_in?: InputMaybe<Array<Scalars['String']>>
  header_startsWith?: InputMaybe<Scalars['String']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<CandidacyNoteMetadataWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CandidacyStakeReleaseEventWhereInput = {
  AND?: InputMaybe<Array<CandidacyStakeReleaseEventWhereInput>>
  candidate?: InputMaybe<CandidateWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<CandidacyStakeReleaseEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CandidacyWithdrawEventWhereInput = {
  AND?: InputMaybe<Array<CandidacyWithdrawEventWhereInput>>
  candidate?: InputMaybe<CandidateWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<CandidacyWithdrawEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ElectionRoundWhereInput = {
  AND?: InputMaybe<Array<ElectionRoundWhereInput>>
  candidates_every?: InputMaybe<CandidateWhereInput>
  candidates_none?: InputMaybe<CandidateWhereInput>
  candidates_some?: InputMaybe<CandidateWhereInput>
  castVotes_every?: InputMaybe<CastVoteWhereInput>
  castVotes_none?: InputMaybe<CastVoteWhereInput>
  castVotes_some?: InputMaybe<CastVoteWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  cycleId_eq?: InputMaybe<Scalars['Int']>
  cycleId_gt?: InputMaybe<Scalars['Int']>
  cycleId_gte?: InputMaybe<Scalars['Int']>
  cycleId_in?: InputMaybe<Array<Scalars['Int']>>
  cycleId_lt?: InputMaybe<Scalars['Int']>
  cycleId_lte?: InputMaybe<Scalars['Int']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  electedCouncil?: InputMaybe<ElectedCouncilWhereInput>
  endedAtBlock_eq?: InputMaybe<Scalars['Int']>
  endedAtBlock_gt?: InputMaybe<Scalars['Int']>
  endedAtBlock_gte?: InputMaybe<Scalars['Int']>
  endedAtBlock_in?: InputMaybe<Array<Scalars['Int']>>
  endedAtBlock_lt?: InputMaybe<Scalars['Int']>
  endedAtBlock_lte?: InputMaybe<Scalars['Int']>
  endedAtNetwork_eq?: InputMaybe<Network>
  endedAtNetwork_in?: InputMaybe<Array<Network>>
  endedAtTime_eq?: InputMaybe<Scalars['DateTime']>
  endedAtTime_gt?: InputMaybe<Scalars['DateTime']>
  endedAtTime_gte?: InputMaybe<Scalars['DateTime']>
  endedAtTime_lt?: InputMaybe<Scalars['DateTime']>
  endedAtTime_lte?: InputMaybe<Scalars['DateTime']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isFinished_eq?: InputMaybe<Scalars['Boolean']>
  isFinished_in?: InputMaybe<Array<Scalars['Boolean']>>
  nextElectedCouncil?: InputMaybe<ElectedCouncilWhereInput>
  OR?: InputMaybe<Array<ElectionRoundWhereInput>>
  referendumStageRevealing?: InputMaybe<ReferendumStageRevealingWhereInput>
  referendumStageVoting?: InputMaybe<ReferendumStageVotingWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CastVoteWhereInput = {
  AND?: InputMaybe<Array<CastVoteWhereInput>>
  castBy_contains?: InputMaybe<Scalars['String']>
  castBy_endsWith?: InputMaybe<Scalars['String']>
  castBy_eq?: InputMaybe<Scalars['String']>
  castBy_in?: InputMaybe<Array<Scalars['String']>>
  castBy_startsWith?: InputMaybe<Scalars['String']>
  commitment_contains?: InputMaybe<Scalars['String']>
  commitment_endsWith?: InputMaybe<Scalars['String']>
  commitment_eq?: InputMaybe<Scalars['String']>
  commitment_in?: InputMaybe<Array<Scalars['String']>>
  commitment_startsWith?: InputMaybe<Scalars['String']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  electionRound?: InputMaybe<ElectionRoundWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<CastVoteWhereInput>>
  stake_eq?: InputMaybe<Scalars['BigInt']>
  stake_gt?: InputMaybe<Scalars['BigInt']>
  stake_gte?: InputMaybe<Scalars['BigInt']>
  stake_in?: InputMaybe<Array<Scalars['BigInt']>>
  stake_lt?: InputMaybe<Scalars['BigInt']>
  stake_lte?: InputMaybe<Scalars['BigInt']>
  stakeLocked_eq?: InputMaybe<Scalars['Boolean']>
  stakeLocked_in?: InputMaybe<Array<Scalars['Boolean']>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  votecasteventcastVote_every?: InputMaybe<VoteCastEventWhereInput>
  votecasteventcastVote_none?: InputMaybe<VoteCastEventWhereInput>
  votecasteventcastVote_some?: InputMaybe<VoteCastEventWhereInput>
  voteFor?: InputMaybe<CandidateWhereInput>
  votePower_eq?: InputMaybe<Scalars['BigInt']>
  votePower_gt?: InputMaybe<Scalars['BigInt']>
  votePower_gte?: InputMaybe<Scalars['BigInt']>
  votePower_in?: InputMaybe<Array<Scalars['BigInt']>>
  votePower_lt?: InputMaybe<Scalars['BigInt']>
  votePower_lte?: InputMaybe<Scalars['BigInt']>
  voterevealedeventcastVote_every?: InputMaybe<VoteRevealedEventWhereInput>
  voterevealedeventcastVote_none?: InputMaybe<VoteRevealedEventWhereInput>
  voterevealedeventcastVote_some?: InputMaybe<VoteRevealedEventWhereInput>
}

export type VoteCastEventWhereInput = {
  AND?: InputMaybe<Array<VoteCastEventWhereInput>>
  castVote?: InputMaybe<CastVoteWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<VoteCastEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type VoteRevealedEventWhereInput = {
  AND?: InputMaybe<Array<VoteRevealedEventWhereInput>>
  castVote?: InputMaybe<CastVoteWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<VoteRevealedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ElectedCouncilWhereInput = {
  AND?: InputMaybe<Array<ElectedCouncilWhereInput>>
  councilElections_every?: InputMaybe<ElectionRoundWhereInput>
  councilElections_none?: InputMaybe<ElectionRoundWhereInput>
  councilElections_some?: InputMaybe<ElectionRoundWhereInput>
  councilMembers_every?: InputMaybe<CouncilMemberWhereInput>
  councilMembers_none?: InputMaybe<CouncilMemberWhereInput>
  councilMembers_some?: InputMaybe<CouncilMemberWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  electedAtBlock_eq?: InputMaybe<Scalars['Int']>
  electedAtBlock_gt?: InputMaybe<Scalars['Int']>
  electedAtBlock_gte?: InputMaybe<Scalars['Int']>
  electedAtBlock_in?: InputMaybe<Array<Scalars['Int']>>
  electedAtBlock_lt?: InputMaybe<Scalars['Int']>
  electedAtBlock_lte?: InputMaybe<Scalars['Int']>
  electedAtNetwork_eq?: InputMaybe<Network>
  electedAtNetwork_in?: InputMaybe<Array<Network>>
  electedAtTime_eq?: InputMaybe<Scalars['DateTime']>
  electedAtTime_gt?: InputMaybe<Scalars['DateTime']>
  electedAtTime_gte?: InputMaybe<Scalars['DateTime']>
  electedAtTime_lt?: InputMaybe<Scalars['DateTime']>
  electedAtTime_lte?: InputMaybe<Scalars['DateTime']>
  endedAtBlock_eq?: InputMaybe<Scalars['Int']>
  endedAtBlock_gt?: InputMaybe<Scalars['Int']>
  endedAtBlock_gte?: InputMaybe<Scalars['Int']>
  endedAtBlock_in?: InputMaybe<Array<Scalars['Int']>>
  endedAtBlock_lt?: InputMaybe<Scalars['Int']>
  endedAtBlock_lte?: InputMaybe<Scalars['Int']>
  endedAtNetwork_eq?: InputMaybe<Network>
  endedAtNetwork_in?: InputMaybe<Array<Network>>
  endedAtTime_eq?: InputMaybe<Scalars['DateTime']>
  endedAtTime_gt?: InputMaybe<Scalars['DateTime']>
  endedAtTime_gte?: InputMaybe<Scalars['DateTime']>
  endedAtTime_lt?: InputMaybe<Scalars['DateTime']>
  endedAtTime_lte?: InputMaybe<Scalars['DateTime']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isResigned_eq?: InputMaybe<Scalars['Boolean']>
  isResigned_in?: InputMaybe<Array<Scalars['Boolean']>>
  newcouncilelectedeventelectedCouncil_every?: InputMaybe<NewCouncilElectedEventWhereInput>
  newcouncilelectedeventelectedCouncil_none?: InputMaybe<NewCouncilElectedEventWhereInput>
  newcouncilelectedeventelectedCouncil_some?: InputMaybe<NewCouncilElectedEventWhereInput>
  nextCouncilElections_every?: InputMaybe<ElectionRoundWhereInput>
  nextCouncilElections_none?: InputMaybe<ElectionRoundWhereInput>
  nextCouncilElections_some?: InputMaybe<ElectionRoundWhereInput>
  OR?: InputMaybe<Array<ElectedCouncilWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  updates_every?: InputMaybe<CouncilStageUpdateWhereInput>
  updates_none?: InputMaybe<CouncilStageUpdateWhereInput>
  updates_some?: InputMaybe<CouncilStageUpdateWhereInput>
}

export type CouncilMemberWhereInput = {
  accumulatedReward_eq?: InputMaybe<Scalars['BigInt']>
  accumulatedReward_gt?: InputMaybe<Scalars['BigInt']>
  accumulatedReward_gte?: InputMaybe<Scalars['BigInt']>
  accumulatedReward_in?: InputMaybe<Array<Scalars['BigInt']>>
  accumulatedReward_lt?: InputMaybe<Scalars['BigInt']>
  accumulatedReward_lte?: InputMaybe<Scalars['BigInt']>
  AND?: InputMaybe<Array<CouncilMemberWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  electedInCouncil?: InputMaybe<ElectedCouncilWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  lastPaymentBlock_eq?: InputMaybe<Scalars['BigInt']>
  lastPaymentBlock_gt?: InputMaybe<Scalars['BigInt']>
  lastPaymentBlock_gte?: InputMaybe<Scalars['BigInt']>
  lastPaymentBlock_in?: InputMaybe<Array<Scalars['BigInt']>>
  lastPaymentBlock_lt?: InputMaybe<Scalars['BigInt']>
  lastPaymentBlock_lte?: InputMaybe<Scalars['BigInt']>
  member?: InputMaybe<MembershipWhereInput>
  OR?: InputMaybe<Array<CouncilMemberWhereInput>>
  rewardAccountId_contains?: InputMaybe<Scalars['String']>
  rewardAccountId_endsWith?: InputMaybe<Scalars['String']>
  rewardAccountId_eq?: InputMaybe<Scalars['String']>
  rewardAccountId_in?: InputMaybe<Array<Scalars['String']>>
  rewardAccountId_startsWith?: InputMaybe<Scalars['String']>
  rewardpaymenteventcouncilMember_every?: InputMaybe<RewardPaymentEventWhereInput>
  rewardpaymenteventcouncilMember_none?: InputMaybe<RewardPaymentEventWhereInput>
  rewardpaymenteventcouncilMember_some?: InputMaybe<RewardPaymentEventWhereInput>
  stake_eq?: InputMaybe<Scalars['BigInt']>
  stake_gt?: InputMaybe<Scalars['BigInt']>
  stake_gte?: InputMaybe<Scalars['BigInt']>
  stake_in?: InputMaybe<Array<Scalars['BigInt']>>
  stake_lt?: InputMaybe<Scalars['BigInt']>
  stake_lte?: InputMaybe<Scalars['BigInt']>
  stakingAccountId_contains?: InputMaybe<Scalars['String']>
  stakingAccountId_endsWith?: InputMaybe<Scalars['String']>
  stakingAccountId_eq?: InputMaybe<Scalars['String']>
  stakingAccountId_in?: InputMaybe<Array<Scalars['String']>>
  stakingAccountId_startsWith?: InputMaybe<Scalars['String']>
  unpaidReward_eq?: InputMaybe<Scalars['BigInt']>
  unpaidReward_gt?: InputMaybe<Scalars['BigInt']>
  unpaidReward_gte?: InputMaybe<Scalars['BigInt']>
  unpaidReward_in?: InputMaybe<Array<Scalars['BigInt']>>
  unpaidReward_lt?: InputMaybe<Scalars['BigInt']>
  unpaidReward_lte?: InputMaybe<Scalars['BigInt']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type RewardPaymentEventWhereInput = {
  AND?: InputMaybe<Array<RewardPaymentEventWhereInput>>
  councilMember?: InputMaybe<CouncilMemberWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  missingBalance_eq?: InputMaybe<Scalars['BigInt']>
  missingBalance_gt?: InputMaybe<Scalars['BigInt']>
  missingBalance_gte?: InputMaybe<Scalars['BigInt']>
  missingBalance_in?: InputMaybe<Array<Scalars['BigInt']>>
  missingBalance_lt?: InputMaybe<Scalars['BigInt']>
  missingBalance_lte?: InputMaybe<Scalars['BigInt']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<RewardPaymentEventWhereInput>>
  paidBalance_eq?: InputMaybe<Scalars['BigInt']>
  paidBalance_gt?: InputMaybe<Scalars['BigInt']>
  paidBalance_gte?: InputMaybe<Scalars['BigInt']>
  paidBalance_in?: InputMaybe<Array<Scalars['BigInt']>>
  paidBalance_lt?: InputMaybe<Scalars['BigInt']>
  paidBalance_lte?: InputMaybe<Scalars['BigInt']>
  rewardAccount_contains?: InputMaybe<Scalars['String']>
  rewardAccount_endsWith?: InputMaybe<Scalars['String']>
  rewardAccount_eq?: InputMaybe<Scalars['String']>
  rewardAccount_in?: InputMaybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type NewCouncilElectedEventWhereInput = {
  AND?: InputMaybe<Array<NewCouncilElectedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  electedCouncil?: InputMaybe<ElectedCouncilWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<NewCouncilElectedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CouncilStageUpdateWhereInput = {
  AND?: InputMaybe<Array<CouncilStageUpdateWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  electedCouncil?: InputMaybe<ElectedCouncilWhereInput>
  electionProblem_eq?: InputMaybe<ElectionProblem>
  electionProblem_in?: InputMaybe<Array<ElectionProblem>>
  changedAt_eq?: InputMaybe<Scalars['BigInt']>
  changedAt_gt?: InputMaybe<Scalars['BigInt']>
  changedAt_gte?: InputMaybe<Scalars['BigInt']>
  changedAt_in?: InputMaybe<Array<Scalars['BigInt']>>
  changedAt_lt?: InputMaybe<Scalars['BigInt']>
  changedAt_lte?: InputMaybe<Scalars['BigInt']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<CouncilStageUpdateWhereInput>>
  stage_json?: InputMaybe<Scalars['JSONObject']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ReferendumStageRevealingWhereInput = {
  AND?: InputMaybe<Array<ReferendumStageRevealingWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  electionRound?: InputMaybe<ElectionRoundWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<ReferendumStageRevealingWhereInput>>
  startedAtBlock_eq?: InputMaybe<Scalars['BigInt']>
  startedAtBlock_gt?: InputMaybe<Scalars['BigInt']>
  startedAtBlock_gte?: InputMaybe<Scalars['BigInt']>
  startedAtBlock_in?: InputMaybe<Array<Scalars['BigInt']>>
  startedAtBlock_lt?: InputMaybe<Scalars['BigInt']>
  startedAtBlock_lte?: InputMaybe<Scalars['BigInt']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  winningTargetCount_eq?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_gt?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_gte?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_in?: InputMaybe<Array<Scalars['BigInt']>>
  winningTargetCount_lt?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_lte?: InputMaybe<Scalars['BigInt']>
}

export type ReferendumStageVotingWhereInput = {
  AND?: InputMaybe<Array<ReferendumStageVotingWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  electionRound?: InputMaybe<ElectionRoundWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<ReferendumStageVotingWhereInput>>
  startedAtBlock_eq?: InputMaybe<Scalars['BigInt']>
  startedAtBlock_gt?: InputMaybe<Scalars['BigInt']>
  startedAtBlock_gte?: InputMaybe<Scalars['BigInt']>
  startedAtBlock_in?: InputMaybe<Array<Scalars['BigInt']>>
  startedAtBlock_lt?: InputMaybe<Scalars['BigInt']>
  startedAtBlock_lte?: InputMaybe<Scalars['BigInt']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  winningTargetCount_eq?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_gt?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_gte?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_in?: InputMaybe<Array<Scalars['BigInt']>>
  winningTargetCount_lt?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_lte?: InputMaybe<Scalars['BigInt']>
}

export type NewCandidateEventWhereInput = {
  AND?: InputMaybe<Array<NewCandidateEventWhereInput>>
  balance_eq?: InputMaybe<Scalars['BigInt']>
  balance_gt?: InputMaybe<Scalars['BigInt']>
  balance_gte?: InputMaybe<Scalars['BigInt']>
  balance_in?: InputMaybe<Array<Scalars['BigInt']>>
  balance_lt?: InputMaybe<Scalars['BigInt']>
  balance_lte?: InputMaybe<Scalars['BigInt']>
  candidate?: InputMaybe<CandidateWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<NewCandidateEventWhereInput>>
  rewardAccount_contains?: InputMaybe<Scalars['String']>
  rewardAccount_endsWith?: InputMaybe<Scalars['String']>
  rewardAccount_eq?: InputMaybe<Scalars['String']>
  rewardAccount_in?: InputMaybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: InputMaybe<Scalars['String']>
  stakingAccount_contains?: InputMaybe<Scalars['String']>
  stakingAccount_endsWith?: InputMaybe<Scalars['String']>
  stakingAccount_eq?: InputMaybe<Scalars['String']>
  stakingAccount_in?: InputMaybe<Array<Scalars['String']>>
  stakingAccount_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ForumPostWhereInput = {
  AND?: InputMaybe<Array<ForumPostWhereInput>>
  author?: InputMaybe<MembershipWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedInEvent?: InputMaybe<PostDeletedEventWhereInput>
  edits_every?: InputMaybe<PostTextUpdatedEventWhereInput>
  edits_none?: InputMaybe<PostTextUpdatedEventWhereInput>
  edits_some?: InputMaybe<PostTextUpdatedEventWhereInput>
  forumpostrepliesTo_every?: InputMaybe<ForumPostWhereInput>
  forumpostrepliesTo_none?: InputMaybe<ForumPostWhereInput>
  forumpostrepliesTo_some?: InputMaybe<ForumPostWhereInput>
  forumthreadinitialPost_every?: InputMaybe<ForumThreadWhereInput>
  forumthreadinitialPost_none?: InputMaybe<ForumThreadWhereInput>
  forumthreadinitialPost_some?: InputMaybe<ForumThreadWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isVisible_eq?: InputMaybe<Scalars['Boolean']>
  isVisible_in?: InputMaybe<Array<Scalars['Boolean']>>
  OR?: InputMaybe<Array<ForumPostWhereInput>>
  origin_json?: InputMaybe<Scalars['JSONObject']>
  postaddedeventpost_every?: InputMaybe<PostAddedEventWhereInput>
  postaddedeventpost_none?: InputMaybe<PostAddedEventWhereInput>
  postaddedeventpost_some?: InputMaybe<PostAddedEventWhereInput>
  postmoderatedeventpost_every?: InputMaybe<PostModeratedEventWhereInput>
  postmoderatedeventpost_none?: InputMaybe<PostModeratedEventWhereInput>
  postmoderatedeventpost_some?: InputMaybe<PostModeratedEventWhereInput>
  postreactedeventpost_every?: InputMaybe<PostReactedEventWhereInput>
  postreactedeventpost_none?: InputMaybe<PostReactedEventWhereInput>
  postreactedeventpost_some?: InputMaybe<PostReactedEventWhereInput>
  reactions_every?: InputMaybe<ForumPostReactionWhereInput>
  reactions_none?: InputMaybe<ForumPostReactionWhereInput>
  reactions_some?: InputMaybe<ForumPostReactionWhereInput>
  repliesTo?: InputMaybe<ForumPostWhereInput>
  status_json?: InputMaybe<Scalars['JSONObject']>
  text_contains?: InputMaybe<Scalars['String']>
  text_endsWith?: InputMaybe<Scalars['String']>
  text_eq?: InputMaybe<Scalars['String']>
  text_in?: InputMaybe<Array<Scalars['String']>>
  text_startsWith?: InputMaybe<Scalars['String']>
  thread?: InputMaybe<ForumThreadWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type PostDeletedEventWhereInput = {
  actor?: InputMaybe<MembershipWhereInput>
  AND?: InputMaybe<Array<PostDeletedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<PostDeletedEventWhereInput>>
  posts_every?: InputMaybe<ForumPostWhereInput>
  posts_none?: InputMaybe<ForumPostWhereInput>
  posts_some?: InputMaybe<ForumPostWhereInput>
  rationale_contains?: InputMaybe<Scalars['String']>
  rationale_endsWith?: InputMaybe<Scalars['String']>
  rationale_eq?: InputMaybe<Scalars['String']>
  rationale_in?: InputMaybe<Array<Scalars['String']>>
  rationale_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type PostTextUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<PostTextUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newText_contains?: InputMaybe<Scalars['String']>
  newText_endsWith?: InputMaybe<Scalars['String']>
  newText_eq?: InputMaybe<Scalars['String']>
  newText_in?: InputMaybe<Array<Scalars['String']>>
  newText_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<PostTextUpdatedEventWhereInput>>
  post?: InputMaybe<ForumPostWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ForumThreadWhereInput = {
  AND?: InputMaybe<Array<ForumThreadWhereInput>>
  author?: InputMaybe<MembershipWhereInput>
  category?: InputMaybe<ForumCategoryWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInEvent?: InputMaybe<ThreadCreatedEventWhereInput>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  initialPost?: InputMaybe<ForumPostWhereInput>
  isSticky_eq?: InputMaybe<Scalars['Boolean']>
  isSticky_in?: InputMaybe<Array<Scalars['Boolean']>>
  isVisible_eq?: InputMaybe<Scalars['Boolean']>
  isVisible_in?: InputMaybe<Array<Scalars['Boolean']>>
  madeStickyInEvents_every?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
  madeStickyInEvents_none?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
  madeStickyInEvents_some?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
  metadataUpdates_every?: InputMaybe<ThreadMetadataUpdatedEventWhereInput>
  metadataUpdates_none?: InputMaybe<ThreadMetadataUpdatedEventWhereInput>
  metadataUpdates_some?: InputMaybe<ThreadMetadataUpdatedEventWhereInput>
  movedInEvents_every?: InputMaybe<ThreadMovedEventWhereInput>
  movedInEvents_none?: InputMaybe<ThreadMovedEventWhereInput>
  movedInEvents_some?: InputMaybe<ThreadMovedEventWhereInput>
  OR?: InputMaybe<Array<ForumThreadWhereInput>>
  poll?: InputMaybe<ForumPollWhereInput>
  posts_every?: InputMaybe<ForumPostWhereInput>
  posts_none?: InputMaybe<ForumPostWhereInput>
  posts_some?: InputMaybe<ForumPostWhereInput>
  status_json?: InputMaybe<Scalars['JSONObject']>
  tags_every?: InputMaybe<ForumThreadTagWhereInput>
  tags_none?: InputMaybe<ForumThreadTagWhereInput>
  tags_some?: InputMaybe<ForumThreadTagWhereInput>
  threaddeletedeventthread_every?: InputMaybe<ThreadDeletedEventWhereInput>
  threaddeletedeventthread_none?: InputMaybe<ThreadDeletedEventWhereInput>
  threaddeletedeventthread_some?: InputMaybe<ThreadDeletedEventWhereInput>
  threadmoderatedeventthread_every?: InputMaybe<ThreadModeratedEventWhereInput>
  threadmoderatedeventthread_none?: InputMaybe<ThreadModeratedEventWhereInput>
  threadmoderatedeventthread_some?: InputMaybe<ThreadModeratedEventWhereInput>
  title_contains?: InputMaybe<Scalars['String']>
  title_endsWith?: InputMaybe<Scalars['String']>
  title_eq?: InputMaybe<Scalars['String']>
  title_in?: InputMaybe<Array<Scalars['String']>>
  title_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  visiblePostsCount_eq?: InputMaybe<Scalars['Int']>
  visiblePostsCount_gt?: InputMaybe<Scalars['Int']>
  visiblePostsCount_gte?: InputMaybe<Scalars['Int']>
  visiblePostsCount_in?: InputMaybe<Array<Scalars['Int']>>
  visiblePostsCount_lt?: InputMaybe<Scalars['Int']>
  visiblePostsCount_lte?: InputMaybe<Scalars['Int']>
}

export type ForumCategoryWhereInput = {
  AND?: InputMaybe<Array<ForumCategoryWhereInput>>
  categoryarchivalstatusupdatedeventcategory_every?: InputMaybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categoryarchivalstatusupdatedeventcategory_none?: InputMaybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categoryarchivalstatusupdatedeventcategory_some?: InputMaybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categorydeletedeventcategory_every?: InputMaybe<CategoryDeletedEventWhereInput>
  categorydeletedeventcategory_none?: InputMaybe<CategoryDeletedEventWhereInput>
  categorydeletedeventcategory_some?: InputMaybe<CategoryDeletedEventWhereInput>
  categorymembershipofmoderatorupdatedeventcategory_every?: InputMaybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorymembershipofmoderatorupdatedeventcategory_none?: InputMaybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorymembershipofmoderatorupdatedeventcategory_some?: InputMaybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorystickythreadupdateeventcategory_every?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
  categorystickythreadupdateeventcategory_none?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
  categorystickythreadupdateeventcategory_some?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInEvent?: InputMaybe<CategoryCreatedEventWhereInput>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  description_contains?: InputMaybe<Scalars['String']>
  description_endsWith?: InputMaybe<Scalars['String']>
  description_eq?: InputMaybe<Scalars['String']>
  description_in?: InputMaybe<Array<Scalars['String']>>
  description_startsWith?: InputMaybe<Scalars['String']>
  forumcategoryparent_every?: InputMaybe<ForumCategoryWhereInput>
  forumcategoryparent_none?: InputMaybe<ForumCategoryWhereInput>
  forumcategoryparent_some?: InputMaybe<ForumCategoryWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  moderators_every?: InputMaybe<WorkerWhereInput>
  moderators_none?: InputMaybe<WorkerWhereInput>
  moderators_some?: InputMaybe<WorkerWhereInput>
  OR?: InputMaybe<Array<ForumCategoryWhereInput>>
  parent?: InputMaybe<ForumCategoryWhereInput>
  status_json?: InputMaybe<Scalars['JSONObject']>
  threadmovedeventnewCategory_every?: InputMaybe<ThreadMovedEventWhereInput>
  threadmovedeventnewCategory_none?: InputMaybe<ThreadMovedEventWhereInput>
  threadmovedeventnewCategory_some?: InputMaybe<ThreadMovedEventWhereInput>
  threadmovedeventoldCategory_every?: InputMaybe<ThreadMovedEventWhereInput>
  threadmovedeventoldCategory_none?: InputMaybe<ThreadMovedEventWhereInput>
  threadmovedeventoldCategory_some?: InputMaybe<ThreadMovedEventWhereInput>
  threads_every?: InputMaybe<ForumThreadWhereInput>
  threads_none?: InputMaybe<ForumThreadWhereInput>
  threads_some?: InputMaybe<ForumThreadWhereInput>
  title_contains?: InputMaybe<Scalars['String']>
  title_endsWith?: InputMaybe<Scalars['String']>
  title_eq?: InputMaybe<Scalars['String']>
  title_in?: InputMaybe<Array<Scalars['String']>>
  title_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CategoryArchivalStatusUpdatedEventWhereInput = {
  actor?: InputMaybe<WorkerWhereInput>
  AND?: InputMaybe<Array<CategoryArchivalStatusUpdatedEventWhereInput>>
  category?: InputMaybe<ForumCategoryWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newArchivalStatus_eq?: InputMaybe<Scalars['Boolean']>
  newArchivalStatus_in?: InputMaybe<Array<Scalars['Boolean']>>
  OR?: InputMaybe<Array<CategoryArchivalStatusUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type WorkerWhereInput = {
  AND?: InputMaybe<Array<WorkerWhereInput>>
  application?: InputMaybe<WorkingGroupApplicationWhereInput>
  categoryarchivalstatusupdatedeventactor_every?: InputMaybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categoryarchivalstatusupdatedeventactor_none?: InputMaybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categoryarchivalstatusupdatedeventactor_some?: InputMaybe<CategoryArchivalStatusUpdatedEventWhereInput>
  categorydeletedeventactor_every?: InputMaybe<CategoryDeletedEventWhereInput>
  categorydeletedeventactor_none?: InputMaybe<CategoryDeletedEventWhereInput>
  categorydeletedeventactor_some?: InputMaybe<CategoryDeletedEventWhereInput>
  categorymembershipofmoderatorupdatedeventmoderator_every?: InputMaybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorymembershipofmoderatorupdatedeventmoderator_none?: InputMaybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorymembershipofmoderatorupdatedeventmoderator_some?: InputMaybe<CategoryMembershipOfModeratorUpdatedEventWhereInput>
  categorystickythreadupdateeventactor_every?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
  categorystickythreadupdateeventactor_none?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
  categorystickythreadupdateeventactor_some?: InputMaybe<CategoryStickyThreadUpdateEventWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  entry?: InputMaybe<OpeningFilledEventWhereInput>
  group?: InputMaybe<WorkingGroupWhereInput>
  groupId_contains?: InputMaybe<Scalars['String']>
  groupId_endsWith?: InputMaybe<Scalars['String']>
  groupId_eq?: InputMaybe<Scalars['String']>
  groupId_in?: InputMaybe<Array<Scalars['String']>>
  groupId_startsWith?: InputMaybe<Scalars['String']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isActive_eq?: InputMaybe<Scalars['Boolean']>
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>
  isLead_eq?: InputMaybe<Scalars['Boolean']>
  isLead_in?: InputMaybe<Array<Scalars['Boolean']>>
  leaderseteventworker_every?: InputMaybe<LeaderSetEventWhereInput>
  leaderseteventworker_none?: InputMaybe<LeaderSetEventWhereInput>
  leaderseteventworker_some?: InputMaybe<LeaderSetEventWhereInput>
  leaderunseteventleader_every?: InputMaybe<LeaderUnsetEventWhereInput>
  leaderunseteventleader_none?: InputMaybe<LeaderUnsetEventWhereInput>
  leaderunseteventleader_some?: InputMaybe<LeaderUnsetEventWhereInput>
  managedForumCategories_every?: InputMaybe<ForumCategoryWhereInput>
  managedForumCategories_none?: InputMaybe<ForumCategoryWhereInput>
  managedForumCategories_some?: InputMaybe<ForumCategoryWhereInput>
  membership?: InputMaybe<MembershipWhereInput>
  memberverificationstatusupdatedeventworker_every?: InputMaybe<MemberVerificationStatusUpdatedEventWhereInput>
  memberverificationstatusupdatedeventworker_none?: InputMaybe<MemberVerificationStatusUpdatedEventWhereInput>
  memberverificationstatusupdatedeventworker_some?: InputMaybe<MemberVerificationStatusUpdatedEventWhereInput>
  missingRewardAmount_eq?: InputMaybe<Scalars['BigInt']>
  missingRewardAmount_gt?: InputMaybe<Scalars['BigInt']>
  missingRewardAmount_gte?: InputMaybe<Scalars['BigInt']>
  missingRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>
  missingRewardAmount_lt?: InputMaybe<Scalars['BigInt']>
  missingRewardAmount_lte?: InputMaybe<Scalars['BigInt']>
  newmissedrewardlevelreachedeventworker_every?: InputMaybe<NewMissedRewardLevelReachedEventWhereInput>
  newmissedrewardlevelreachedeventworker_none?: InputMaybe<NewMissedRewardLevelReachedEventWhereInput>
  newmissedrewardlevelreachedeventworker_some?: InputMaybe<NewMissedRewardLevelReachedEventWhereInput>
  OR?: InputMaybe<Array<WorkerWhereInput>>
  payouts_every?: InputMaybe<RewardPaidEventWhereInput>
  payouts_none?: InputMaybe<RewardPaidEventWhereInput>
  payouts_some?: InputMaybe<RewardPaidEventWhereInput>
  postmoderatedeventactor_every?: InputMaybe<PostModeratedEventWhereInput>
  postmoderatedeventactor_none?: InputMaybe<PostModeratedEventWhereInput>
  postmoderatedeventactor_some?: InputMaybe<PostModeratedEventWhereInput>
  rewardAccount_contains?: InputMaybe<Scalars['String']>
  rewardAccount_endsWith?: InputMaybe<Scalars['String']>
  rewardAccount_eq?: InputMaybe<Scalars['String']>
  rewardAccount_in?: InputMaybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: InputMaybe<Scalars['String']>
  rewardPerBlock_eq?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_gt?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_gte?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_in?: InputMaybe<Array<Scalars['BigInt']>>
  rewardPerBlock_lt?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_lte?: InputMaybe<Scalars['BigInt']>
  roleAccount_contains?: InputMaybe<Scalars['String']>
  roleAccount_endsWith?: InputMaybe<Scalars['String']>
  roleAccount_eq?: InputMaybe<Scalars['String']>
  roleAccount_in?: InputMaybe<Array<Scalars['String']>>
  roleAccount_startsWith?: InputMaybe<Scalars['String']>
  runtimeId_eq?: InputMaybe<Scalars['Int']>
  runtimeId_gt?: InputMaybe<Scalars['Int']>
  runtimeId_gte?: InputMaybe<Scalars['Int']>
  runtimeId_in?: InputMaybe<Array<Scalars['Int']>>
  runtimeId_lt?: InputMaybe<Scalars['Int']>
  runtimeId_lte?: InputMaybe<Scalars['Int']>
  slashes_every?: InputMaybe<StakeSlashedEventWhereInput>
  slashes_none?: InputMaybe<StakeSlashedEventWhereInput>
  slashes_some?: InputMaybe<StakeSlashedEventWhereInput>
  stake_eq?: InputMaybe<Scalars['BigInt']>
  stake_gt?: InputMaybe<Scalars['BigInt']>
  stake_gte?: InputMaybe<Scalars['BigInt']>
  stake_in?: InputMaybe<Array<Scalars['BigInt']>>
  stake_lt?: InputMaybe<Scalars['BigInt']>
  stake_lte?: InputMaybe<Scalars['BigInt']>
  stakeAccount_contains?: InputMaybe<Scalars['String']>
  stakeAccount_endsWith?: InputMaybe<Scalars['String']>
  stakeAccount_eq?: InputMaybe<Scalars['String']>
  stakeAccount_in?: InputMaybe<Array<Scalars['String']>>
  stakeAccount_startsWith?: InputMaybe<Scalars['String']>
  stakedecreasedeventworker_every?: InputMaybe<StakeDecreasedEventWhereInput>
  stakedecreasedeventworker_none?: InputMaybe<StakeDecreasedEventWhereInput>
  stakedecreasedeventworker_some?: InputMaybe<StakeDecreasedEventWhereInput>
  stakeincreasedeventworker_every?: InputMaybe<StakeIncreasedEventWhereInput>
  stakeincreasedeventworker_none?: InputMaybe<StakeIncreasedEventWhereInput>
  stakeincreasedeventworker_some?: InputMaybe<StakeIncreasedEventWhereInput>
  status_json?: InputMaybe<Scalars['JSONObject']>
  storage_contains?: InputMaybe<Scalars['String']>
  storage_endsWith?: InputMaybe<Scalars['String']>
  storage_eq?: InputMaybe<Scalars['String']>
  storage_in?: InputMaybe<Array<Scalars['String']>>
  storage_startsWith?: InputMaybe<Scalars['String']>
  terminatedleadereventworker_every?: InputMaybe<TerminatedLeaderEventWhereInput>
  terminatedleadereventworker_none?: InputMaybe<TerminatedLeaderEventWhereInput>
  terminatedleadereventworker_some?: InputMaybe<TerminatedLeaderEventWhereInput>
  terminatedworkereventworker_every?: InputMaybe<TerminatedWorkerEventWhereInput>
  terminatedworkereventworker_none?: InputMaybe<TerminatedWorkerEventWhereInput>
  terminatedworkereventworker_some?: InputMaybe<TerminatedWorkerEventWhereInput>
  threadmoderatedeventactor_every?: InputMaybe<ThreadModeratedEventWhereInput>
  threadmoderatedeventactor_none?: InputMaybe<ThreadModeratedEventWhereInput>
  threadmoderatedeventactor_some?: InputMaybe<ThreadModeratedEventWhereInput>
  threadmovedeventactor_every?: InputMaybe<ThreadMovedEventWhereInput>
  threadmovedeventactor_none?: InputMaybe<ThreadMovedEventWhereInput>
  threadmovedeventactor_some?: InputMaybe<ThreadMovedEventWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  workerexitedeventworker_every?: InputMaybe<WorkerExitedEventWhereInput>
  workerexitedeventworker_none?: InputMaybe<WorkerExitedEventWhereInput>
  workerexitedeventworker_some?: InputMaybe<WorkerExitedEventWhereInput>
  workerrewardaccountupdatedeventworker_every?: InputMaybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardaccountupdatedeventworker_none?: InputMaybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardaccountupdatedeventworker_some?: InputMaybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardamountupdatedeventworker_every?: InputMaybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerrewardamountupdatedeventworker_none?: InputMaybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerrewardamountupdatedeventworker_some?: InputMaybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerroleaccountupdatedeventworker_every?: InputMaybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerroleaccountupdatedeventworker_none?: InputMaybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerroleaccountupdatedeventworker_some?: InputMaybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerstartedleavingeventworker_every?: InputMaybe<WorkerStartedLeavingEventWhereInput>
  workerstartedleavingeventworker_none?: InputMaybe<WorkerStartedLeavingEventWhereInput>
  workerstartedleavingeventworker_some?: InputMaybe<WorkerStartedLeavingEventWhereInput>
  workinggroupleader_every?: InputMaybe<WorkingGroupWhereInput>
  workinggroupleader_none?: InputMaybe<WorkingGroupWhereInput>
  workinggroupleader_some?: InputMaybe<WorkingGroupWhereInput>
}

export type CategoryDeletedEventWhereInput = {
  actor?: InputMaybe<WorkerWhereInput>
  AND?: InputMaybe<Array<CategoryDeletedEventWhereInput>>
  category?: InputMaybe<ForumCategoryWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<CategoryDeletedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CategoryMembershipOfModeratorUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<CategoryMembershipOfModeratorUpdatedEventWhereInput>>
  category?: InputMaybe<ForumCategoryWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  moderator?: InputMaybe<WorkerWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newCanModerateValue_eq?: InputMaybe<Scalars['Boolean']>
  newCanModerateValue_in?: InputMaybe<Array<Scalars['Boolean']>>
  OR?: InputMaybe<Array<CategoryMembershipOfModeratorUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CategoryStickyThreadUpdateEventWhereInput = {
  actor?: InputMaybe<WorkerWhereInput>
  AND?: InputMaybe<Array<CategoryStickyThreadUpdateEventWhereInput>>
  category?: InputMaybe<ForumCategoryWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newStickyThreads_every?: InputMaybe<ForumThreadWhereInput>
  newStickyThreads_none?: InputMaybe<ForumThreadWhereInput>
  newStickyThreads_some?: InputMaybe<ForumThreadWhereInput>
  OR?: InputMaybe<Array<CategoryStickyThreadUpdateEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type OpeningFilledEventWhereInput = {
  AND?: InputMaybe<Array<OpeningFilledEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  opening?: InputMaybe<WorkingGroupOpeningWhereInput>
  OR?: InputMaybe<Array<OpeningFilledEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  workersHired_every?: InputMaybe<WorkerWhereInput>
  workersHired_none?: InputMaybe<WorkerWhereInput>
  workersHired_some?: InputMaybe<WorkerWhereInput>
}

export type WorkingGroupWhereInput = {
  AND?: InputMaybe<Array<WorkingGroupWhereInput>>
  applicationwithdrawneventgroup_every?: InputMaybe<ApplicationWithdrawnEventWhereInput>
  applicationwithdrawneventgroup_none?: InputMaybe<ApplicationWithdrawnEventWhereInput>
  applicationwithdrawneventgroup_some?: InputMaybe<ApplicationWithdrawnEventWhereInput>
  appliedonopeningeventgroup_every?: InputMaybe<AppliedOnOpeningEventWhereInput>
  appliedonopeningeventgroup_none?: InputMaybe<AppliedOnOpeningEventWhereInput>
  appliedonopeningeventgroup_some?: InputMaybe<AppliedOnOpeningEventWhereInput>
  budget_eq?: InputMaybe<Scalars['BigInt']>
  budget_gt?: InputMaybe<Scalars['BigInt']>
  budget_gte?: InputMaybe<Scalars['BigInt']>
  budget_in?: InputMaybe<Array<Scalars['BigInt']>>
  budget_lt?: InputMaybe<Scalars['BigInt']>
  budget_lte?: InputMaybe<Scalars['BigInt']>
  budgetseteventgroup_every?: InputMaybe<BudgetSetEventWhereInput>
  budgetseteventgroup_none?: InputMaybe<BudgetSetEventWhereInput>
  budgetseteventgroup_some?: InputMaybe<BudgetSetEventWhereInput>
  budgetspendingeventgroup_every?: InputMaybe<BudgetSpendingEventWhereInput>
  budgetspendingeventgroup_none?: InputMaybe<BudgetSpendingEventWhereInput>
  budgetspendingeventgroup_some?: InputMaybe<BudgetSpendingEventWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  leader?: InputMaybe<WorkerWhereInput>
  leaderseteventgroup_every?: InputMaybe<LeaderSetEventWhereInput>
  leaderseteventgroup_none?: InputMaybe<LeaderSetEventWhereInput>
  leaderseteventgroup_some?: InputMaybe<LeaderSetEventWhereInput>
  leaderunseteventgroup_every?: InputMaybe<LeaderUnsetEventWhereInput>
  leaderunseteventgroup_none?: InputMaybe<LeaderUnsetEventWhereInput>
  leaderunseteventgroup_some?: InputMaybe<LeaderUnsetEventWhereInput>
  metadata?: InputMaybe<WorkingGroupMetadataWhereInput>
  name_contains?: InputMaybe<Scalars['String']>
  name_endsWith?: InputMaybe<Scalars['String']>
  name_eq?: InputMaybe<Scalars['String']>
  name_in?: InputMaybe<Array<Scalars['String']>>
  name_startsWith?: InputMaybe<Scalars['String']>
  newmissedrewardlevelreachedeventgroup_every?: InputMaybe<NewMissedRewardLevelReachedEventWhereInput>
  newmissedrewardlevelreachedeventgroup_none?: InputMaybe<NewMissedRewardLevelReachedEventWhereInput>
  newmissedrewardlevelreachedeventgroup_some?: InputMaybe<NewMissedRewardLevelReachedEventWhereInput>
  openingaddedeventgroup_every?: InputMaybe<OpeningAddedEventWhereInput>
  openingaddedeventgroup_none?: InputMaybe<OpeningAddedEventWhereInput>
  openingaddedeventgroup_some?: InputMaybe<OpeningAddedEventWhereInput>
  openingcanceledeventgroup_every?: InputMaybe<OpeningCanceledEventWhereInput>
  openingcanceledeventgroup_none?: InputMaybe<OpeningCanceledEventWhereInput>
  openingcanceledeventgroup_some?: InputMaybe<OpeningCanceledEventWhereInput>
  openingfilledeventgroup_every?: InputMaybe<OpeningFilledEventWhereInput>
  openingfilledeventgroup_none?: InputMaybe<OpeningFilledEventWhereInput>
  openingfilledeventgroup_some?: InputMaybe<OpeningFilledEventWhereInput>
  openings_every?: InputMaybe<WorkingGroupOpeningWhereInput>
  openings_none?: InputMaybe<WorkingGroupOpeningWhereInput>
  openings_some?: InputMaybe<WorkingGroupOpeningWhereInput>
  OR?: InputMaybe<Array<WorkingGroupWhereInput>>
  rewardpaideventgroup_every?: InputMaybe<RewardPaidEventWhereInput>
  rewardpaideventgroup_none?: InputMaybe<RewardPaidEventWhereInput>
  rewardpaideventgroup_some?: InputMaybe<RewardPaidEventWhereInput>
  stakedecreasedeventgroup_every?: InputMaybe<StakeDecreasedEventWhereInput>
  stakedecreasedeventgroup_none?: InputMaybe<StakeDecreasedEventWhereInput>
  stakedecreasedeventgroup_some?: InputMaybe<StakeDecreasedEventWhereInput>
  stakeincreasedeventgroup_every?: InputMaybe<StakeIncreasedEventWhereInput>
  stakeincreasedeventgroup_none?: InputMaybe<StakeIncreasedEventWhereInput>
  stakeincreasedeventgroup_some?: InputMaybe<StakeIncreasedEventWhereInput>
  stakeslashedeventgroup_every?: InputMaybe<StakeSlashedEventWhereInput>
  stakeslashedeventgroup_none?: InputMaybe<StakeSlashedEventWhereInput>
  stakeslashedeventgroup_some?: InputMaybe<StakeSlashedEventWhereInput>
  statustextchangedeventgroup_every?: InputMaybe<StatusTextChangedEventWhereInput>
  statustextchangedeventgroup_none?: InputMaybe<StatusTextChangedEventWhereInput>
  statustextchangedeventgroup_some?: InputMaybe<StatusTextChangedEventWhereInput>
  terminatedleadereventgroup_every?: InputMaybe<TerminatedLeaderEventWhereInput>
  terminatedleadereventgroup_none?: InputMaybe<TerminatedLeaderEventWhereInput>
  terminatedleadereventgroup_some?: InputMaybe<TerminatedLeaderEventWhereInput>
  terminatedworkereventgroup_every?: InputMaybe<TerminatedWorkerEventWhereInput>
  terminatedworkereventgroup_none?: InputMaybe<TerminatedWorkerEventWhereInput>
  terminatedworkereventgroup_some?: InputMaybe<TerminatedWorkerEventWhereInput>
  upcomingworkinggroupopeninggroup_every?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeninggroup_none?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeninggroup_some?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  workerexitedeventgroup_every?: InputMaybe<WorkerExitedEventWhereInput>
  workerexitedeventgroup_none?: InputMaybe<WorkerExitedEventWhereInput>
  workerexitedeventgroup_some?: InputMaybe<WorkerExitedEventWhereInput>
  workerrewardaccountupdatedeventgroup_every?: InputMaybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardaccountupdatedeventgroup_none?: InputMaybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardaccountupdatedeventgroup_some?: InputMaybe<WorkerRewardAccountUpdatedEventWhereInput>
  workerrewardamountupdatedeventgroup_every?: InputMaybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerrewardamountupdatedeventgroup_none?: InputMaybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerrewardamountupdatedeventgroup_some?: InputMaybe<WorkerRewardAmountUpdatedEventWhereInput>
  workerroleaccountupdatedeventgroup_every?: InputMaybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerroleaccountupdatedeventgroup_none?: InputMaybe<WorkerRoleAccountUpdatedEventWhereInput>
  workerroleaccountupdatedeventgroup_some?: InputMaybe<WorkerRoleAccountUpdatedEventWhereInput>
  workers_every?: InputMaybe<WorkerWhereInput>
  workers_none?: InputMaybe<WorkerWhereInput>
  workers_some?: InputMaybe<WorkerWhereInput>
  workerstartedleavingeventgroup_every?: InputMaybe<WorkerStartedLeavingEventWhereInput>
  workerstartedleavingeventgroup_none?: InputMaybe<WorkerStartedLeavingEventWhereInput>
  workerstartedleavingeventgroup_some?: InputMaybe<WorkerStartedLeavingEventWhereInput>
  workinggroupmetadatagroup_every?: InputMaybe<WorkingGroupMetadataWhereInput>
  workinggroupmetadatagroup_none?: InputMaybe<WorkingGroupMetadataWhereInput>
  workinggroupmetadatagroup_some?: InputMaybe<WorkingGroupMetadataWhereInput>
}

export type ApplicationWithdrawnEventWhereInput = {
  AND?: InputMaybe<Array<ApplicationWithdrawnEventWhereInput>>
  application?: InputMaybe<WorkingGroupApplicationWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ApplicationWithdrawnEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type AppliedOnOpeningEventWhereInput = {
  AND?: InputMaybe<Array<AppliedOnOpeningEventWhereInput>>
  application?: InputMaybe<WorkingGroupApplicationWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  opening?: InputMaybe<WorkingGroupOpeningWhereInput>
  OR?: InputMaybe<Array<AppliedOnOpeningEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type WorkingGroupOpeningWhereInput = {
  AND?: InputMaybe<Array<WorkingGroupOpeningWhereInput>>
  applications_every?: InputMaybe<WorkingGroupApplicationWhereInput>
  applications_none?: InputMaybe<WorkingGroupApplicationWhereInput>
  applications_some?: InputMaybe<WorkingGroupApplicationWhereInput>
  appliedonopeningeventopening_every?: InputMaybe<AppliedOnOpeningEventWhereInput>
  appliedonopeningeventopening_none?: InputMaybe<AppliedOnOpeningEventWhereInput>
  appliedonopeningeventopening_some?: InputMaybe<AppliedOnOpeningEventWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInEvent?: InputMaybe<OpeningAddedEventWhereInput>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  metadata?: InputMaybe<WorkingGroupOpeningMetadataWhereInput>
  openingcanceledeventopening_every?: InputMaybe<OpeningCanceledEventWhereInput>
  openingcanceledeventopening_none?: InputMaybe<OpeningCanceledEventWhereInput>
  openingcanceledeventopening_some?: InputMaybe<OpeningCanceledEventWhereInput>
  openingfilledeventopening_every?: InputMaybe<OpeningFilledEventWhereInput>
  openingfilledeventopening_none?: InputMaybe<OpeningFilledEventWhereInput>
  openingfilledeventopening_some?: InputMaybe<OpeningFilledEventWhereInput>
  OR?: InputMaybe<Array<WorkingGroupOpeningWhereInput>>
  rewardPerBlock_eq?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_gt?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_gte?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_in?: InputMaybe<Array<Scalars['BigInt']>>
  rewardPerBlock_lt?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_lte?: InputMaybe<Scalars['BigInt']>
  runtimeId_eq?: InputMaybe<Scalars['Int']>
  runtimeId_gt?: InputMaybe<Scalars['Int']>
  runtimeId_gte?: InputMaybe<Scalars['Int']>
  runtimeId_in?: InputMaybe<Array<Scalars['Int']>>
  runtimeId_lt?: InputMaybe<Scalars['Int']>
  runtimeId_lte?: InputMaybe<Scalars['Int']>
  stakeAmount_eq?: InputMaybe<Scalars['BigInt']>
  stakeAmount_gt?: InputMaybe<Scalars['BigInt']>
  stakeAmount_gte?: InputMaybe<Scalars['BigInt']>
  stakeAmount_in?: InputMaybe<Array<Scalars['BigInt']>>
  stakeAmount_lt?: InputMaybe<Scalars['BigInt']>
  stakeAmount_lte?: InputMaybe<Scalars['BigInt']>
  status_json?: InputMaybe<Scalars['JSONObject']>
  type_eq?: InputMaybe<WorkingGroupOpeningType>
  type_in?: InputMaybe<Array<WorkingGroupOpeningType>>
  unstakingPeriod_eq?: InputMaybe<Scalars['Int']>
  unstakingPeriod_gt?: InputMaybe<Scalars['Int']>
  unstakingPeriod_gte?: InputMaybe<Scalars['Int']>
  unstakingPeriod_in?: InputMaybe<Array<Scalars['Int']>>
  unstakingPeriod_lt?: InputMaybe<Scalars['Int']>
  unstakingPeriod_lte?: InputMaybe<Scalars['Int']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type OpeningAddedEventWhereInput = {
  AND?: InputMaybe<Array<OpeningAddedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  opening?: InputMaybe<WorkingGroupOpeningWhereInput>
  OR?: InputMaybe<Array<OpeningAddedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type WorkingGroupOpeningMetadataWhereInput = {
  AND?: InputMaybe<Array<WorkingGroupOpeningMetadataWhereInput>>
  applicationDetails_contains?: InputMaybe<Scalars['String']>
  applicationDetails_endsWith?: InputMaybe<Scalars['String']>
  applicationDetails_eq?: InputMaybe<Scalars['String']>
  applicationDetails_in?: InputMaybe<Array<Scalars['String']>>
  applicationDetails_startsWith?: InputMaybe<Scalars['String']>
  applicationFormQuestions_every?: InputMaybe<ApplicationFormQuestionWhereInput>
  applicationFormQuestions_none?: InputMaybe<ApplicationFormQuestionWhereInput>
  applicationFormQuestions_some?: InputMaybe<ApplicationFormQuestionWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  description_contains?: InputMaybe<Scalars['String']>
  description_endsWith?: InputMaybe<Scalars['String']>
  description_eq?: InputMaybe<Scalars['String']>
  description_in?: InputMaybe<Array<Scalars['String']>>
  description_startsWith?: InputMaybe<Scalars['String']>
  expectedEnding_eq?: InputMaybe<Scalars['DateTime']>
  expectedEnding_gt?: InputMaybe<Scalars['DateTime']>
  expectedEnding_gte?: InputMaybe<Scalars['DateTime']>
  expectedEnding_lt?: InputMaybe<Scalars['DateTime']>
  expectedEnding_lte?: InputMaybe<Scalars['DateTime']>
  hiringLimit_eq?: InputMaybe<Scalars['Int']>
  hiringLimit_gt?: InputMaybe<Scalars['Int']>
  hiringLimit_gte?: InputMaybe<Scalars['Int']>
  hiringLimit_in?: InputMaybe<Array<Scalars['Int']>>
  hiringLimit_lt?: InputMaybe<Scalars['Int']>
  hiringLimit_lte?: InputMaybe<Scalars['Int']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<WorkingGroupOpeningMetadataWhereInput>>
  originallyValid_eq?: InputMaybe<Scalars['Boolean']>
  originallyValid_in?: InputMaybe<Array<Scalars['Boolean']>>
  shortDescription_contains?: InputMaybe<Scalars['String']>
  shortDescription_endsWith?: InputMaybe<Scalars['String']>
  shortDescription_eq?: InputMaybe<Scalars['String']>
  shortDescription_in?: InputMaybe<Array<Scalars['String']>>
  shortDescription_startsWith?: InputMaybe<Scalars['String']>
  upcomingworkinggroupopeningmetadata_every?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeningmetadata_none?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeningmetadata_some?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  workinggroupopeningmetadata_every?: InputMaybe<WorkingGroupOpeningWhereInput>
  workinggroupopeningmetadata_none?: InputMaybe<WorkingGroupOpeningWhereInput>
  workinggroupopeningmetadata_some?: InputMaybe<WorkingGroupOpeningWhereInput>
}

export type ApplicationFormQuestionWhereInput = {
  AND?: InputMaybe<Array<ApplicationFormQuestionWhereInput>>
  applicationformquestionanswerquestion_every?: InputMaybe<ApplicationFormQuestionAnswerWhereInput>
  applicationformquestionanswerquestion_none?: InputMaybe<ApplicationFormQuestionAnswerWhereInput>
  applicationformquestionanswerquestion_some?: InputMaybe<ApplicationFormQuestionAnswerWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  index_eq?: InputMaybe<Scalars['Int']>
  index_gt?: InputMaybe<Scalars['Int']>
  index_gte?: InputMaybe<Scalars['Int']>
  index_in?: InputMaybe<Array<Scalars['Int']>>
  index_lt?: InputMaybe<Scalars['Int']>
  index_lte?: InputMaybe<Scalars['Int']>
  openingMetadata?: InputMaybe<WorkingGroupOpeningMetadataWhereInput>
  OR?: InputMaybe<Array<ApplicationFormQuestionWhereInput>>
  question_contains?: InputMaybe<Scalars['String']>
  question_endsWith?: InputMaybe<Scalars['String']>
  question_eq?: InputMaybe<Scalars['String']>
  question_in?: InputMaybe<Array<Scalars['String']>>
  question_startsWith?: InputMaybe<Scalars['String']>
  type_eq?: InputMaybe<ApplicationFormQuestionType>
  type_in?: InputMaybe<Array<ApplicationFormQuestionType>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type UpcomingWorkingGroupOpeningWhereInput = {
  AND?: InputMaybe<Array<UpcomingWorkingGroupOpeningWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInEvent?: InputMaybe<StatusTextChangedEventWhereInput>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  expectedStart_eq?: InputMaybe<Scalars['DateTime']>
  expectedStart_gt?: InputMaybe<Scalars['DateTime']>
  expectedStart_gte?: InputMaybe<Scalars['DateTime']>
  expectedStart_lt?: InputMaybe<Scalars['DateTime']>
  expectedStart_lte?: InputMaybe<Scalars['DateTime']>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  metadata?: InputMaybe<WorkingGroupOpeningMetadataWhereInput>
  OR?: InputMaybe<Array<UpcomingWorkingGroupOpeningWhereInput>>
  rewardPerBlock_eq?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_gt?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_gte?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_in?: InputMaybe<Array<Scalars['BigInt']>>
  rewardPerBlock_lt?: InputMaybe<Scalars['BigInt']>
  rewardPerBlock_lte?: InputMaybe<Scalars['BigInt']>
  stakeAmount_eq?: InputMaybe<Scalars['BigInt']>
  stakeAmount_gt?: InputMaybe<Scalars['BigInt']>
  stakeAmount_gte?: InputMaybe<Scalars['BigInt']>
  stakeAmount_in?: InputMaybe<Array<Scalars['BigInt']>>
  stakeAmount_lt?: InputMaybe<Scalars['BigInt']>
  stakeAmount_lte?: InputMaybe<Scalars['BigInt']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type StatusTextChangedEventWhereInput = {
  AND?: InputMaybe<Array<StatusTextChangedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  metadata_contains?: InputMaybe<Scalars['String']>
  metadata_endsWith?: InputMaybe<Scalars['String']>
  metadata_eq?: InputMaybe<Scalars['String']>
  metadata_in?: InputMaybe<Array<Scalars['String']>>
  metadata_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<StatusTextChangedEventWhereInput>>
  result_json?: InputMaybe<Scalars['JSONObject']>
  upcomingworkinggroupopeningcreatedInEvent_every?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeningcreatedInEvent_none?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
  upcomingworkinggroupopeningcreatedInEvent_some?: InputMaybe<UpcomingWorkingGroupOpeningWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  workinggroupmetadatasetInEvent_every?: InputMaybe<WorkingGroupMetadataWhereInput>
  workinggroupmetadatasetInEvent_none?: InputMaybe<WorkingGroupMetadataWhereInput>
  workinggroupmetadatasetInEvent_some?: InputMaybe<WorkingGroupMetadataWhereInput>
}

export type WorkingGroupMetadataWhereInput = {
  about_contains?: InputMaybe<Scalars['String']>
  about_endsWith?: InputMaybe<Scalars['String']>
  about_eq?: InputMaybe<Scalars['String']>
  about_in?: InputMaybe<Array<Scalars['String']>>
  about_startsWith?: InputMaybe<Scalars['String']>
  AND?: InputMaybe<Array<WorkingGroupMetadataWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  description_contains?: InputMaybe<Scalars['String']>
  description_endsWith?: InputMaybe<Scalars['String']>
  description_eq?: InputMaybe<Scalars['String']>
  description_in?: InputMaybe<Array<Scalars['String']>>
  description_startsWith?: InputMaybe<Scalars['String']>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<WorkingGroupMetadataWhereInput>>
  setInEvent?: InputMaybe<StatusTextChangedEventWhereInput>
  status_contains?: InputMaybe<Scalars['String']>
  status_endsWith?: InputMaybe<Scalars['String']>
  status_eq?: InputMaybe<Scalars['String']>
  status_in?: InputMaybe<Array<Scalars['String']>>
  status_startsWith?: InputMaybe<Scalars['String']>
  statusMessage_contains?: InputMaybe<Scalars['String']>
  statusMessage_endsWith?: InputMaybe<Scalars['String']>
  statusMessage_eq?: InputMaybe<Scalars['String']>
  statusMessage_in?: InputMaybe<Array<Scalars['String']>>
  statusMessage_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  workinggroupmetadata_every?: InputMaybe<WorkingGroupWhereInput>
  workinggroupmetadata_none?: InputMaybe<WorkingGroupWhereInput>
  workinggroupmetadata_some?: InputMaybe<WorkingGroupWhereInput>
}

export type OpeningCanceledEventWhereInput = {
  AND?: InputMaybe<Array<OpeningCanceledEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  opening?: InputMaybe<WorkingGroupOpeningWhereInput>
  OR?: InputMaybe<Array<OpeningCanceledEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type BudgetSetEventWhereInput = {
  AND?: InputMaybe<Array<BudgetSetEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newBudget_eq?: InputMaybe<Scalars['BigInt']>
  newBudget_gt?: InputMaybe<Scalars['BigInt']>
  newBudget_gte?: InputMaybe<Scalars['BigInt']>
  newBudget_in?: InputMaybe<Array<Scalars['BigInt']>>
  newBudget_lt?: InputMaybe<Scalars['BigInt']>
  newBudget_lte?: InputMaybe<Scalars['BigInt']>
  OR?: InputMaybe<Array<BudgetSetEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type BudgetSpendingEventWhereInput = {
  amount_eq?: InputMaybe<Scalars['BigInt']>
  amount_gt?: InputMaybe<Scalars['BigInt']>
  amount_gte?: InputMaybe<Scalars['BigInt']>
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>
  amount_lt?: InputMaybe<Scalars['BigInt']>
  amount_lte?: InputMaybe<Scalars['BigInt']>
  AND?: InputMaybe<Array<BudgetSpendingEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<BudgetSpendingEventWhereInput>>
  rationale_contains?: InputMaybe<Scalars['String']>
  rationale_endsWith?: InputMaybe<Scalars['String']>
  rationale_eq?: InputMaybe<Scalars['String']>
  rationale_in?: InputMaybe<Array<Scalars['String']>>
  rationale_startsWith?: InputMaybe<Scalars['String']>
  reciever_contains?: InputMaybe<Scalars['String']>
  reciever_endsWith?: InputMaybe<Scalars['String']>
  reciever_eq?: InputMaybe<Scalars['String']>
  reciever_in?: InputMaybe<Array<Scalars['String']>>
  reciever_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type LeaderSetEventWhereInput = {
  AND?: InputMaybe<Array<LeaderSetEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<LeaderSetEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type LeaderUnsetEventWhereInput = {
  AND?: InputMaybe<Array<LeaderUnsetEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  leader?: InputMaybe<WorkerWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<LeaderUnsetEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type NewMissedRewardLevelReachedEventWhereInput = {
  AND?: InputMaybe<Array<NewMissedRewardLevelReachedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newMissedRewardAmount_eq?: InputMaybe<Scalars['BigInt']>
  newMissedRewardAmount_gt?: InputMaybe<Scalars['BigInt']>
  newMissedRewardAmount_gte?: InputMaybe<Scalars['BigInt']>
  newMissedRewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>
  newMissedRewardAmount_lt?: InputMaybe<Scalars['BigInt']>
  newMissedRewardAmount_lte?: InputMaybe<Scalars['BigInt']>
  OR?: InputMaybe<Array<NewMissedRewardLevelReachedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type RewardPaidEventWhereInput = {
  amount_eq?: InputMaybe<Scalars['BigInt']>
  amount_gt?: InputMaybe<Scalars['BigInt']>
  amount_gte?: InputMaybe<Scalars['BigInt']>
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>
  amount_lt?: InputMaybe<Scalars['BigInt']>
  amount_lte?: InputMaybe<Scalars['BigInt']>
  AND?: InputMaybe<Array<RewardPaidEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<RewardPaidEventWhereInput>>
  paymentType_eq?: InputMaybe<RewardPaymentType>
  paymentType_in?: InputMaybe<Array<RewardPaymentType>>
  rewardAccount_contains?: InputMaybe<Scalars['String']>
  rewardAccount_endsWith?: InputMaybe<Scalars['String']>
  rewardAccount_eq?: InputMaybe<Scalars['String']>
  rewardAccount_in?: InputMaybe<Array<Scalars['String']>>
  rewardAccount_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type StakeDecreasedEventWhereInput = {
  amount_eq?: InputMaybe<Scalars['BigInt']>
  amount_gt?: InputMaybe<Scalars['BigInt']>
  amount_gte?: InputMaybe<Scalars['BigInt']>
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>
  amount_lt?: InputMaybe<Scalars['BigInt']>
  amount_lte?: InputMaybe<Scalars['BigInt']>
  AND?: InputMaybe<Array<StakeDecreasedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<StakeDecreasedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type StakeIncreasedEventWhereInput = {
  amount_eq?: InputMaybe<Scalars['BigInt']>
  amount_gt?: InputMaybe<Scalars['BigInt']>
  amount_gte?: InputMaybe<Scalars['BigInt']>
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>
  amount_lt?: InputMaybe<Scalars['BigInt']>
  amount_lte?: InputMaybe<Scalars['BigInt']>
  AND?: InputMaybe<Array<StakeIncreasedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<StakeIncreasedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type StakeSlashedEventWhereInput = {
  AND?: InputMaybe<Array<StakeSlashedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<StakeSlashedEventWhereInput>>
  rationale_contains?: InputMaybe<Scalars['String']>
  rationale_endsWith?: InputMaybe<Scalars['String']>
  rationale_eq?: InputMaybe<Scalars['String']>
  rationale_in?: InputMaybe<Array<Scalars['String']>>
  rationale_startsWith?: InputMaybe<Scalars['String']>
  requestedAmount_eq?: InputMaybe<Scalars['BigInt']>
  requestedAmount_gt?: InputMaybe<Scalars['BigInt']>
  requestedAmount_gte?: InputMaybe<Scalars['BigInt']>
  requestedAmount_in?: InputMaybe<Array<Scalars['BigInt']>>
  requestedAmount_lt?: InputMaybe<Scalars['BigInt']>
  requestedAmount_lte?: InputMaybe<Scalars['BigInt']>
  slashedAmount_eq?: InputMaybe<Scalars['BigInt']>
  slashedAmount_gt?: InputMaybe<Scalars['BigInt']>
  slashedAmount_gte?: InputMaybe<Scalars['BigInt']>
  slashedAmount_in?: InputMaybe<Array<Scalars['BigInt']>>
  slashedAmount_lt?: InputMaybe<Scalars['BigInt']>
  slashedAmount_lte?: InputMaybe<Scalars['BigInt']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type TerminatedLeaderEventWhereInput = {
  AND?: InputMaybe<Array<TerminatedLeaderEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<TerminatedLeaderEventWhereInput>>
  penalty_eq?: InputMaybe<Scalars['BigInt']>
  penalty_gt?: InputMaybe<Scalars['BigInt']>
  penalty_gte?: InputMaybe<Scalars['BigInt']>
  penalty_in?: InputMaybe<Array<Scalars['BigInt']>>
  penalty_lt?: InputMaybe<Scalars['BigInt']>
  penalty_lte?: InputMaybe<Scalars['BigInt']>
  rationale_contains?: InputMaybe<Scalars['String']>
  rationale_endsWith?: InputMaybe<Scalars['String']>
  rationale_eq?: InputMaybe<Scalars['String']>
  rationale_in?: InputMaybe<Array<Scalars['String']>>
  rationale_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type TerminatedWorkerEventWhereInput = {
  AND?: InputMaybe<Array<TerminatedWorkerEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<TerminatedWorkerEventWhereInput>>
  penalty_eq?: InputMaybe<Scalars['BigInt']>
  penalty_gt?: InputMaybe<Scalars['BigInt']>
  penalty_gte?: InputMaybe<Scalars['BigInt']>
  penalty_in?: InputMaybe<Array<Scalars['BigInt']>>
  penalty_lt?: InputMaybe<Scalars['BigInt']>
  penalty_lte?: InputMaybe<Scalars['BigInt']>
  rationale_contains?: InputMaybe<Scalars['String']>
  rationale_endsWith?: InputMaybe<Scalars['String']>
  rationale_eq?: InputMaybe<Scalars['String']>
  rationale_in?: InputMaybe<Array<Scalars['String']>>
  rationale_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type WorkerExitedEventWhereInput = {
  AND?: InputMaybe<Array<WorkerExitedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<WorkerExitedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type WorkerRewardAccountUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<WorkerRewardAccountUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newRewardAccount_contains?: InputMaybe<Scalars['String']>
  newRewardAccount_endsWith?: InputMaybe<Scalars['String']>
  newRewardAccount_eq?: InputMaybe<Scalars['String']>
  newRewardAccount_in?: InputMaybe<Array<Scalars['String']>>
  newRewardAccount_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<WorkerRewardAccountUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type WorkerRewardAmountUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<WorkerRewardAmountUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newRewardPerBlock_eq?: InputMaybe<Scalars['BigInt']>
  newRewardPerBlock_gt?: InputMaybe<Scalars['BigInt']>
  newRewardPerBlock_gte?: InputMaybe<Scalars['BigInt']>
  newRewardPerBlock_in?: InputMaybe<Array<Scalars['BigInt']>>
  newRewardPerBlock_lt?: InputMaybe<Scalars['BigInt']>
  newRewardPerBlock_lte?: InputMaybe<Scalars['BigInt']>
  OR?: InputMaybe<Array<WorkerRewardAmountUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type WorkerRoleAccountUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<WorkerRoleAccountUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newRoleAccount_contains?: InputMaybe<Scalars['String']>
  newRoleAccount_endsWith?: InputMaybe<Scalars['String']>
  newRoleAccount_eq?: InputMaybe<Scalars['String']>
  newRoleAccount_in?: InputMaybe<Array<Scalars['String']>>
  newRoleAccount_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<WorkerRoleAccountUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type WorkerStartedLeavingEventWhereInput = {
  AND?: InputMaybe<Array<WorkerStartedLeavingEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  group?: InputMaybe<WorkingGroupWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<WorkerStartedLeavingEventWhereInput>>
  rationale_contains?: InputMaybe<Scalars['String']>
  rationale_endsWith?: InputMaybe<Scalars['String']>
  rationale_eq?: InputMaybe<Scalars['String']>
  rationale_in?: InputMaybe<Array<Scalars['String']>>
  rationale_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type MemberVerificationStatusUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<MemberVerificationStatusUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  isVerified_eq?: InputMaybe<Scalars['Boolean']>
  isVerified_in?: InputMaybe<Array<Scalars['Boolean']>>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<MemberVerificationStatusUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  worker?: InputMaybe<WorkerWhereInput>
}

export type PostModeratedEventWhereInput = {
  actor?: InputMaybe<WorkerWhereInput>
  AND?: InputMaybe<Array<PostModeratedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<PostModeratedEventWhereInput>>
  post?: InputMaybe<ForumPostWhereInput>
  rationale_contains?: InputMaybe<Scalars['String']>
  rationale_endsWith?: InputMaybe<Scalars['String']>
  rationale_eq?: InputMaybe<Scalars['String']>
  rationale_in?: InputMaybe<Array<Scalars['String']>>
  rationale_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ThreadModeratedEventWhereInput = {
  actor?: InputMaybe<WorkerWhereInput>
  AND?: InputMaybe<Array<ThreadModeratedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ThreadModeratedEventWhereInput>>
  rationale_contains?: InputMaybe<Scalars['String']>
  rationale_endsWith?: InputMaybe<Scalars['String']>
  rationale_eq?: InputMaybe<Scalars['String']>
  rationale_in?: InputMaybe<Array<Scalars['String']>>
  rationale_startsWith?: InputMaybe<Scalars['String']>
  thread?: InputMaybe<ForumThreadWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ThreadMovedEventWhereInput = {
  actor?: InputMaybe<WorkerWhereInput>
  AND?: InputMaybe<Array<ThreadMovedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newCategory?: InputMaybe<ForumCategoryWhereInput>
  oldCategory?: InputMaybe<ForumCategoryWhereInput>
  OR?: InputMaybe<Array<ThreadMovedEventWhereInput>>
  thread?: InputMaybe<ForumThreadWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CategoryCreatedEventWhereInput = {
  AND?: InputMaybe<Array<CategoryCreatedEventWhereInput>>
  category?: InputMaybe<ForumCategoryWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<CategoryCreatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ThreadCreatedEventWhereInput = {
  AND?: InputMaybe<Array<ThreadCreatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ThreadCreatedEventWhereInput>>
  text_contains?: InputMaybe<Scalars['String']>
  text_endsWith?: InputMaybe<Scalars['String']>
  text_eq?: InputMaybe<Scalars['String']>
  text_in?: InputMaybe<Array<Scalars['String']>>
  text_startsWith?: InputMaybe<Scalars['String']>
  thread?: InputMaybe<ForumThreadWhereInput>
  title_contains?: InputMaybe<Scalars['String']>
  title_endsWith?: InputMaybe<Scalars['String']>
  title_eq?: InputMaybe<Scalars['String']>
  title_in?: InputMaybe<Array<Scalars['String']>>
  title_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ThreadMetadataUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<ThreadMetadataUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newTitle_contains?: InputMaybe<Scalars['String']>
  newTitle_endsWith?: InputMaybe<Scalars['String']>
  newTitle_eq?: InputMaybe<Scalars['String']>
  newTitle_in?: InputMaybe<Array<Scalars['String']>>
  newTitle_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<ThreadMetadataUpdatedEventWhereInput>>
  thread?: InputMaybe<ForumThreadWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ForumPollWhereInput = {
  AND?: InputMaybe<Array<ForumPollWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  description_contains?: InputMaybe<Scalars['String']>
  description_endsWith?: InputMaybe<Scalars['String']>
  description_eq?: InputMaybe<Scalars['String']>
  description_in?: InputMaybe<Array<Scalars['String']>>
  description_startsWith?: InputMaybe<Scalars['String']>
  endTime_eq?: InputMaybe<Scalars['DateTime']>
  endTime_gt?: InputMaybe<Scalars['DateTime']>
  endTime_gte?: InputMaybe<Scalars['DateTime']>
  endTime_lt?: InputMaybe<Scalars['DateTime']>
  endTime_lte?: InputMaybe<Scalars['DateTime']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<ForumPollWhereInput>>
  pollAlternatives_every?: InputMaybe<ForumPollAlternativeWhereInput>
  pollAlternatives_none?: InputMaybe<ForumPollAlternativeWhereInput>
  pollAlternatives_some?: InputMaybe<ForumPollAlternativeWhereInput>
  thread?: InputMaybe<ForumThreadWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ForumPollAlternativeWhereInput = {
  AND?: InputMaybe<Array<ForumPollAlternativeWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  index_eq?: InputMaybe<Scalars['Int']>
  index_gt?: InputMaybe<Scalars['Int']>
  index_gte?: InputMaybe<Scalars['Int']>
  index_in?: InputMaybe<Array<Scalars['Int']>>
  index_lt?: InputMaybe<Scalars['Int']>
  index_lte?: InputMaybe<Scalars['Int']>
  OR?: InputMaybe<Array<ForumPollAlternativeWhereInput>>
  poll?: InputMaybe<ForumPollWhereInput>
  text_contains?: InputMaybe<Scalars['String']>
  text_endsWith?: InputMaybe<Scalars['String']>
  text_eq?: InputMaybe<Scalars['String']>
  text_in?: InputMaybe<Array<Scalars['String']>>
  text_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  votes_every?: InputMaybe<VoteOnPollEventWhereInput>
  votes_none?: InputMaybe<VoteOnPollEventWhereInput>
  votes_some?: InputMaybe<VoteOnPollEventWhereInput>
}

export type VoteOnPollEventWhereInput = {
  AND?: InputMaybe<Array<VoteOnPollEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<VoteOnPollEventWhereInput>>
  pollAlternative?: InputMaybe<ForumPollAlternativeWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  votingMember?: InputMaybe<MembershipWhereInput>
}

export type ForumThreadTagWhereInput = {
  AND?: InputMaybe<Array<ForumThreadTagWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<ForumThreadTagWhereInput>>
  threads_every?: InputMaybe<ForumThreadWhereInput>
  threads_none?: InputMaybe<ForumThreadWhereInput>
  threads_some?: InputMaybe<ForumThreadWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  visibleThreadsCount_eq?: InputMaybe<Scalars['Int']>
  visibleThreadsCount_gt?: InputMaybe<Scalars['Int']>
  visibleThreadsCount_gte?: InputMaybe<Scalars['Int']>
  visibleThreadsCount_in?: InputMaybe<Array<Scalars['Int']>>
  visibleThreadsCount_lt?: InputMaybe<Scalars['Int']>
  visibleThreadsCount_lte?: InputMaybe<Scalars['Int']>
}

export type ThreadDeletedEventWhereInput = {
  AND?: InputMaybe<Array<ThreadDeletedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ThreadDeletedEventWhereInput>>
  thread?: InputMaybe<ForumThreadWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type PostAddedEventWhereInput = {
  AND?: InputMaybe<Array<PostAddedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  isEditable_eq?: InputMaybe<Scalars['Boolean']>
  isEditable_in?: InputMaybe<Array<Scalars['Boolean']>>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<PostAddedEventWhereInput>>
  post?: InputMaybe<ForumPostWhereInput>
  text_contains?: InputMaybe<Scalars['String']>
  text_endsWith?: InputMaybe<Scalars['String']>
  text_eq?: InputMaybe<Scalars['String']>
  text_in?: InputMaybe<Array<Scalars['String']>>
  text_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type PostReactedEventWhereInput = {
  AND?: InputMaybe<Array<PostReactedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<PostReactedEventWhereInput>>
  post?: InputMaybe<ForumPostWhereInput>
  reactingMember?: InputMaybe<MembershipWhereInput>
  reactionResult_json?: InputMaybe<Scalars['JSONObject']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ForumPostReactionWhereInput = {
  AND?: InputMaybe<Array<ForumPostReactionWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  member?: InputMaybe<MembershipWhereInput>
  OR?: InputMaybe<Array<ForumPostReactionWhereInput>>
  post?: InputMaybe<ForumPostWhereInput>
  reaction_eq?: InputMaybe<PostReaction>
  reaction_in?: InputMaybe<Array<PostReaction>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type InvitesTransferredEventWhereInput = {
  AND?: InputMaybe<Array<InvitesTransferredEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  numberOfInvites_eq?: InputMaybe<Scalars['Int']>
  numberOfInvites_gt?: InputMaybe<Scalars['Int']>
  numberOfInvites_gte?: InputMaybe<Scalars['Int']>
  numberOfInvites_in?: InputMaybe<Array<Scalars['Int']>>
  numberOfInvites_lt?: InputMaybe<Scalars['Int']>
  numberOfInvites_lte?: InputMaybe<Scalars['Int']>
  OR?: InputMaybe<Array<InvitesTransferredEventWhereInput>>
  sourceMember?: InputMaybe<MembershipWhereInput>
  targetMember?: InputMaybe<MembershipWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type MemberAccountsUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<MemberAccountsUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newControllerAccount_contains?: InputMaybe<Scalars['String']>
  newControllerAccount_endsWith?: InputMaybe<Scalars['String']>
  newControllerAccount_eq?: InputMaybe<Scalars['String']>
  newControllerAccount_in?: InputMaybe<Array<Scalars['String']>>
  newControllerAccount_startsWith?: InputMaybe<Scalars['String']>
  newRootAccount_contains?: InputMaybe<Scalars['String']>
  newRootAccount_endsWith?: InputMaybe<Scalars['String']>
  newRootAccount_eq?: InputMaybe<Scalars['String']>
  newRootAccount_in?: InputMaybe<Array<Scalars['String']>>
  newRootAccount_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<MemberAccountsUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type MemberInvitedEventWhereInput = {
  AND?: InputMaybe<Array<MemberInvitedEventWhereInput>>
  controllerAccount_contains?: InputMaybe<Scalars['String']>
  controllerAccount_endsWith?: InputMaybe<Scalars['String']>
  controllerAccount_eq?: InputMaybe<Scalars['String']>
  controllerAccount_in?: InputMaybe<Array<Scalars['String']>>
  controllerAccount_startsWith?: InputMaybe<Scalars['String']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  handle_contains?: InputMaybe<Scalars['String']>
  handle_endsWith?: InputMaybe<Scalars['String']>
  handle_eq?: InputMaybe<Scalars['String']>
  handle_in?: InputMaybe<Array<Scalars['String']>>
  handle_startsWith?: InputMaybe<Scalars['String']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  invitingMember?: InputMaybe<MembershipWhereInput>
  metadata?: InputMaybe<MemberMetadataWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newMember?: InputMaybe<MembershipWhereInput>
  OR?: InputMaybe<Array<MemberInvitedEventWhereInput>>
  rootAccount_contains?: InputMaybe<Scalars['String']>
  rootAccount_endsWith?: InputMaybe<Scalars['String']>
  rootAccount_eq?: InputMaybe<Scalars['String']>
  rootAccount_in?: InputMaybe<Array<Scalars['String']>>
  rootAccount_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type MemberMetadataWhereInput = {
  about_contains?: InputMaybe<Scalars['String']>
  about_endsWith?: InputMaybe<Scalars['String']>
  about_eq?: InputMaybe<Scalars['String']>
  about_in?: InputMaybe<Array<Scalars['String']>>
  about_startsWith?: InputMaybe<Scalars['String']>
  AND?: InputMaybe<Array<MemberMetadataWhereInput>>
  avatar_json?: InputMaybe<Scalars['JSONObject']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  memberinvitedeventmetadata_every?: InputMaybe<MemberInvitedEventWhereInput>
  memberinvitedeventmetadata_none?: InputMaybe<MemberInvitedEventWhereInput>
  memberinvitedeventmetadata_some?: InputMaybe<MemberInvitedEventWhereInput>
  memberprofileupdatedeventnewMetadata_every?: InputMaybe<MemberProfileUpdatedEventWhereInput>
  memberprofileupdatedeventnewMetadata_none?: InputMaybe<MemberProfileUpdatedEventWhereInput>
  memberprofileupdatedeventnewMetadata_some?: InputMaybe<MemberProfileUpdatedEventWhereInput>
  membershipboughteventmetadata_every?: InputMaybe<MembershipBoughtEventWhereInput>
  membershipboughteventmetadata_none?: InputMaybe<MembershipBoughtEventWhereInput>
  membershipboughteventmetadata_some?: InputMaybe<MembershipBoughtEventWhereInput>
  membershipmetadata_every?: InputMaybe<MembershipWhereInput>
  membershipmetadata_none?: InputMaybe<MembershipWhereInput>
  membershipmetadata_some?: InputMaybe<MembershipWhereInput>
  name_contains?: InputMaybe<Scalars['String']>
  name_endsWith?: InputMaybe<Scalars['String']>
  name_eq?: InputMaybe<Scalars['String']>
  name_in?: InputMaybe<Array<Scalars['String']>>
  name_startsWith?: InputMaybe<Scalars['String']>
  OR?: InputMaybe<Array<MemberMetadataWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type MemberProfileUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<MemberProfileUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newHandle_contains?: InputMaybe<Scalars['String']>
  newHandle_endsWith?: InputMaybe<Scalars['String']>
  newHandle_eq?: InputMaybe<Scalars['String']>
  newHandle_in?: InputMaybe<Array<Scalars['String']>>
  newHandle_startsWith?: InputMaybe<Scalars['String']>
  newMetadata?: InputMaybe<MemberMetadataWhereInput>
  OR?: InputMaybe<Array<MemberProfileUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type MembershipBoughtEventWhereInput = {
  AND?: InputMaybe<Array<MembershipBoughtEventWhereInput>>
  controllerAccount_contains?: InputMaybe<Scalars['String']>
  controllerAccount_endsWith?: InputMaybe<Scalars['String']>
  controllerAccount_eq?: InputMaybe<Scalars['String']>
  controllerAccount_in?: InputMaybe<Array<Scalars['String']>>
  controllerAccount_startsWith?: InputMaybe<Scalars['String']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  handle_contains?: InputMaybe<Scalars['String']>
  handle_endsWith?: InputMaybe<Scalars['String']>
  handle_eq?: InputMaybe<Scalars['String']>
  handle_in?: InputMaybe<Array<Scalars['String']>>
  handle_startsWith?: InputMaybe<Scalars['String']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  metadata?: InputMaybe<MemberMetadataWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newMember?: InputMaybe<MembershipWhereInput>
  OR?: InputMaybe<Array<MembershipBoughtEventWhereInput>>
  referrer?: InputMaybe<MembershipWhereInput>
  rootAccount_contains?: InputMaybe<Scalars['String']>
  rootAccount_endsWith?: InputMaybe<Scalars['String']>
  rootAccount_eq?: InputMaybe<Scalars['String']>
  rootAccount_in?: InputMaybe<Array<Scalars['String']>>
  rootAccount_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalWhereInput = {
  AND?: InputMaybe<Array<ProposalWhereInput>>
  councilApprovals_eq?: InputMaybe<Scalars['Int']>
  councilApprovals_gt?: InputMaybe<Scalars['Int']>
  councilApprovals_gte?: InputMaybe<Scalars['Int']>
  councilApprovals_in?: InputMaybe<Array<Scalars['Int']>>
  councilApprovals_lt?: InputMaybe<Scalars['Int']>
  councilApprovals_lte?: InputMaybe<Scalars['Int']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInEvent?: InputMaybe<ProposalCreatedEventWhereInput>
  creator?: InputMaybe<MembershipWhereInput>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  description_contains?: InputMaybe<Scalars['String']>
  description_endsWith?: InputMaybe<Scalars['String']>
  description_eq?: InputMaybe<Scalars['String']>
  description_in?: InputMaybe<Array<Scalars['String']>>
  description_startsWith?: InputMaybe<Scalars['String']>
  details_json?: InputMaybe<Scalars['JSONObject']>
  discussionThread?: InputMaybe<ProposalDiscussionThreadWhereInput>
  exactExecutionBlock_eq?: InputMaybe<Scalars['Int']>
  exactExecutionBlock_gt?: InputMaybe<Scalars['Int']>
  exactExecutionBlock_gte?: InputMaybe<Scalars['Int']>
  exactExecutionBlock_in?: InputMaybe<Array<Scalars['Int']>>
  exactExecutionBlock_lt?: InputMaybe<Scalars['Int']>
  exactExecutionBlock_lte?: InputMaybe<Scalars['Int']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isFinalized_eq?: InputMaybe<Scalars['Boolean']>
  isFinalized_in?: InputMaybe<Array<Scalars['Boolean']>>
  OR?: InputMaybe<Array<ProposalWhereInput>>
  proposalcancelledeventproposal_every?: InputMaybe<ProposalCancelledEventWhereInput>
  proposalcancelledeventproposal_none?: InputMaybe<ProposalCancelledEventWhereInput>
  proposalcancelledeventproposal_some?: InputMaybe<ProposalCancelledEventWhereInput>
  proposaldecisionmadeeventproposal_every?: InputMaybe<ProposalDecisionMadeEventWhereInput>
  proposaldecisionmadeeventproposal_none?: InputMaybe<ProposalDecisionMadeEventWhereInput>
  proposaldecisionmadeeventproposal_some?: InputMaybe<ProposalDecisionMadeEventWhereInput>
  proposalexecutedeventproposal_every?: InputMaybe<ProposalExecutedEventWhereInput>
  proposalexecutedeventproposal_none?: InputMaybe<ProposalExecutedEventWhereInput>
  proposalexecutedeventproposal_some?: InputMaybe<ProposalExecutedEventWhereInput>
  proposalStatusUpdates_every?: InputMaybe<ProposalStatusUpdatedEventWhereInput>
  proposalStatusUpdates_none?: InputMaybe<ProposalStatusUpdatedEventWhereInput>
  proposalStatusUpdates_some?: InputMaybe<ProposalStatusUpdatedEventWhereInput>
  stakingAccount_contains?: InputMaybe<Scalars['String']>
  stakingAccount_endsWith?: InputMaybe<Scalars['String']>
  stakingAccount_eq?: InputMaybe<Scalars['String']>
  stakingAccount_in?: InputMaybe<Array<Scalars['String']>>
  stakingAccount_startsWith?: InputMaybe<Scalars['String']>
  status_json?: InputMaybe<Scalars['JSONObject']>
  statusSetAtBlock_eq?: InputMaybe<Scalars['Int']>
  statusSetAtBlock_gt?: InputMaybe<Scalars['Int']>
  statusSetAtBlock_gte?: InputMaybe<Scalars['Int']>
  statusSetAtBlock_in?: InputMaybe<Array<Scalars['Int']>>
  statusSetAtBlock_lt?: InputMaybe<Scalars['Int']>
  statusSetAtBlock_lte?: InputMaybe<Scalars['Int']>
  statusSetAtTime_eq?: InputMaybe<Scalars['DateTime']>
  statusSetAtTime_gt?: InputMaybe<Scalars['DateTime']>
  statusSetAtTime_gte?: InputMaybe<Scalars['DateTime']>
  statusSetAtTime_lt?: InputMaybe<Scalars['DateTime']>
  statusSetAtTime_lte?: InputMaybe<Scalars['DateTime']>
  title_contains?: InputMaybe<Scalars['String']>
  title_endsWith?: InputMaybe<Scalars['String']>
  title_eq?: InputMaybe<Scalars['String']>
  title_in?: InputMaybe<Array<Scalars['String']>>
  title_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  votes_every?: InputMaybe<ProposalVotedEventWhereInput>
  votes_none?: InputMaybe<ProposalVotedEventWhereInput>
  votes_some?: InputMaybe<ProposalVotedEventWhereInput>
}

export type ProposalCreatedEventWhereInput = {
  AND?: InputMaybe<Array<ProposalCreatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ProposalCreatedEventWhereInput>>
  proposal?: InputMaybe<ProposalWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionThreadWhereInput = {
  AND?: InputMaybe<Array<ProposalDiscussionThreadWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  mode_json?: InputMaybe<Scalars['JSONObject']>
  modeChanges_every?: InputMaybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  modeChanges_none?: InputMaybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  modeChanges_some?: InputMaybe<ProposalDiscussionThreadModeChangedEventWhereInput>
  OR?: InputMaybe<Array<ProposalDiscussionThreadWhereInput>>
  posts_every?: InputMaybe<ProposalDiscussionPostWhereInput>
  posts_none?: InputMaybe<ProposalDiscussionPostWhereInput>
  posts_some?: InputMaybe<ProposalDiscussionPostWhereInput>
  proposal?: InputMaybe<ProposalWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionThreadModeChangedEventWhereInput = {
  actor?: InputMaybe<MembershipWhereInput>
  AND?: InputMaybe<Array<ProposalDiscussionThreadModeChangedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newMode_json?: InputMaybe<Scalars['JSONObject']>
  OR?: InputMaybe<Array<ProposalDiscussionThreadModeChangedEventWhereInput>>
  thread?: InputMaybe<ProposalDiscussionThreadWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionPostWhereInput = {
  AND?: InputMaybe<Array<ProposalDiscussionPostWhereInput>>
  author?: InputMaybe<MembershipWhereInput>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  createdInEvent?: InputMaybe<ProposalDiscussionPostCreatedEventWhereInput>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  discussionThread?: InputMaybe<ProposalDiscussionThreadWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  isVisible_eq?: InputMaybe<Scalars['Boolean']>
  isVisible_in?: InputMaybe<Array<Scalars['Boolean']>>
  OR?: InputMaybe<Array<ProposalDiscussionPostWhereInput>>
  proposaldiscussionpostdeletedeventpost_every?: InputMaybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostdeletedeventpost_none?: InputMaybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostdeletedeventpost_some?: InputMaybe<ProposalDiscussionPostDeletedEventWhereInput>
  proposaldiscussionpostrepliesTo_every?: InputMaybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostrepliesTo_none?: InputMaybe<ProposalDiscussionPostWhereInput>
  proposaldiscussionpostrepliesTo_some?: InputMaybe<ProposalDiscussionPostWhereInput>
  repliesTo?: InputMaybe<ProposalDiscussionPostWhereInput>
  status_json?: InputMaybe<Scalars['JSONObject']>
  text_contains?: InputMaybe<Scalars['String']>
  text_endsWith?: InputMaybe<Scalars['String']>
  text_eq?: InputMaybe<Scalars['String']>
  text_in?: InputMaybe<Array<Scalars['String']>>
  text_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  updates_every?: InputMaybe<ProposalDiscussionPostUpdatedEventWhereInput>
  updates_none?: InputMaybe<ProposalDiscussionPostUpdatedEventWhereInput>
  updates_some?: InputMaybe<ProposalDiscussionPostUpdatedEventWhereInput>
}

export type ProposalDiscussionPostCreatedEventWhereInput = {
  AND?: InputMaybe<Array<ProposalDiscussionPostCreatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ProposalDiscussionPostCreatedEventWhereInput>>
  post?: InputMaybe<ProposalDiscussionPostWhereInput>
  text_contains?: InputMaybe<Scalars['String']>
  text_endsWith?: InputMaybe<Scalars['String']>
  text_eq?: InputMaybe<Scalars['String']>
  text_in?: InputMaybe<Array<Scalars['String']>>
  text_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionPostDeletedEventWhereInput = {
  actor?: InputMaybe<MembershipWhereInput>
  AND?: InputMaybe<Array<ProposalDiscussionPostDeletedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ProposalDiscussionPostDeletedEventWhereInput>>
  post?: InputMaybe<ProposalDiscussionPostWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionPostUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<ProposalDiscussionPostUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ProposalDiscussionPostUpdatedEventWhereInput>>
  post?: InputMaybe<ProposalDiscussionPostWhereInput>
  text_contains?: InputMaybe<Scalars['String']>
  text_endsWith?: InputMaybe<Scalars['String']>
  text_eq?: InputMaybe<Scalars['String']>
  text_in?: InputMaybe<Array<Scalars['String']>>
  text_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalCancelledEventWhereInput = {
  AND?: InputMaybe<Array<ProposalCancelledEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ProposalCancelledEventWhereInput>>
  proposal?: InputMaybe<ProposalWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalDecisionMadeEventWhereInput = {
  AND?: InputMaybe<Array<ProposalDecisionMadeEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  decisionStatus_json?: InputMaybe<Scalars['JSONObject']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ProposalDecisionMadeEventWhereInput>>
  proposal?: InputMaybe<ProposalWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalExecutedEventWhereInput = {
  AND?: InputMaybe<Array<ProposalExecutedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  executionStatus_json?: InputMaybe<Scalars['JSONObject']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ProposalExecutedEventWhereInput>>
  proposal?: InputMaybe<ProposalWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalStatusUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<ProposalStatusUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newStatus_json?: InputMaybe<Scalars['JSONObject']>
  OR?: InputMaybe<Array<ProposalStatusUpdatedEventWhereInput>>
  proposal?: InputMaybe<ProposalWhereInput>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalVotedEventWhereInput = {
  AND?: InputMaybe<Array<ProposalVotedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ProposalVotedEventWhereInput>>
  proposal?: InputMaybe<ProposalWhereInput>
  rationale_contains?: InputMaybe<Scalars['String']>
  rationale_endsWith?: InputMaybe<Scalars['String']>
  rationale_eq?: InputMaybe<Scalars['String']>
  rationale_in?: InputMaybe<Array<Scalars['String']>>
  rationale_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  voteKind_eq?: InputMaybe<ProposalVoteKind>
  voteKind_in?: InputMaybe<Array<ProposalVoteKind>>
  voter?: InputMaybe<MembershipWhereInput>
  votingRound_eq?: InputMaybe<Scalars['Int']>
  votingRound_gt?: InputMaybe<Scalars['Int']>
  votingRound_gte?: InputMaybe<Scalars['Int']>
  votingRound_in?: InputMaybe<Array<Scalars['Int']>>
  votingRound_lt?: InputMaybe<Scalars['Int']>
  votingRound_lte?: InputMaybe<Scalars['Int']>
}

export type StakingAccountAddedEventWhereInput = {
  account_contains?: InputMaybe<Scalars['String']>
  account_endsWith?: InputMaybe<Scalars['String']>
  account_eq?: InputMaybe<Scalars['String']>
  account_in?: InputMaybe<Array<Scalars['String']>>
  account_startsWith?: InputMaybe<Scalars['String']>
  AND?: InputMaybe<Array<StakingAccountAddedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<StakingAccountAddedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type StakingAccountConfirmedEventWhereInput = {
  account_contains?: InputMaybe<Scalars['String']>
  account_endsWith?: InputMaybe<Scalars['String']>
  account_eq?: InputMaybe<Scalars['String']>
  account_in?: InputMaybe<Array<Scalars['String']>>
  account_startsWith?: InputMaybe<Scalars['String']>
  AND?: InputMaybe<Array<StakingAccountConfirmedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<StakingAccountConfirmedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type StakingAccountRemovedEventWhereInput = {
  account_contains?: InputMaybe<Scalars['String']>
  account_endsWith?: InputMaybe<Scalars['String']>
  account_eq?: InputMaybe<Scalars['String']>
  account_in?: InputMaybe<Array<Scalars['String']>>
  account_startsWith?: InputMaybe<Scalars['String']>
  AND?: InputMaybe<Array<StakingAccountRemovedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  member?: InputMaybe<MembershipWhereInput>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<StakingAccountRemovedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ProposalDiscussionWhitelistWhereInput = {
  AND?: InputMaybe<Array<ProposalDiscussionWhitelistWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  members_every?: InputMaybe<MembershipWhereInput>
  members_none?: InputMaybe<MembershipWhereInput>
  members_some?: InputMaybe<MembershipWhereInput>
  OR?: InputMaybe<Array<ProposalDiscussionWhitelistWhereInput>>
  phantom_eq?: InputMaybe<Scalars['Int']>
  phantom_gt?: InputMaybe<Scalars['Int']>
  phantom_gte?: InputMaybe<Scalars['Int']>
  phantom_in?: InputMaybe<Array<Scalars['Int']>>
  phantom_lt?: InputMaybe<Scalars['Int']>
  phantom_lte?: InputMaybe<Scalars['Int']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ApplicationFormQuestionAnswerConnection = {
  edges: Array<ApplicationFormQuestionAnswerEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ApplicationFormQuestionAnswerEdge = {
  cursor: Scalars['String']
  node: ApplicationFormQuestionAnswer
}

export type ApplicationFormQuestionWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ApplicationFormQuestionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IndexAsc = 'index_ASC',
  IndexDesc = 'index_DESC',
  OpeningMetadataAsc = 'openingMetadata_ASC',
  OpeningMetadataDesc = 'openingMetadata_DESC',
  QuestionAsc = 'question_ASC',
  QuestionDesc = 'question_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ApplicationFormQuestionConnection = {
  edges: Array<ApplicationFormQuestionEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ApplicationFormQuestionEdge = {
  cursor: Scalars['String']
  node: ApplicationFormQuestion
}

export type ApplicationWithdrawnEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ApplicationWithdrawnEventOrderByInput {
  ApplicationAsc = 'application_ASC',
  ApplicationDesc = 'application_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ApplicationWithdrawnEventConnection = {
  edges: Array<ApplicationWithdrawnEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ApplicationWithdrawnEventEdge = {
  cursor: Scalars['String']
  node: ApplicationWithdrawnEvent
}

export type AppliedOnOpeningEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum AppliedOnOpeningEventOrderByInput {
  ApplicationAsc = 'application_ASC',
  ApplicationDesc = 'application_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type AppliedOnOpeningEventConnection = {
  edges: Array<AppliedOnOpeningEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AppliedOnOpeningEventEdge = {
  cursor: Scalars['String']
  node: AppliedOnOpeningEvent
}

export type AuctionBidCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum AuctionBidCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type AuctionBidCanceledEventConnection = {
  edges: Array<AuctionBidCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuctionBidCanceledEventEdge = {
  cursor: Scalars['String']
  node: AuctionBidCanceledEvent
}

export type AuctionBidMadeEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum AuctionBidMadeEventOrderByInput {
  BidAmountAsc = 'bidAmount_ASC',
  BidAmountDesc = 'bidAmount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ExtendsAuctionAsc = 'extendsAuction_ASC',
  ExtendsAuctionDesc = 'extendsAuction_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type AuctionBidMadeEventConnection = {
  edges: Array<AuctionBidMadeEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuctionBidMadeEventEdge = {
  cursor: Scalars['String']
  node: AuctionBidMadeEvent
}

export type AuctionWhereUniqueInput = {
  id: Scalars['ID']
}

export type AuctionCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum AuctionCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type AuctionCanceledEventConnection = {
  edges: Array<AuctionCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuctionCanceledEventEdge = {
  cursor: Scalars['String']
  node: AuctionCanceledEvent
}

export enum AuctionOrderByInput {
  BuyNowPriceAsc = 'buyNowPrice_ASC',
  BuyNowPriceDesc = 'buyNowPrice_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EndedAtBlockAsc = 'endedAtBlock_ASC',
  EndedAtBlockDesc = 'endedAtBlock_DESC',
  InitialOwnerAsc = 'initialOwner_ASC',
  InitialOwnerDesc = 'initialOwner_DESC',
  IsCanceledAsc = 'isCanceled_ASC',
  IsCanceledDesc = 'isCanceled_DESC',
  IsCompletedAsc = 'isCompleted_ASC',
  IsCompletedDesc = 'isCompleted_DESC',
  LastBidAsc = 'lastBid_ASC',
  LastBidDesc = 'lastBid_DESC',
  MinimalBidStepAsc = 'minimalBidStep_ASC',
  MinimalBidStepDesc = 'minimalBidStep_DESC',
  NftAsc = 'nft_ASC',
  NftDesc = 'nft_DESC',
  PlannedEndAtBlockAsc = 'plannedEndAtBlock_ASC',
  PlannedEndAtBlockDesc = 'plannedEndAtBlock_DESC',
  StartingPriceAsc = 'startingPrice_ASC',
  StartingPriceDesc = 'startingPrice_DESC',
  StartsAtBlockAsc = 'startsAtBlock_ASC',
  StartsAtBlockDesc = 'startsAtBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningMemberAsc = 'winningMember_ASC',
  WinningMemberDesc = 'winningMember_DESC',
}

export type AuctionConnection = {
  edges: Array<AuctionEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuctionEdge = {
  cursor: Scalars['String']
  node: Auction
}

export type AuctionStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum AuctionStartedEventOrderByInput {
  AuctionAsc = 'auction_ASC',
  AuctionDesc = 'auction_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type AuctionStartedEventConnection = {
  edges: Array<AuctionStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type AuctionStartedEventEdge = {
  cursor: Scalars['String']
  node: AuctionStartedEvent
}

export type BidWhereUniqueInput = {
  id: Scalars['ID']
}

export type BidMadeCompletingAuctionEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum BidMadeCompletingAuctionEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type BidMadeCompletingAuctionEventConnection = {
  edges: Array<BidMadeCompletingAuctionEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BidMadeCompletingAuctionEventEdge = {
  cursor: Scalars['String']
  node: BidMadeCompletingAuctionEvent
}

export enum BidOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  AuctionAsc = 'auction_ASC',
  AuctionDesc = 'auction_DESC',
  BidderAsc = 'bidder_ASC',
  BidderDesc = 'bidder_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IsCanceledAsc = 'isCanceled_ASC',
  IsCanceledDesc = 'isCanceled_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BidConnection = {
  edges: Array<BidEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BidEdge = {
  cursor: Scalars['String']
  node: Bid
}

export type BudgetBalanceSetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetBalanceSetEvent = BaseGraphQlObject &
  Event & {
    /** Budget balance that has been set. */
    balance: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum BudgetBalanceSetEventOrderByInput {
  BalanceAsc = 'balance_ASC',
  BalanceDesc = 'balance_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetBalanceSetEventWhereInput = {
  AND?: InputMaybe<Array<BudgetBalanceSetEventWhereInput>>
  balance_eq?: InputMaybe<Scalars['BigInt']>
  balance_gt?: InputMaybe<Scalars['BigInt']>
  balance_gte?: InputMaybe<Scalars['BigInt']>
  balance_in?: InputMaybe<Array<Scalars['BigInt']>>
  balance_lt?: InputMaybe<Scalars['BigInt']>
  balance_lte?: InputMaybe<Scalars['BigInt']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<BudgetBalanceSetEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type BudgetBalanceSetEventConnection = {
  edges: Array<BudgetBalanceSetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetBalanceSetEventEdge = {
  cursor: Scalars['String']
  node: BudgetBalanceSetEvent
}

export type BudgetIncrementUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetIncrementUpdatedEvent = BaseGraphQlObject &
  Event & {
    /** Amount that is added to the budget each time it's refilled. */
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum BudgetIncrementUpdatedEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetIncrementUpdatedEventWhereInput = {
  amount_eq?: InputMaybe<Scalars['BigInt']>
  amount_gt?: InputMaybe<Scalars['BigInt']>
  amount_gte?: InputMaybe<Scalars['BigInt']>
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>
  amount_lt?: InputMaybe<Scalars['BigInt']>
  amount_lte?: InputMaybe<Scalars['BigInt']>
  AND?: InputMaybe<Array<BudgetIncrementUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<BudgetIncrementUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type BudgetIncrementUpdatedEventConnection = {
  edges: Array<BudgetIncrementUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetIncrementUpdatedEventEdge = {
  cursor: Scalars['String']
  node: BudgetIncrementUpdatedEvent
}

export type BudgetRefillEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetRefillEvent = BaseGraphQlObject &
  Event & {
    /** Balance that has been refilled. */
    balance: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum BudgetRefillEventOrderByInput {
  BalanceAsc = 'balance_ASC',
  BalanceDesc = 'balance_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetRefillEventWhereInput = {
  AND?: InputMaybe<Array<BudgetRefillEventWhereInput>>
  balance_eq?: InputMaybe<Scalars['BigInt']>
  balance_gt?: InputMaybe<Scalars['BigInt']>
  balance_gte?: InputMaybe<Scalars['BigInt']>
  balance_in?: InputMaybe<Array<Scalars['BigInt']>>
  balance_lt?: InputMaybe<Scalars['BigInt']>
  balance_lte?: InputMaybe<Scalars['BigInt']>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<BudgetRefillEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type BudgetRefillEventConnection = {
  edges: Array<BudgetRefillEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetRefillEventEdge = {
  cursor: Scalars['String']
  node: BudgetRefillEvent
}

export type BudgetRefillPlannedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type BudgetRefillPlannedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    nextRefillInBlock: Scalars['Int']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum BudgetRefillPlannedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NextRefillInBlockAsc = 'nextRefillInBlock_ASC',
  NextRefillInBlockDesc = 'nextRefillInBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetRefillPlannedEventWhereInput = {
  AND?: InputMaybe<Array<BudgetRefillPlannedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  nextRefillInBlock_eq?: InputMaybe<Scalars['Int']>
  nextRefillInBlock_gt?: InputMaybe<Scalars['Int']>
  nextRefillInBlock_gte?: InputMaybe<Scalars['Int']>
  nextRefillInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  nextRefillInBlock_lt?: InputMaybe<Scalars['Int']>
  nextRefillInBlock_lte?: InputMaybe<Scalars['Int']>
  OR?: InputMaybe<Array<BudgetRefillPlannedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type BudgetRefillPlannedEventConnection = {
  edges: Array<BudgetRefillPlannedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetRefillPlannedEventEdge = {
  cursor: Scalars['String']
  node: BudgetRefillPlannedEvent
}

export type BudgetSetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum BudgetSetEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewBudgetAsc = 'newBudget_ASC',
  NewBudgetDesc = 'newBudget_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetSetEventConnection = {
  edges: Array<BudgetSetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetSetEventEdge = {
  cursor: Scalars['String']
  node: BudgetSetEvent
}

export type BudgetSpendingEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum BudgetSpendingEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  RecieverAsc = 'reciever_ASC',
  RecieverDesc = 'reciever_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type BudgetSpendingEventConnection = {
  edges: Array<BudgetSpendingEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BudgetSpendingEventEdge = {
  cursor: Scalars['String']
  node: BudgetSpendingEvent
}

export type BuyNowCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum BuyNowCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type BuyNowCanceledEventConnection = {
  edges: Array<BuyNowCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type BuyNowCanceledEventEdge = {
  cursor: Scalars['String']
  node: BuyNowCanceledEvent
}

export enum CandidacyNoteMetadataOrderByInput {
  BannerImageUriAsc = 'bannerImageUri_ASC',
  BannerImageUriDesc = 'bannerImageUri_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  HeaderAsc = 'header_ASC',
  HeaderDesc = 'header_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CandidacyNoteMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type CandidacyNoteMetadataConnection = {
  edges: Array<CandidacyNoteMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidacyNoteMetadataEdge = {
  cursor: Scalars['String']
  node: CandidacyNoteMetadata
}

export type CandidacyNoteSetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CandidacyNoteSetEventOrderByInput {
  CandidateAsc = 'candidate_ASC',
  CandidateDesc = 'candidate_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NoteMetadataAsc = 'noteMetadata_ASC',
  NoteMetadataDesc = 'noteMetadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CandidacyNoteSetEventConnection = {
  edges: Array<CandidacyNoteSetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidacyNoteSetEventEdge = {
  cursor: Scalars['String']
  node: CandidacyNoteSetEvent
}

export type CandidacyStakeReleaseEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CandidacyStakeReleaseEventOrderByInput {
  CandidateAsc = 'candidate_ASC',
  CandidateDesc = 'candidate_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CandidacyStakeReleaseEventConnection = {
  edges: Array<CandidacyStakeReleaseEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidacyStakeReleaseEventEdge = {
  cursor: Scalars['String']
  node: CandidacyStakeReleaseEvent
}

export type CandidacyWithdrawEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CandidacyWithdrawEventOrderByInput {
  CandidateAsc = 'candidate_ASC',
  CandidateDesc = 'candidate_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CandidacyWithdrawEventConnection = {
  edges: Array<CandidacyWithdrawEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidacyWithdrawEventEdge = {
  cursor: Scalars['String']
  node: CandidacyWithdrawEvent
}

export type CandidateWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CandidateOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectionRoundAsc = 'electionRound_ASC',
  ElectionRoundDesc = 'electionRound_DESC',
  LastVoteReceivedAtBlockAsc = 'lastVoteReceivedAtBlock_ASC',
  LastVoteReceivedAtBlockDesc = 'lastVoteReceivedAtBlock_DESC',
  LastVoteReceivedAtEventNumberAsc = 'lastVoteReceivedAtEventNumber_ASC',
  LastVoteReceivedAtEventNumberDesc = 'lastVoteReceivedAtEventNumber_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NoteMetadataAsc = 'noteMetadata_ASC',
  NoteMetadataDesc = 'noteMetadata_DESC',
  RewardAccountIdAsc = 'rewardAccountId_ASC',
  RewardAccountIdDesc = 'rewardAccountId_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StakeLockedAsc = 'stakeLocked_ASC',
  StakeLockedDesc = 'stakeLocked_DESC',
  StakingAccountIdAsc = 'stakingAccountId_ASC',
  StakingAccountIdDesc = 'stakingAccountId_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VotePowerAsc = 'votePower_ASC',
  VotePowerDesc = 'votePower_DESC',
}

export type CandidateConnection = {
  edges: Array<CandidateEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CandidateEdge = {
  cursor: Scalars['String']
  node: Candidate
}

export type CastVoteWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CastVoteOrderByInput {
  CastByAsc = 'castBy_ASC',
  CastByDesc = 'castBy_DESC',
  CommitmentAsc = 'commitment_ASC',
  CommitmentDesc = 'commitment_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectionRoundAsc = 'electionRound_ASC',
  ElectionRoundDesc = 'electionRound_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StakeLockedAsc = 'stakeLocked_ASC',
  StakeLockedDesc = 'stakeLocked_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VoteForAsc = 'voteFor_ASC',
  VoteForDesc = 'voteFor_DESC',
  VotePowerAsc = 'votePower_ASC',
  VotePowerDesc = 'votePower_DESC',
}

export type CastVoteConnection = {
  edges: Array<CastVoteEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CastVoteEdge = {
  cursor: Scalars['String']
  node: CastVote
}

export type CategoryArchivalStatusUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CategoryArchivalStatusUpdatedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewArchivalStatusAsc = 'newArchivalStatus_ASC',
  NewArchivalStatusDesc = 'newArchivalStatus_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryArchivalStatusUpdatedEventConnection = {
  edges: Array<CategoryArchivalStatusUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryArchivalStatusUpdatedEventEdge = {
  cursor: Scalars['String']
  node: CategoryArchivalStatusUpdatedEvent
}

export type CategoryCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CategoryCreatedEventOrderByInput {
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryCreatedEventConnection = {
  edges: Array<CategoryCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryCreatedEventEdge = {
  cursor: Scalars['String']
  node: CategoryCreatedEvent
}

export type CategoryDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CategoryDeletedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryDeletedEventConnection = {
  edges: Array<CategoryDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryDeletedEventEdge = {
  cursor: Scalars['String']
  node: CategoryDeletedEvent
}

export type CategoryMembershipOfModeratorUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CategoryMembershipOfModeratorUpdatedEventOrderByInput {
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  ModeratorAsc = 'moderator_ASC',
  ModeratorDesc = 'moderator_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewCanModerateValueAsc = 'newCanModerateValue_ASC',
  NewCanModerateValueDesc = 'newCanModerateValue_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryMembershipOfModeratorUpdatedEventConnection = {
  edges: Array<CategoryMembershipOfModeratorUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryMembershipOfModeratorUpdatedEventEdge = {
  cursor: Scalars['String']
  node: CategoryMembershipOfModeratorUpdatedEvent
}

export type CategoryStickyThreadUpdateEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CategoryStickyThreadUpdateEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CategoryStickyThreadUpdateEventConnection = {
  edges: Array<CategoryStickyThreadUpdateEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CategoryStickyThreadUpdateEventEdge = {
  cursor: Scalars['String']
  node: CategoryStickyThreadUpdateEvent
}

export type CouncilMemberWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CouncilMemberOrderByInput {
  AccumulatedRewardAsc = 'accumulatedReward_ASC',
  AccumulatedRewardDesc = 'accumulatedReward_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedInCouncilAsc = 'electedInCouncil_ASC',
  ElectedInCouncilDesc = 'electedInCouncil_DESC',
  LastPaymentBlockAsc = 'lastPaymentBlock_ASC',
  LastPaymentBlockDesc = 'lastPaymentBlock_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  RewardAccountIdAsc = 'rewardAccountId_ASC',
  RewardAccountIdDesc = 'rewardAccountId_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StakingAccountIdAsc = 'stakingAccountId_ASC',
  StakingAccountIdDesc = 'stakingAccountId_DESC',
  UnpaidRewardAsc = 'unpaidReward_ASC',
  UnpaidRewardDesc = 'unpaidReward_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CouncilMemberConnection = {
  edges: Array<CouncilMemberEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CouncilMemberEdge = {
  cursor: Scalars['String']
  node: CouncilMember
}

export type CouncilorRewardUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type CouncilorRewardUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New reward amount paid each reward period. */
    rewardAmount: Scalars['BigInt']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum CouncilorRewardUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RewardAmountAsc = 'rewardAmount_ASC',
  RewardAmountDesc = 'rewardAmount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CouncilorRewardUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<CouncilorRewardUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<CouncilorRewardUpdatedEventWhereInput>>
  rewardAmount_eq?: InputMaybe<Scalars['BigInt']>
  rewardAmount_gt?: InputMaybe<Scalars['BigInt']>
  rewardAmount_gte?: InputMaybe<Scalars['BigInt']>
  rewardAmount_in?: InputMaybe<Array<Scalars['BigInt']>>
  rewardAmount_lt?: InputMaybe<Scalars['BigInt']>
  rewardAmount_lte?: InputMaybe<Scalars['BigInt']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type CouncilorRewardUpdatedEventConnection = {
  edges: Array<CouncilorRewardUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CouncilorRewardUpdatedEventEdge = {
  cursor: Scalars['String']
  node: CouncilorRewardUpdatedEvent
}

export type CouncilStageUpdateWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CouncilStageUpdateOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedCouncilAsc = 'electedCouncil_ASC',
  ElectedCouncilDesc = 'electedCouncil_DESC',
  ElectionProblemAsc = 'electionProblem_ASC',
  ElectionProblemDesc = 'electionProblem_DESC',
  ChangedAtAsc = 'changedAt_ASC',
  ChangedAtDesc = 'changedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CouncilStageUpdateConnection = {
  edges: Array<CouncilStageUpdateEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CouncilStageUpdateEdge = {
  cursor: Scalars['String']
  node: CouncilStageUpdate
}

export type CuratorWhereUniqueInput = {
  id: Scalars['ID']
}

export type CuratorGroupWhereUniqueInput = {
  id: Scalars['ID']
}

export enum CuratorGroupOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CuratorGroupConnection = {
  edges: Array<CuratorGroupEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CuratorGroupEdge = {
  cursor: Scalars['String']
  node: CuratorGroup
}

export enum CuratorOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DummyAsc = 'dummy_ASC',
  DummyDesc = 'dummy_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type CuratorConnection = {
  edges: Array<CuratorEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type CuratorEdge = {
  cursor: Scalars['String']
  node: Curator
}

export type DistributionBucketWhereUniqueInput = {
  id: Scalars['ID']
}

export enum DistributionBucketFamilyOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketFamilyConnection = {
  edges: Array<DistributionBucketFamilyEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketFamilyEdge = {
  cursor: Scalars['String']
  node: DistributionBucketFamily
}

export type DistributionBucketFamilyWhereUniqueInput = {
  id: Scalars['ID']
}

export type DistributionBucketFamilyGeographicAreaWhereUniqueInput = {
  id: Scalars['ID']
}

export enum DistributionBucketFamilyGeographicAreaOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DistributionBucketFamilyMetadataAsc = 'distributionBucketFamilyMetadata_ASC',
  DistributionBucketFamilyMetadataDesc = 'distributionBucketFamilyMetadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketFamilyGeographicAreaConnection = {
  edges: Array<DistributionBucketFamilyGeographicAreaEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketFamilyGeographicAreaEdge = {
  cursor: Scalars['String']
  node: DistributionBucketFamilyGeographicArea
}

export enum DistributionBucketFamilyMetadataOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  RegionAsc = 'region_ASC',
  RegionDesc = 'region_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketFamilyMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type DistributionBucketFamilyMetadataConnection = {
  edges: Array<DistributionBucketFamilyMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketFamilyMetadataEdge = {
  cursor: Scalars['String']
  node: DistributionBucketFamilyMetadata
}

export type DistributionBucketOperatorWhereUniqueInput = {
  id: Scalars['ID']
}

export enum DistributionBucketOperatorMetadataOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ExtraAsc = 'extra_ASC',
  ExtraDesc = 'extra_DESC',
  NodeEndpointAsc = 'nodeEndpoint_ASC',
  NodeEndpointDesc = 'nodeEndpoint_DESC',
  NodeLocationAsc = 'nodeLocation_ASC',
  NodeLocationDesc = 'nodeLocation_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketOperatorMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type DistributionBucketOperatorMetadataConnection = {
  edges: Array<DistributionBucketOperatorMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketOperatorMetadataEdge = {
  cursor: Scalars['String']
  node: DistributionBucketOperatorMetadata
}

export enum DistributionBucketOperatorOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DistributionBucketAsc = 'distributionBucket_ASC',
  DistributionBucketDesc = 'distributionBucket_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerIdAsc = 'workerId_ASC',
  WorkerIdDesc = 'workerId_DESC',
}

export type DistributionBucketOperatorConnection = {
  edges: Array<DistributionBucketOperatorEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketOperatorEdge = {
  cursor: Scalars['String']
  node: DistributionBucketOperator
}

export enum DistributionBucketOrderByInput {
  AcceptingNewBagsAsc = 'acceptingNewBags_ASC',
  AcceptingNewBagsDesc = 'acceptingNewBags_DESC',
  BucketIndexAsc = 'bucketIndex_ASC',
  BucketIndexDesc = 'bucketIndex_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DistributingAsc = 'distributing_ASC',
  DistributingDesc = 'distributing_DESC',
  FamilyAsc = 'family_ASC',
  FamilyDesc = 'family_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type DistributionBucketConnection = {
  edges: Array<DistributionBucketEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type DistributionBucketEdge = {
  cursor: Scalars['String']
  node: DistributionBucket
}

export type ElectedCouncilWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ElectedCouncilOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedAtBlockAsc = 'electedAtBlock_ASC',
  ElectedAtBlockDesc = 'electedAtBlock_DESC',
  ElectedAtNetworkAsc = 'electedAtNetwork_ASC',
  ElectedAtNetworkDesc = 'electedAtNetwork_DESC',
  ElectedAtTimeAsc = 'electedAtTime_ASC',
  ElectedAtTimeDesc = 'electedAtTime_DESC',
  EndedAtBlockAsc = 'endedAtBlock_ASC',
  EndedAtBlockDesc = 'endedAtBlock_DESC',
  EndedAtNetworkAsc = 'endedAtNetwork_ASC',
  EndedAtNetworkDesc = 'endedAtNetwork_DESC',
  EndedAtTimeAsc = 'endedAtTime_ASC',
  EndedAtTimeDesc = 'endedAtTime_DESC',
  IsResignedAsc = 'isResigned_ASC',
  IsResignedDesc = 'isResigned_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ElectedCouncilConnection = {
  edges: Array<ElectedCouncilEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ElectedCouncilEdge = {
  cursor: Scalars['String']
  node: ElectedCouncil
}

export type ElectionRoundWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ElectionRoundOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CycleIdAsc = 'cycleId_ASC',
  CycleIdDesc = 'cycleId_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedCouncilAsc = 'electedCouncil_ASC',
  ElectedCouncilDesc = 'electedCouncil_DESC',
  EndedAtBlockAsc = 'endedAtBlock_ASC',
  EndedAtBlockDesc = 'endedAtBlock_DESC',
  EndedAtNetworkAsc = 'endedAtNetwork_ASC',
  EndedAtNetworkDesc = 'endedAtNetwork_DESC',
  EndedAtTimeAsc = 'endedAtTime_ASC',
  EndedAtTimeDesc = 'endedAtTime_DESC',
  IsFinishedAsc = 'isFinished_ASC',
  IsFinishedDesc = 'isFinished_DESC',
  NextElectedCouncilAsc = 'nextElectedCouncil_ASC',
  NextElectedCouncilDesc = 'nextElectedCouncil_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ElectionRoundConnection = {
  edges: Array<ElectionRoundEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ElectionRoundEdge = {
  cursor: Scalars['String']
  node: ElectionRound
}

export type EnglishAuctionCompletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum EnglishAuctionCompletedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
  WinnerAsc = 'winner_ASC',
  WinnerDesc = 'winner_DESC',
}

export type EnglishAuctionCompletedEventConnection = {
  edges: Array<EnglishAuctionCompletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type EnglishAuctionCompletedEventEdge = {
  cursor: Scalars['String']
  node: EnglishAuctionCompletedEvent
}

export enum EventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type EventWhereInput = {
  AND?: InputMaybe<Array<EventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<EventWhereInput>>
  type_eq?: InputMaybe<EventTypeOptions>
  type_in?: InputMaybe<Array<EventTypeOptions>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export enum ForumCategoryOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ParentAsc = 'parent_ASC',
  ParentDesc = 'parent_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ForumCategoryConnection = {
  edges: Array<ForumCategoryEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumCategoryEdge = {
  cursor: Scalars['String']
  node: ForumCategory
}

export type ForumCategoryWhereUniqueInput = {
  id: Scalars['ID']
}

export type ForumPollAlternativeWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ForumPollAlternativeOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IndexAsc = 'index_ASC',
  IndexDesc = 'index_DESC',
  PollAsc = 'poll_ASC',
  PollDesc = 'poll_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ForumPollAlternativeConnection = {
  edges: Array<ForumPollAlternativeEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumPollAlternativeEdge = {
  cursor: Scalars['String']
  node: ForumPollAlternative
}

export type ForumPollWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ForumPollOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  EndTimeAsc = 'endTime_ASC',
  EndTimeDesc = 'endTime_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ForumPollConnection = {
  edges: Array<ForumPollEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumPollEdge = {
  cursor: Scalars['String']
  node: ForumPoll
}

export type ForumPostWhereUniqueInput = {
  id: Scalars['ID']
}

export type ForumPostReactionWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ForumPostReactionOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  ReactionAsc = 'reaction_ASC',
  ReactionDesc = 'reaction_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ForumPostReactionConnection = {
  edges: Array<ForumPostReactionEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumPostReactionEdge = {
  cursor: Scalars['String']
  node: ForumPostReaction
}

export enum ForumPostOrderByInput {
  AuthorAsc = 'author_ASC',
  AuthorDesc = 'author_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DeletedInEventAsc = 'deletedInEvent_ASC',
  DeletedInEventDesc = 'deletedInEvent_DESC',
  IsVisibleAsc = 'isVisible_ASC',
  IsVisibleDesc = 'isVisible_DESC',
  RepliesToAsc = 'repliesTo_ASC',
  RepliesToDesc = 'repliesTo_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ForumPostConnection = {
  edges: Array<ForumPostEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumPostEdge = {
  cursor: Scalars['String']
  node: ForumPost
}

export type ForumThreadWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ForumThreadOrderByInput {
  AuthorAsc = 'author_ASC',
  AuthorDesc = 'author_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InitialPostAsc = 'initialPost_ASC',
  InitialPostDesc = 'initialPost_DESC',
  IsStickyAsc = 'isSticky_ASC',
  IsStickyDesc = 'isSticky_DESC',
  IsVisibleAsc = 'isVisible_ASC',
  IsVisibleDesc = 'isVisible_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VisiblePostsCountAsc = 'visiblePostsCount_ASC',
  VisiblePostsCountDesc = 'visiblePostsCount_DESC',
}

export type ForumThreadConnection = {
  edges: Array<ForumThreadEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumThreadEdge = {
  cursor: Scalars['String']
  node: ForumThread
}

export type ForumThreadTagWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ForumThreadTagOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VisibleThreadsCountAsc = 'visibleThreadsCount_ASC',
  VisibleThreadsCountDesc = 'visibleThreadsCount_DESC',
}

export type ForumThreadTagConnection = {
  edges: Array<ForumThreadTagEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ForumThreadTagEdge = {
  cursor: Scalars['String']
  node: ForumThreadTag
}

export type FundingRequestDestinationWhereUniqueInput = {
  id: Scalars['ID']
}

export enum FundingRequestDestinationOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ListAsc = 'list_ASC',
  ListDesc = 'list_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type FundingRequestDestinationWhereInput = {
  account_contains?: InputMaybe<Scalars['String']>
  account_endsWith?: InputMaybe<Scalars['String']>
  account_eq?: InputMaybe<Scalars['String']>
  account_in?: InputMaybe<Array<Scalars['String']>>
  account_startsWith?: InputMaybe<Scalars['String']>
  amount_eq?: InputMaybe<Scalars['BigInt']>
  amount_gt?: InputMaybe<Scalars['BigInt']>
  amount_gte?: InputMaybe<Scalars['BigInt']>
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>
  amount_lt?: InputMaybe<Scalars['BigInt']>
  amount_lte?: InputMaybe<Scalars['BigInt']>
  AND?: InputMaybe<Array<FundingRequestDestinationWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  list?: InputMaybe<FundingRequestDestinationsListWhereInput>
  OR?: InputMaybe<Array<FundingRequestDestinationWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type FundingRequestDestinationsListWhereInput = {
  AND?: InputMaybe<Array<FundingRequestDestinationsListWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  destinations_every?: InputMaybe<FundingRequestDestinationWhereInput>
  destinations_none?: InputMaybe<FundingRequestDestinationWhereInput>
  destinations_some?: InputMaybe<FundingRequestDestinationWhereInput>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<FundingRequestDestinationsListWhereInput>>
  phantom_eq?: InputMaybe<Scalars['Int']>
  phantom_gt?: InputMaybe<Scalars['Int']>
  phantom_gte?: InputMaybe<Scalars['Int']>
  phantom_in?: InputMaybe<Array<Scalars['Int']>>
  phantom_lt?: InputMaybe<Scalars['Int']>
  phantom_lte?: InputMaybe<Scalars['Int']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type FundingRequestDestinationConnection = {
  edges: Array<FundingRequestDestinationEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type FundingRequestDestinationEdge = {
  cursor: Scalars['String']
  node: FundingRequestDestination
}

export type FundingRequestDestinationsListWhereUniqueInput = {
  id: Scalars['ID']
}

export enum FundingRequestDestinationsListOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  PhantomAsc = 'phantom_ASC',
  PhantomDesc = 'phantom_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type FundingRequestDestinationsListConnection = {
  edges: Array<FundingRequestDestinationsListEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type FundingRequestDestinationsListEdge = {
  cursor: Scalars['String']
  node: FundingRequestDestinationsList
}

export enum GeoCoordinatesOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  LatitudeAsc = 'latitude_ASC',
  LatitudeDesc = 'latitude_DESC',
  LongitudeAsc = 'longitude_ASC',
  LongitudeDesc = 'longitude_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type GeoCoordinatesWhereUniqueInput = {
  id: Scalars['ID']
}

export type GeoCoordinatesConnection = {
  edges: Array<GeoCoordinatesEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type GeoCoordinatesEdge = {
  cursor: Scalars['String']
  node: GeoCoordinates
}

export type ChannelWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ChannelCategoryOrderByInput {
  ActiveVideosCounterAsc = 'activeVideosCounter_ASC',
  ActiveVideosCounterDesc = 'activeVideosCounter_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelCategoriesByNameFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: ChannelCategoriesByNameSearchResult
  rank: Scalars['Float']
}

export type ChannelCategoriesByNameSearchResult = ChannelCategory

export type ChannelCategoryConnection = {
  edges: Array<ChannelCategoryEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelCategoryEdge = {
  cursor: Scalars['String']
  node: ChannelCategory
}

export type ChannelCategoryWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ChannelOrderByInput {
  ActiveVideosCounterAsc = 'activeVideosCounter_ASC',
  ActiveVideosCounterDesc = 'activeVideosCounter_DESC',
  AvatarPhotoAsc = 'avatarPhoto_ASC',
  AvatarPhotoDesc = 'avatarPhoto_DESC',
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CoverPhotoAsc = 'coverPhoto_ASC',
  CoverPhotoDesc = 'coverPhoto_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  IsCensoredAsc = 'isCensored_ASC',
  IsCensoredDesc = 'isCensored_DESC',
  IsPublicAsc = 'isPublic_ASC',
  IsPublicDesc = 'isPublic_DESC',
  LanguageAsc = 'language_ASC',
  LanguageDesc = 'language_DESC',
  OwnerCuratorGroupAsc = 'ownerCuratorGroup_ASC',
  OwnerCuratorGroupDesc = 'ownerCuratorGroup_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ChannelConnection = {
  edges: Array<ChannelEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ChannelEdge = {
  cursor: Scalars['String']
  node: Channel
}

export type InitialInvitationBalanceUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type InitialInvitationBalanceUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New initial invitation balance. */
    newInitialBalance: Scalars['BigInt']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum InitialInvitationBalanceUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewInitialBalanceAsc = 'newInitialBalance_ASC',
  NewInitialBalanceDesc = 'newInitialBalance_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type InitialInvitationBalanceUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<InitialInvitationBalanceUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newInitialBalance_eq?: InputMaybe<Scalars['BigInt']>
  newInitialBalance_gt?: InputMaybe<Scalars['BigInt']>
  newInitialBalance_gte?: InputMaybe<Scalars['BigInt']>
  newInitialBalance_in?: InputMaybe<Array<Scalars['BigInt']>>
  newInitialBalance_lt?: InputMaybe<Scalars['BigInt']>
  newInitialBalance_lte?: InputMaybe<Scalars['BigInt']>
  OR?: InputMaybe<Array<InitialInvitationBalanceUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type InitialInvitationBalanceUpdatedEventConnection = {
  edges: Array<InitialInvitationBalanceUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type InitialInvitationBalanceUpdatedEventEdge = {
  cursor: Scalars['String']
  node: InitialInvitationBalanceUpdatedEvent
}

export type InitialInvitationCountUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type InitialInvitationCountUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New initial invitation count for members. */
    newInitialInvitationCount: Scalars['Int']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum InitialInvitationCountUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewInitialInvitationCountAsc = 'newInitialInvitationCount_ASC',
  NewInitialInvitationCountDesc = 'newInitialInvitationCount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type InitialInvitationCountUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<InitialInvitationCountUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newInitialInvitationCount_eq?: InputMaybe<Scalars['Int']>
  newInitialInvitationCount_gt?: InputMaybe<Scalars['Int']>
  newInitialInvitationCount_gte?: InputMaybe<Scalars['Int']>
  newInitialInvitationCount_in?: InputMaybe<Array<Scalars['Int']>>
  newInitialInvitationCount_lt?: InputMaybe<Scalars['Int']>
  newInitialInvitationCount_lte?: InputMaybe<Scalars['Int']>
  OR?: InputMaybe<Array<InitialInvitationCountUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type InitialInvitationCountUpdatedEventConnection = {
  edges: Array<InitialInvitationCountUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type InitialInvitationCountUpdatedEventEdge = {
  cursor: Scalars['String']
  node: InitialInvitationCountUpdatedEvent
}

export type InvitesTransferredEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum InvitesTransferredEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NumberOfInvitesAsc = 'numberOfInvites_ASC',
  NumberOfInvitesDesc = 'numberOfInvites_DESC',
  SourceMemberAsc = 'sourceMember_ASC',
  SourceMemberDesc = 'sourceMember_DESC',
  TargetMemberAsc = 'targetMember_ASC',
  TargetMemberDesc = 'targetMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type InvitesTransferredEventConnection = {
  edges: Array<InvitesTransferredEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type InvitesTransferredEventEdge = {
  cursor: Scalars['String']
  node: InvitesTransferredEvent
}

export type LanguageWhereUniqueInput = {
  id: Scalars['ID']
}

export enum LanguageOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  IsoAsc = 'iso_ASC',
  IsoDesc = 'iso_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type LanguageConnection = {
  edges: Array<LanguageEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LanguageEdge = {
  cursor: Scalars['String']
  node: Language
}

export type LeaderInvitationQuotaUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type LeaderInvitationQuotaUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New quota. */
    newInvitationQuota: Scalars['Int']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum LeaderInvitationQuotaUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewInvitationQuotaAsc = 'newInvitationQuota_ASC',
  NewInvitationQuotaDesc = 'newInvitationQuota_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type LeaderInvitationQuotaUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<LeaderInvitationQuotaUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newInvitationQuota_eq?: InputMaybe<Scalars['Int']>
  newInvitationQuota_gt?: InputMaybe<Scalars['Int']>
  newInvitationQuota_gte?: InputMaybe<Scalars['Int']>
  newInvitationQuota_in?: InputMaybe<Array<Scalars['Int']>>
  newInvitationQuota_lt?: InputMaybe<Scalars['Int']>
  newInvitationQuota_lte?: InputMaybe<Scalars['Int']>
  OR?: InputMaybe<Array<LeaderInvitationQuotaUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type LeaderInvitationQuotaUpdatedEventConnection = {
  edges: Array<LeaderInvitationQuotaUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LeaderInvitationQuotaUpdatedEventEdge = {
  cursor: Scalars['String']
  node: LeaderInvitationQuotaUpdatedEvent
}

export type LeaderSetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum LeaderSetEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type LeaderSetEventConnection = {
  edges: Array<LeaderSetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LeaderSetEventEdge = {
  cursor: Scalars['String']
  node: LeaderSetEvent
}

export type LeaderUnsetEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum LeaderUnsetEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  LeaderAsc = 'leader_ASC',
  LeaderDesc = 'leader_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type LeaderUnsetEventConnection = {
  edges: Array<LeaderUnsetEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LeaderUnsetEventEdge = {
  cursor: Scalars['String']
  node: LeaderUnsetEvent
}

export type LicenseWhereUniqueInput = {
  id: Scalars['ID']
}

export enum LicenseOrderByInput {
  AttributionAsc = 'attribution_ASC',
  AttributionDesc = 'attribution_DESC',
  CodeAsc = 'code_ASC',
  CodeDesc = 'code_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CustomTextAsc = 'customText_ASC',
  CustomTextDesc = 'customText_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type LicenseConnection = {
  edges: Array<LicenseEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type LicenseEdge = {
  cursor: Scalars['String']
  node: License
}

export type MemberAccountsUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum MemberAccountsUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewControllerAccountAsc = 'newControllerAccount_ASC',
  NewControllerAccountDesc = 'newControllerAccount_DESC',
  NewRootAccountAsc = 'newRootAccount_ASC',
  NewRootAccountDesc = 'newRootAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberAccountsUpdatedEventConnection = {
  edges: Array<MemberAccountsUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberAccountsUpdatedEventEdge = {
  cursor: Scalars['String']
  node: MemberAccountsUpdatedEvent
}

export type MemberInvitedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum MemberInvitedEventOrderByInput {
  ControllerAccountAsc = 'controllerAccount_ASC',
  ControllerAccountDesc = 'controllerAccount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  InvitingMemberAsc = 'invitingMember_ASC',
  InvitingMemberDesc = 'invitingMember_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewMemberAsc = 'newMember_ASC',
  NewMemberDesc = 'newMember_DESC',
  RootAccountAsc = 'rootAccount_ASC',
  RootAccountDesc = 'rootAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberInvitedEventConnection = {
  edges: Array<MemberInvitedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberInvitedEventEdge = {
  cursor: Scalars['String']
  node: MemberInvitedEvent
}

export enum MemberMetadataOrderByInput {
  AboutAsc = 'about_ASC',
  AboutDesc = 'about_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type MemberMetadataConnection = {
  edges: Array<MemberMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberMetadataEdge = {
  cursor: Scalars['String']
  node: MemberMetadata
}

export type MemberProfileUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum MemberProfileUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewHandleAsc = 'newHandle_ASC',
  NewHandleDesc = 'newHandle_DESC',
  NewMetadataAsc = 'newMetadata_ASC',
  NewMetadataDesc = 'newMetadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MemberProfileUpdatedEventConnection = {
  edges: Array<MemberProfileUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberProfileUpdatedEventEdge = {
  cursor: Scalars['String']
  node: MemberProfileUpdatedEvent
}

export type MembersByHandleFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: MembersByHandleSearchResult
  rank: Scalars['Float']
}

export type MembersByHandleSearchResult = Membership

export type MembershipBoughtEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum MembershipBoughtEventOrderByInput {
  ControllerAccountAsc = 'controllerAccount_ASC',
  ControllerAccountDesc = 'controllerAccount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewMemberAsc = 'newMember_ASC',
  NewMemberDesc = 'newMember_DESC',
  ReferrerAsc = 'referrer_ASC',
  ReferrerDesc = 'referrer_DESC',
  RootAccountAsc = 'rootAccount_ASC',
  RootAccountDesc = 'rootAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MembershipBoughtEventConnection = {
  edges: Array<MembershipBoughtEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipBoughtEventEdge = {
  cursor: Scalars['String']
  node: MembershipBoughtEvent
}

export type MembershipWhereUniqueInput = {
  handle?: InputMaybe<Scalars['String']>
  id?: InputMaybe<Scalars['ID']>
}

export type MembershipPriceUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type MembershipPriceUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** The new membership price. */
    newPrice: Scalars['BigInt']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum MembershipPriceUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewPriceAsc = 'newPrice_ASC',
  NewPriceDesc = 'newPrice_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MembershipPriceUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<MembershipPriceUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newPrice_eq?: InputMaybe<Scalars['BigInt']>
  newPrice_gt?: InputMaybe<Scalars['BigInt']>
  newPrice_gte?: InputMaybe<Scalars['BigInt']>
  newPrice_in?: InputMaybe<Array<Scalars['BigInt']>>
  newPrice_lt?: InputMaybe<Scalars['BigInt']>
  newPrice_lte?: InputMaybe<Scalars['BigInt']>
  OR?: InputMaybe<Array<MembershipPriceUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type MembershipPriceUpdatedEventConnection = {
  edges: Array<MembershipPriceUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipPriceUpdatedEventEdge = {
  cursor: Scalars['String']
  node: MembershipPriceUpdatedEvent
}

export enum MembershipOrderByInput {
  ControllerAccountAsc = 'controllerAccount_ASC',
  ControllerAccountDesc = 'controllerAccount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  HandleAsc = 'handle_ASC',
  HandleDesc = 'handle_DESC',
  InviteCountAsc = 'inviteCount_ASC',
  InviteCountDesc = 'inviteCount_DESC',
  InvitedByAsc = 'invitedBy_ASC',
  InvitedByDesc = 'invitedBy_DESC',
  IsCouncilMemberAsc = 'isCouncilMember_ASC',
  IsCouncilMemberDesc = 'isCouncilMember_DESC',
  IsFoundingMemberAsc = 'isFoundingMember_ASC',
  IsFoundingMemberDesc = 'isFoundingMember_DESC',
  IsVerifiedAsc = 'isVerified_ASC',
  IsVerifiedDesc = 'isVerified_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  ReferredByAsc = 'referredBy_ASC',
  ReferredByDesc = 'referredBy_DESC',
  RootAccountAsc = 'rootAccount_ASC',
  RootAccountDesc = 'rootAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MembershipConnection = {
  edges: Array<MembershipEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipEdge = {
  cursor: Scalars['String']
  node: Membership
}

export type MembershipSystemSnapshotWhereUniqueInput = {
  id: Scalars['ID']
}

export type MembershipSystemSnapshot = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  /** Initial invitation count of a new member. */
  defaultInviteCount: Scalars['Int']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** The initial, locked, balance credited to controller account of invitee. */
  invitedInitialBalance: Scalars['BigInt']
  /** Current price to buy a membership. */
  membershipPrice: Scalars['BigInt']
  /** Percentage of tokens diverted to invitor. */
  referralCut: Scalars['Int']
  /** The snapshot block number */
  snapshotBlock: Scalars['Int']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export enum MembershipSystemSnapshotOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DefaultInviteCountAsc = 'defaultInviteCount_ASC',
  DefaultInviteCountDesc = 'defaultInviteCount_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InvitedInitialBalanceAsc = 'invitedInitialBalance_ASC',
  InvitedInitialBalanceDesc = 'invitedInitialBalance_DESC',
  MembershipPriceAsc = 'membershipPrice_ASC',
  MembershipPriceDesc = 'membershipPrice_DESC',
  ReferralCutAsc = 'referralCut_ASC',
  ReferralCutDesc = 'referralCut_DESC',
  SnapshotBlockAsc = 'snapshotBlock_ASC',
  SnapshotBlockDesc = 'snapshotBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type MembershipSystemSnapshotWhereInput = {
  AND?: InputMaybe<Array<MembershipSystemSnapshotWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  defaultInviteCount_eq?: InputMaybe<Scalars['Int']>
  defaultInviteCount_gt?: InputMaybe<Scalars['Int']>
  defaultInviteCount_gte?: InputMaybe<Scalars['Int']>
  defaultInviteCount_in?: InputMaybe<Array<Scalars['Int']>>
  defaultInviteCount_lt?: InputMaybe<Scalars['Int']>
  defaultInviteCount_lte?: InputMaybe<Scalars['Int']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  invitedInitialBalance_eq?: InputMaybe<Scalars['BigInt']>
  invitedInitialBalance_gt?: InputMaybe<Scalars['BigInt']>
  invitedInitialBalance_gte?: InputMaybe<Scalars['BigInt']>
  invitedInitialBalance_in?: InputMaybe<Array<Scalars['BigInt']>>
  invitedInitialBalance_lt?: InputMaybe<Scalars['BigInt']>
  invitedInitialBalance_lte?: InputMaybe<Scalars['BigInt']>
  membershipPrice_eq?: InputMaybe<Scalars['BigInt']>
  membershipPrice_gt?: InputMaybe<Scalars['BigInt']>
  membershipPrice_gte?: InputMaybe<Scalars['BigInt']>
  membershipPrice_in?: InputMaybe<Array<Scalars['BigInt']>>
  membershipPrice_lt?: InputMaybe<Scalars['BigInt']>
  membershipPrice_lte?: InputMaybe<Scalars['BigInt']>
  OR?: InputMaybe<Array<MembershipSystemSnapshotWhereInput>>
  referralCut_eq?: InputMaybe<Scalars['Int']>
  referralCut_gt?: InputMaybe<Scalars['Int']>
  referralCut_gte?: InputMaybe<Scalars['Int']>
  referralCut_in?: InputMaybe<Array<Scalars['Int']>>
  referralCut_lt?: InputMaybe<Scalars['Int']>
  referralCut_lte?: InputMaybe<Scalars['Int']>
  snapshotBlock_eq?: InputMaybe<Scalars['Int']>
  snapshotBlock_gt?: InputMaybe<Scalars['Int']>
  snapshotBlock_gte?: InputMaybe<Scalars['Int']>
  snapshotBlock_in?: InputMaybe<Array<Scalars['Int']>>
  snapshotBlock_lt?: InputMaybe<Scalars['Int']>
  snapshotBlock_lte?: InputMaybe<Scalars['Int']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type MembershipSystemSnapshotConnection = {
  edges: Array<MembershipSystemSnapshotEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MembershipSystemSnapshotEdge = {
  cursor: Scalars['String']
  node: MembershipSystemSnapshot
}

export type MemberVerificationStatusUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum MemberVerificationStatusUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IsVerifiedAsc = 'isVerified_ASC',
  IsVerifiedDesc = 'isVerified_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type MemberVerificationStatusUpdatedEventConnection = {
  edges: Array<MemberVerificationStatusUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type MemberVerificationStatusUpdatedEventEdge = {
  cursor: Scalars['String']
  node: MemberVerificationStatusUpdatedEvent
}

export type NewCandidateEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum NewCandidateEventOrderByInput {
  BalanceAsc = 'balance_ASC',
  BalanceDesc = 'balance_DESC',
  CandidateAsc = 'candidate_ASC',
  CandidateDesc = 'candidate_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  StakingAccountAsc = 'stakingAccount_ASC',
  StakingAccountDesc = 'stakingAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NewCandidateEventConnection = {
  edges: Array<NewCandidateEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NewCandidateEventEdge = {
  cursor: Scalars['String']
  node: NewCandidateEvent
}

export type NewCouncilElectedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum NewCouncilElectedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectedCouncilAsc = 'electedCouncil_ASC',
  ElectedCouncilDesc = 'electedCouncil_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NewCouncilElectedEventConnection = {
  edges: Array<NewCouncilElectedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NewCouncilElectedEventEdge = {
  cursor: Scalars['String']
  node: NewCouncilElectedEvent
}

export type NewCouncilNotElectedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NewCouncilNotElectedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum NewCouncilNotElectedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NewCouncilNotElectedEventWhereInput = {
  AND?: InputMaybe<Array<NewCouncilNotElectedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<NewCouncilNotElectedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type NewCouncilNotElectedEventConnection = {
  edges: Array<NewCouncilNotElectedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NewCouncilNotElectedEventEdge = {
  cursor: Scalars['String']
  node: NewCouncilNotElectedEvent
}

export type NewMissedRewardLevelReachedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum NewMissedRewardLevelReachedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewMissedRewardAmountAsc = 'newMissedRewardAmount_ASC',
  NewMissedRewardAmountDesc = 'newMissedRewardAmount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type NewMissedRewardLevelReachedEventConnection = {
  edges: Array<NewMissedRewardLevelReachedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NewMissedRewardLevelReachedEventEdge = {
  cursor: Scalars['String']
  node: NewMissedRewardLevelReachedEvent
}

export type NftBoughtEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum NftBoughtEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type NftBoughtEventConnection = {
  edges: Array<NftBoughtEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NftBoughtEventEdge = {
  cursor: Scalars['String']
  node: NftBoughtEvent
}

export type NftIssuedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum NftIssuedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewOwnerAsc = 'newOwner_ASC',
  NewOwnerDesc = 'newOwner_DESC',
  RoyaltyAsc = 'royalty_ASC',
  RoyaltyDesc = 'royalty_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type NftIssuedEventConnection = {
  edges: Array<NftIssuedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NftIssuedEventEdge = {
  cursor: Scalars['String']
  node: NftIssuedEvent
}

export type NftSellOrderMadeEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum NftSellOrderMadeEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type NftSellOrderMadeEventConnection = {
  edges: Array<NftSellOrderMadeEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NftSellOrderMadeEventEdge = {
  cursor: Scalars['String']
  node: NftSellOrderMadeEvent
}

export enum NodeLocationMetadataOrderByInput {
  CityAsc = 'city_ASC',
  CityDesc = 'city_DESC',
  CoordinatesAsc = 'coordinates_ASC',
  CoordinatesDesc = 'coordinates_DESC',
  CountryCodeAsc = 'countryCode_ASC',
  CountryCodeDesc = 'countryCode_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NodeLocationMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type NodeLocationMetadataConnection = {
  edges: Array<NodeLocationMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NodeLocationMetadataEdge = {
  cursor: Scalars['String']
  node: NodeLocationMetadata
}

export type NotEnoughCandidatesEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type NotEnoughCandidatesEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum NotEnoughCandidatesEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type NotEnoughCandidatesEventWhereInput = {
  AND?: InputMaybe<Array<NotEnoughCandidatesEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<NotEnoughCandidatesEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type NotEnoughCandidatesEventConnection = {
  edges: Array<NotEnoughCandidatesEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type NotEnoughCandidatesEventEdge = {
  cursor: Scalars['String']
  node: NotEnoughCandidatesEvent
}

export type OfferAcceptedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum OfferAcceptedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type OfferAcceptedEventConnection = {
  edges: Array<OfferAcceptedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OfferAcceptedEventEdge = {
  cursor: Scalars['String']
  node: OfferAcceptedEvent
}

export type OfferCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum OfferCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type OfferCanceledEventConnection = {
  edges: Array<OfferCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OfferCanceledEventEdge = {
  cursor: Scalars['String']
  node: OfferCanceledEvent
}

export type OfferStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum OfferStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PriceAsc = 'price_ASC',
  PriceDesc = 'price_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type OfferStartedEventConnection = {
  edges: Array<OfferStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OfferStartedEventEdge = {
  cursor: Scalars['String']
  node: OfferStartedEvent
}

export type OpenAuctionBidAcceptedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum OpenAuctionBidAcceptedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VideoAsc = 'video_ASC',
  VideoDesc = 'video_DESC',
}

export type OpenAuctionBidAcceptedEventConnection = {
  edges: Array<OpenAuctionBidAcceptedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OpenAuctionBidAcceptedEventEdge = {
  cursor: Scalars['String']
  node: OpenAuctionBidAcceptedEvent
}

export type OpeningAddedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum OpeningAddedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type OpeningAddedEventConnection = {
  edges: Array<OpeningAddedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OpeningAddedEventEdge = {
  cursor: Scalars['String']
  node: OpeningAddedEvent
}

export type OpeningCanceledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum OpeningCanceledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type OpeningCanceledEventConnection = {
  edges: Array<OpeningCanceledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OpeningCanceledEventEdge = {
  cursor: Scalars['String']
  node: OpeningCanceledEvent
}

export type OpeningFilledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum OpeningFilledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type OpeningFilledEventConnection = {
  edges: Array<OpeningFilledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OpeningFilledEventEdge = {
  cursor: Scalars['String']
  node: OpeningFilledEvent
}

export type OwnedNftWhereUniqueInput = {
  id: Scalars['ID']
}

export enum OwnedNftOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatorRoyaltyAsc = 'creatorRoyalty_ASC',
  CreatorRoyaltyDesc = 'creatorRoyalty_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  OwnerMemberAsc = 'ownerMember_ASC',
  OwnerMemberDesc = 'ownerMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type OwnedNftConnection = {
  edges: Array<OwnedNftEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type OwnedNftEdge = {
  cursor: Scalars['String']
  node: OwnedNft
}

export type PostAddedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum PostAddedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  IsEditableAsc = 'isEditable_ASC',
  IsEditableDesc = 'isEditable_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type PostAddedEventConnection = {
  edges: Array<PostAddedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PostAddedEventEdge = {
  cursor: Scalars['String']
  node: PostAddedEvent
}

export type PostDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum PostDeletedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type PostDeletedEventConnection = {
  edges: Array<PostDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PostDeletedEventEdge = {
  cursor: Scalars['String']
  node: PostDeletedEvent
}

export type PostModeratedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum PostModeratedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type PostModeratedEventConnection = {
  edges: Array<PostModeratedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PostModeratedEventEdge = {
  cursor: Scalars['String']
  node: PostModeratedEvent
}

export type PostReactedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum PostReactedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  ReactingMemberAsc = 'reactingMember_ASC',
  ReactingMemberDesc = 'reactingMember_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type PostReactedEventConnection = {
  edges: Array<PostReactedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PostReactedEventEdge = {
  cursor: Scalars['String']
  node: PostReactedEvent
}

export type PostsByTextFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: PostsByTextSearchResult
  rank: Scalars['Float']
}

export type PostsByTextSearchResult = ForumPost

export type PostTextUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum PostTextUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewTextAsc = 'newText_ASC',
  NewTextDesc = 'newText_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type PostTextUpdatedEventConnection = {
  edges: Array<PostTextUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type PostTextUpdatedEventEdge = {
  cursor: Scalars['String']
  node: PostTextUpdatedEvent
}

export type ProposalWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalCancelledEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalCancelledEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalCancelledEventConnection = {
  edges: Array<ProposalCancelledEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalCancelledEventEdge = {
  cursor: Scalars['String']
  node: ProposalCancelledEvent
}

export type ProposalCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalCreatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalCreatedEventConnection = {
  edges: Array<ProposalCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalCreatedEventEdge = {
  cursor: Scalars['String']
  node: ProposalCreatedEvent
}

export type ProposalDecisionMadeEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalDecisionMadeEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDecisionMadeEventConnection = {
  edges: Array<ProposalDecisionMadeEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDecisionMadeEventEdge = {
  cursor: Scalars['String']
  node: ProposalDecisionMadeEvent
}

export type ProposalDiscussionPostWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDiscussionPostCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalDiscussionPostCreatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionPostCreatedEventConnection = {
  edges: Array<ProposalDiscussionPostCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionPostCreatedEventEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionPostCreatedEvent
}

export type ProposalDiscussionPostDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalDiscussionPostDeletedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionPostDeletedEventConnection = {
  edges: Array<ProposalDiscussionPostDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionPostDeletedEventEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionPostDeletedEvent
}

export enum ProposalDiscussionPostOrderByInput {
  AuthorAsc = 'author_ASC',
  AuthorDesc = 'author_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DiscussionThreadAsc = 'discussionThread_ASC',
  DiscussionThreadDesc = 'discussionThread_DESC',
  IsVisibleAsc = 'isVisible_ASC',
  IsVisibleDesc = 'isVisible_DESC',
  RepliesToAsc = 'repliesTo_ASC',
  RepliesToDesc = 'repliesTo_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionPostConnection = {
  edges: Array<ProposalDiscussionPostEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionPostEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionPost
}

export type ProposalDiscussionPostUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalDiscussionPostUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PostAsc = 'post_ASC',
  PostDesc = 'post_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionPostUpdatedEventConnection = {
  edges: Array<ProposalDiscussionPostUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionPostUpdatedEventEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionPostUpdatedEvent
}

export type ProposalDiscussionThreadWhereUniqueInput = {
  id: Scalars['ID']
}

export type ProposalDiscussionThreadModeChangedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalDiscussionThreadModeChangedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionThreadModeChangedEventConnection = {
  edges: Array<ProposalDiscussionThreadModeChangedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionThreadModeChangedEventEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionThreadModeChangedEvent
}

export enum ProposalDiscussionThreadOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionThreadConnection = {
  edges: Array<ProposalDiscussionThreadEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionThreadEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionThread
}

export type ProposalDiscussionWhitelistWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalDiscussionWhitelistOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  PhantomAsc = 'phantom_ASC',
  PhantomDesc = 'phantom_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalDiscussionWhitelistConnection = {
  edges: Array<ProposalDiscussionWhitelistEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalDiscussionWhitelistEdge = {
  cursor: Scalars['String']
  node: ProposalDiscussionWhitelist
}

export type ProposalExecutedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalExecutedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalExecutedEventConnection = {
  edges: Array<ProposalExecutedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalExecutedEventEdge = {
  cursor: Scalars['String']
  node: ProposalExecutedEvent
}

export enum ProposalOrderByInput {
  CouncilApprovalsAsc = 'councilApprovals_ASC',
  CouncilApprovalsDesc = 'councilApprovals_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatorAsc = 'creator_ASC',
  CreatorDesc = 'creator_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ExactExecutionBlockAsc = 'exactExecutionBlock_ASC',
  ExactExecutionBlockDesc = 'exactExecutionBlock_DESC',
  IsFinalizedAsc = 'isFinalized_ASC',
  IsFinalizedDesc = 'isFinalized_DESC',
  StakingAccountAsc = 'stakingAccount_ASC',
  StakingAccountDesc = 'stakingAccount_DESC',
  StatusSetAtBlockAsc = 'statusSetAtBlock_ASC',
  StatusSetAtBlockDesc = 'statusSetAtBlock_DESC',
  StatusSetAtTimeAsc = 'statusSetAtTime_ASC',
  StatusSetAtTimeDesc = 'statusSetAtTime_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalsByTitleFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: ProposalsByTitleSearchResult
  rank: Scalars['Float']
}

export type ProposalsByTitleSearchResult = Proposal

export type ProposalConnection = {
  edges: Array<ProposalEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalEdge = {
  cursor: Scalars['String']
  node: Proposal
}

export type ProposalStatusUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalStatusUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ProposalStatusUpdatedEventConnection = {
  edges: Array<ProposalStatusUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalStatusUpdatedEventEdge = {
  cursor: Scalars['String']
  node: ProposalStatusUpdatedEvent
}

export type ProposalVotedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ProposalVotedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ProposalAsc = 'proposal_ASC',
  ProposalDesc = 'proposal_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VoteKindAsc = 'voteKind_ASC',
  VoteKindDesc = 'voteKind_DESC',
  VoterAsc = 'voter_ASC',
  VoterDesc = 'voter_DESC',
  VotingRoundAsc = 'votingRound_ASC',
  VotingRoundDesc = 'votingRound_DESC',
}

export type ProposalVotedEventConnection = {
  edges: Array<ProposalVotedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ProposalVotedEventEdge = {
  cursor: Scalars['String']
  node: ProposalVotedEvent
}

export type ReferendumFinishedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ReferendumFinishedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum ReferendumFinishedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ReferendumFinishedEventWhereInput = {
  AND?: InputMaybe<Array<ReferendumFinishedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ReferendumFinishedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ReferendumFinishedEventConnection = {
  edges: Array<ReferendumFinishedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumFinishedEventEdge = {
  cursor: Scalars['String']
  node: ReferendumFinishedEvent
}

export type ReferendumStageRevealingWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ReferendumStageRevealingOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectionRoundAsc = 'electionRound_ASC',
  ElectionRoundDesc = 'electionRound_DESC',
  StartedAtBlockAsc = 'startedAtBlock_ASC',
  StartedAtBlockDesc = 'startedAtBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningTargetCountAsc = 'winningTargetCount_ASC',
  WinningTargetCountDesc = 'winningTargetCount_DESC',
}

export type ReferendumStageRevealingConnection = {
  edges: Array<ReferendumStageRevealingEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumStageRevealingEdge = {
  cursor: Scalars['String']
  node: ReferendumStageRevealing
}

export type ReferendumStageVotingWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ReferendumStageVotingOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ElectionRoundAsc = 'electionRound_ASC',
  ElectionRoundDesc = 'electionRound_DESC',
  StartedAtBlockAsc = 'startedAtBlock_ASC',
  StartedAtBlockDesc = 'startedAtBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningTargetCountAsc = 'winningTargetCount_ASC',
  WinningTargetCountDesc = 'winningTargetCount_DESC',
}

export type ReferendumStageVotingConnection = {
  edges: Array<ReferendumStageVotingEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumStageVotingEdge = {
  cursor: Scalars['String']
  node: ReferendumStageVoting
}

export type ReferendumStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ReferendumStartedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    /** Amount of winning referendum options. */
    winningTargetCount: Scalars['BigInt']
  }

export enum ReferendumStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningTargetCountAsc = 'winningTargetCount_ASC',
  WinningTargetCountDesc = 'winningTargetCount_DESC',
}

export type ReferendumStartedEventWhereInput = {
  AND?: InputMaybe<Array<ReferendumStartedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ReferendumStartedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  winningTargetCount_eq?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_gt?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_gte?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_in?: InputMaybe<Array<Scalars['BigInt']>>
  winningTargetCount_lt?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_lte?: InputMaybe<Scalars['BigInt']>
}

export type ReferendumStartedEventConnection = {
  edges: Array<ReferendumStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumStartedEventEdge = {
  cursor: Scalars['String']
  node: ReferendumStartedEvent
}

export type ReferendumStartedForcefullyEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ReferendumStartedForcefullyEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
    /** Amount of winning referendum options. */
    winningTargetCount: Scalars['BigInt']
  }

export enum ReferendumStartedForcefullyEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WinningTargetCountAsc = 'winningTargetCount_ASC',
  WinningTargetCountDesc = 'winningTargetCount_DESC',
}

export type ReferendumStartedForcefullyEventWhereInput = {
  AND?: InputMaybe<Array<ReferendumStartedForcefullyEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<ReferendumStartedForcefullyEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  winningTargetCount_eq?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_gt?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_gte?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_in?: InputMaybe<Array<Scalars['BigInt']>>
  winningTargetCount_lt?: InputMaybe<Scalars['BigInt']>
  winningTargetCount_lte?: InputMaybe<Scalars['BigInt']>
}

export type ReferendumStartedForcefullyEventConnection = {
  edges: Array<ReferendumStartedForcefullyEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferendumStartedForcefullyEventEdge = {
  cursor: Scalars['String']
  node: ReferendumStartedForcefullyEvent
}

export type ReferralCutUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ReferralCutUpdatedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** New cut value. */
    newValue: Scalars['Int']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum ReferralCutUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewValueAsc = 'newValue_ASC',
  NewValueDesc = 'newValue_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ReferralCutUpdatedEventWhereInput = {
  AND?: InputMaybe<Array<ReferralCutUpdatedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  newValue_eq?: InputMaybe<Scalars['Int']>
  newValue_gt?: InputMaybe<Scalars['Int']>
  newValue_gte?: InputMaybe<Scalars['Int']>
  newValue_in?: InputMaybe<Array<Scalars['Int']>>
  newValue_lt?: InputMaybe<Scalars['Int']>
  newValue_lte?: InputMaybe<Scalars['Int']>
  OR?: InputMaybe<Array<ReferralCutUpdatedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type ReferralCutUpdatedEventConnection = {
  edges: Array<ReferralCutUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ReferralCutUpdatedEventEdge = {
  cursor: Scalars['String']
  node: ReferralCutUpdatedEvent
}

export type RequestFundedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type RequestFundedEvent = BaseGraphQlObject &
  Event & {
    /** Target account. */
    account: Scalars['String']
    /** Funding amount. */
    amount: Scalars['BigInt']
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum RequestFundedEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type RequestFundedEventWhereInput = {
  account_contains?: InputMaybe<Scalars['String']>
  account_endsWith?: InputMaybe<Scalars['String']>
  account_eq?: InputMaybe<Scalars['String']>
  account_in?: InputMaybe<Array<Scalars['String']>>
  account_startsWith?: InputMaybe<Scalars['String']>
  amount_eq?: InputMaybe<Scalars['BigInt']>
  amount_gt?: InputMaybe<Scalars['BigInt']>
  amount_gte?: InputMaybe<Scalars['BigInt']>
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>
  amount_lt?: InputMaybe<Scalars['BigInt']>
  amount_lte?: InputMaybe<Scalars['BigInt']>
  AND?: InputMaybe<Array<RequestFundedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<RequestFundedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type RequestFundedEventConnection = {
  edges: Array<RequestFundedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RequestFundedEventEdge = {
  cursor: Scalars['String']
  node: RequestFundedEvent
}

export type RevealingStageStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type RevealingStageStartedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum RevealingStageStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type RevealingStageStartedEventWhereInput = {
  AND?: InputMaybe<Array<RevealingStageStartedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<RevealingStageStartedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type RevealingStageStartedEventConnection = {
  edges: Array<RevealingStageStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RevealingStageStartedEventEdge = {
  cursor: Scalars['String']
  node: RevealingStageStartedEvent
}

export type RewardPaidEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum RewardPaidEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PaymentTypeAsc = 'paymentType_ASC',
  PaymentTypeDesc = 'paymentType_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type RewardPaidEventConnection = {
  edges: Array<RewardPaidEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RewardPaidEventEdge = {
  cursor: Scalars['String']
  node: RewardPaidEvent
}

export type RewardPaymentEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum RewardPaymentEventOrderByInput {
  CouncilMemberAsc = 'councilMember_ASC',
  CouncilMemberDesc = 'councilMember_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MissingBalanceAsc = 'missingBalance_ASC',
  MissingBalanceDesc = 'missingBalance_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PaidBalanceAsc = 'paidBalance_ASC',
  PaidBalanceDesc = 'paidBalance_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type RewardPaymentEventConnection = {
  edges: Array<RewardPaymentEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RewardPaymentEventEdge = {
  cursor: Scalars['String']
  node: RewardPaymentEvent
}

export type RuntimeWasmBytecodeWhereUniqueInput = {
  id: Scalars['ID']
}

export enum RuntimeWasmBytecodeOrderByInput {
  BytecodeAsc = 'bytecode_ASC',
  BytecodeDesc = 'bytecode_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type RuntimeWasmBytecodeWhereInput = {
  AND?: InputMaybe<Array<RuntimeWasmBytecodeWhereInput>>
  bytecode_eq?: InputMaybe<Scalars['Bytes']>
  bytecode_in?: InputMaybe<Array<Scalars['Bytes']>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<RuntimeWasmBytecodeWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type RuntimeWasmBytecodeConnection = {
  edges: Array<RuntimeWasmBytecodeEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type RuntimeWasmBytecodeEdge = {
  cursor: Scalars['String']
  node: RuntimeWasmBytecode
}

export type SearchFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: SearchSearchResult
  rank: Scalars['Float']
}

export type SearchSearchResult = Channel | Video

export type StakeDecreasedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StakeDecreasedEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type StakeDecreasedEventConnection = {
  edges: Array<StakeDecreasedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakeDecreasedEventEdge = {
  cursor: Scalars['String']
  node: StakeDecreasedEvent
}

export type StakeIncreasedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StakeIncreasedEventOrderByInput {
  AmountAsc = 'amount_ASC',
  AmountDesc = 'amount_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type StakeIncreasedEventConnection = {
  edges: Array<StakeIncreasedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakeIncreasedEventEdge = {
  cursor: Scalars['String']
  node: StakeIncreasedEvent
}

export type StakeReleasedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type StakeReleasedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Account used to stake the value. */
    stakingAccount: Scalars['String']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum StakeReleasedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  StakingAccountAsc = 'stakingAccount_ASC',
  StakingAccountDesc = 'stakingAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StakeReleasedEventWhereInput = {
  AND?: InputMaybe<Array<StakeReleasedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  OR?: InputMaybe<Array<StakeReleasedEventWhereInput>>
  stakingAccount_contains?: InputMaybe<Scalars['String']>
  stakingAccount_endsWith?: InputMaybe<Scalars['String']>
  stakingAccount_eq?: InputMaybe<Scalars['String']>
  stakingAccount_in?: InputMaybe<Array<Scalars['String']>>
  stakingAccount_startsWith?: InputMaybe<Scalars['String']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type StakeReleasedEventConnection = {
  edges: Array<StakeReleasedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakeReleasedEventEdge = {
  cursor: Scalars['String']
  node: StakeReleasedEvent
}

export type StakeSlashedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StakeSlashedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  RequestedAmountAsc = 'requestedAmount_ASC',
  RequestedAmountDesc = 'requestedAmount_DESC',
  SlashedAmountAsc = 'slashedAmount_ASC',
  SlashedAmountDesc = 'slashedAmount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type StakeSlashedEventConnection = {
  edges: Array<StakeSlashedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakeSlashedEventEdge = {
  cursor: Scalars['String']
  node: StakeSlashedEvent
}

export type StakingAccountAddedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StakingAccountAddedEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StakingAccountAddedEventConnection = {
  edges: Array<StakingAccountAddedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakingAccountAddedEventEdge = {
  cursor: Scalars['String']
  node: StakingAccountAddedEvent
}

export type StakingAccountConfirmedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StakingAccountConfirmedEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StakingAccountConfirmedEventConnection = {
  edges: Array<StakingAccountConfirmedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakingAccountConfirmedEventEdge = {
  cursor: Scalars['String']
  node: StakingAccountConfirmedEvent
}

export type StakingAccountRemovedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StakingAccountRemovedEventOrderByInput {
  AccountAsc = 'account_ASC',
  AccountDesc = 'account_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MemberAsc = 'member_ASC',
  MemberDesc = 'member_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StakingAccountRemovedEventConnection = {
  edges: Array<StakingAccountRemovedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StakingAccountRemovedEventEdge = {
  cursor: Scalars['String']
  node: StakingAccountRemovedEvent
}

export type StatusTextChangedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StatusTextChangedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StatusTextChangedEventConnection = {
  edges: Array<StatusTextChangedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StatusTextChangedEventEdge = {
  cursor: Scalars['String']
  node: StatusTextChangedEvent
}

export type StorageBagWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StorageBagOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StorageBagConnection = {
  edges: Array<StorageBagEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StorageBagEdge = {
  cursor: Scalars['String']
  node: StorageBag
}

export type StorageBucketWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StorageBucketOperatorMetadataOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ExtraAsc = 'extra_ASC',
  ExtraDesc = 'extra_DESC',
  NodeEndpointAsc = 'nodeEndpoint_ASC',
  NodeEndpointDesc = 'nodeEndpoint_DESC',
  NodeLocationAsc = 'nodeLocation_ASC',
  NodeLocationDesc = 'nodeLocation_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StorageBucketOperatorMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type StorageBucketOperatorMetadataConnection = {
  edges: Array<StorageBucketOperatorMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StorageBucketOperatorMetadataEdge = {
  cursor: Scalars['String']
  node: StorageBucketOperatorMetadata
}

export enum StorageBucketOrderByInput {
  AcceptingNewBagsAsc = 'acceptingNewBags_ASC',
  AcceptingNewBagsDesc = 'acceptingNewBags_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DataObjectCountLimitAsc = 'dataObjectCountLimit_ASC',
  DataObjectCountLimitDesc = 'dataObjectCountLimit_DESC',
  DataObjectsCountAsc = 'dataObjectsCount_ASC',
  DataObjectsCountDesc = 'dataObjectsCount_DESC',
  DataObjectsSizeAsc = 'dataObjectsSize_ASC',
  DataObjectsSizeDesc = 'dataObjectsSize_DESC',
  DataObjectsSizeLimitAsc = 'dataObjectsSizeLimit_ASC',
  DataObjectsSizeLimitDesc = 'dataObjectsSizeLimit_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  OperatorMetadataAsc = 'operatorMetadata_ASC',
  OperatorMetadataDesc = 'operatorMetadata_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StorageBucketConnection = {
  edges: Array<StorageBucketEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StorageBucketEdge = {
  cursor: Scalars['String']
  node: StorageBucket
}

export type StorageDataObjectWhereUniqueInput = {
  id: Scalars['ID']
}

export enum StorageDataObjectOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DeletionPrizeAsc = 'deletionPrize_ASC',
  DeletionPrizeDesc = 'deletionPrize_DESC',
  IpfsHashAsc = 'ipfsHash_ASC',
  IpfsHashDesc = 'ipfsHash_DESC',
  IsAcceptedAsc = 'isAccepted_ASC',
  IsAcceptedDesc = 'isAccepted_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  StorageBagAsc = 'storageBag_ASC',
  StorageBagDesc = 'storageBag_DESC',
  UnsetAtAsc = 'unsetAt_ASC',
  UnsetAtDesc = 'unsetAt_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type StorageDataObjectConnection = {
  edges: Array<StorageDataObjectEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StorageDataObjectEdge = {
  cursor: Scalars['String']
  node: StorageDataObject
}

export enum StorageSystemParametersOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DataObjectFeePerMbAsc = 'dataObjectFeePerMb_ASC',
  DataObjectFeePerMbDesc = 'dataObjectFeePerMb_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DistributionBucketsPerBagLimitAsc = 'distributionBucketsPerBagLimit_ASC',
  DistributionBucketsPerBagLimitDesc = 'distributionBucketsPerBagLimit_DESC',
  NextDataObjectIdAsc = 'nextDataObjectId_ASC',
  NextDataObjectIdDesc = 'nextDataObjectId_DESC',
  StorageBucketMaxObjectsCountLimitAsc = 'storageBucketMaxObjectsCountLimit_ASC',
  StorageBucketMaxObjectsCountLimitDesc = 'storageBucketMaxObjectsCountLimit_DESC',
  StorageBucketMaxObjectsSizeLimitAsc = 'storageBucketMaxObjectsSizeLimit_ASC',
  StorageBucketMaxObjectsSizeLimitDesc = 'storageBucketMaxObjectsSizeLimit_DESC',
  StorageBucketsPerBagLimitAsc = 'storageBucketsPerBagLimit_ASC',
  StorageBucketsPerBagLimitDesc = 'storageBucketsPerBagLimit_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  UploadingBlockedAsc = 'uploadingBlocked_ASC',
  UploadingBlockedDesc = 'uploadingBlocked_DESC',
}

export type StorageSystemParametersWhereInput = {
  AND?: InputMaybe<Array<StorageSystemParametersWhereInput>>
  blacklist_containsAll?: InputMaybe<Array<Scalars['String']>>
  blacklist_containsAny?: InputMaybe<Array<Scalars['String']>>
  blacklist_containsNone?: InputMaybe<Array<Scalars['String']>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  dataObjectFeePerMb_eq?: InputMaybe<Scalars['BigInt']>
  dataObjectFeePerMb_gt?: InputMaybe<Scalars['BigInt']>
  dataObjectFeePerMb_gte?: InputMaybe<Scalars['BigInt']>
  dataObjectFeePerMb_in?: InputMaybe<Array<Scalars['BigInt']>>
  dataObjectFeePerMb_lt?: InputMaybe<Scalars['BigInt']>
  dataObjectFeePerMb_lte?: InputMaybe<Scalars['BigInt']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  distributionBucketsPerBagLimit_eq?: InputMaybe<Scalars['Int']>
  distributionBucketsPerBagLimit_gt?: InputMaybe<Scalars['Int']>
  distributionBucketsPerBagLimit_gte?: InputMaybe<Scalars['Int']>
  distributionBucketsPerBagLimit_in?: InputMaybe<Array<Scalars['Int']>>
  distributionBucketsPerBagLimit_lt?: InputMaybe<Scalars['Int']>
  distributionBucketsPerBagLimit_lte?: InputMaybe<Scalars['Int']>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  nextDataObjectId_eq?: InputMaybe<Scalars['BigInt']>
  nextDataObjectId_gt?: InputMaybe<Scalars['BigInt']>
  nextDataObjectId_gte?: InputMaybe<Scalars['BigInt']>
  nextDataObjectId_in?: InputMaybe<Array<Scalars['BigInt']>>
  nextDataObjectId_lt?: InputMaybe<Scalars['BigInt']>
  nextDataObjectId_lte?: InputMaybe<Scalars['BigInt']>
  OR?: InputMaybe<Array<StorageSystemParametersWhereInput>>
  storageBucketMaxObjectsCountLimit_eq?: InputMaybe<Scalars['BigInt']>
  storageBucketMaxObjectsCountLimit_gt?: InputMaybe<Scalars['BigInt']>
  storageBucketMaxObjectsCountLimit_gte?: InputMaybe<Scalars['BigInt']>
  storageBucketMaxObjectsCountLimit_in?: InputMaybe<Array<Scalars['BigInt']>>
  storageBucketMaxObjectsCountLimit_lt?: InputMaybe<Scalars['BigInt']>
  storageBucketMaxObjectsCountLimit_lte?: InputMaybe<Scalars['BigInt']>
  storageBucketMaxObjectsSizeLimit_eq?: InputMaybe<Scalars['BigInt']>
  storageBucketMaxObjectsSizeLimit_gt?: InputMaybe<Scalars['BigInt']>
  storageBucketMaxObjectsSizeLimit_gte?: InputMaybe<Scalars['BigInt']>
  storageBucketMaxObjectsSizeLimit_in?: InputMaybe<Array<Scalars['BigInt']>>
  storageBucketMaxObjectsSizeLimit_lt?: InputMaybe<Scalars['BigInt']>
  storageBucketMaxObjectsSizeLimit_lte?: InputMaybe<Scalars['BigInt']>
  storageBucketsPerBagLimit_eq?: InputMaybe<Scalars['Int']>
  storageBucketsPerBagLimit_gt?: InputMaybe<Scalars['Int']>
  storageBucketsPerBagLimit_gte?: InputMaybe<Scalars['Int']>
  storageBucketsPerBagLimit_in?: InputMaybe<Array<Scalars['Int']>>
  storageBucketsPerBagLimit_lt?: InputMaybe<Scalars['Int']>
  storageBucketsPerBagLimit_lte?: InputMaybe<Scalars['Int']>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
  uploadingBlocked_eq?: InputMaybe<Scalars['Boolean']>
  uploadingBlocked_in?: InputMaybe<Array<Scalars['Boolean']>>
}

/** Global storage system parameters */
export type StorageSystemParameters = BaseGraphQlObject & {
  /** Blacklisted content hashes */
  blacklist: Array<Scalars['String']>
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  /** Additional fee for storing 1 MB of data */
  dataObjectFeePerMb: Scalars['BigInt']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  /** How many buckets can be assigned to distribute a bag */
  distributionBucketsPerBagLimit: Scalars['Int']
  id: Scalars['ID']
  /** ID of the next data object when created */
  nextDataObjectId: Scalars['BigInt']
  /** Global max. number of objects a storage bucket can store (can also be further limitted the provider) */
  storageBucketMaxObjectsCountLimit: Scalars['BigInt']
  /** Global max. size of objects a storage bucket can store (can also be further limitted the provider) */
  storageBucketMaxObjectsSizeLimit: Scalars['BigInt']
  /** How many buckets can be assigned to store a bag */
  storageBucketsPerBagLimit: Scalars['Int']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  /** Whether the uploading is globally blocked */
  uploadingBlocked: Scalars['Boolean']
  version: Scalars['Int']
}

export type StorageSystemParametersWhereUniqueInput = {
  id: Scalars['ID']
}

export type StorageSystemParametersConnection = {
  edges: Array<StorageSystemParametersEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type StorageSystemParametersEdge = {
  cursor: Scalars['String']
  node: StorageSystemParameters
}

export type TerminatedLeaderEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum TerminatedLeaderEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PenaltyAsc = 'penalty_ASC',
  PenaltyDesc = 'penalty_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type TerminatedLeaderEventConnection = {
  edges: Array<TerminatedLeaderEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type TerminatedLeaderEventEdge = {
  cursor: Scalars['String']
  node: TerminatedLeaderEvent
}

export type TerminatedWorkerEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum TerminatedWorkerEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PenaltyAsc = 'penalty_ASC',
  PenaltyDesc = 'penalty_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type TerminatedWorkerEventConnection = {
  edges: Array<TerminatedWorkerEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type TerminatedWorkerEventEdge = {
  cursor: Scalars['String']
  node: TerminatedWorkerEvent
}

export type ThreadCreatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ThreadCreatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  TextAsc = 'text_ASC',
  TextDesc = 'text_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadCreatedEventConnection = {
  edges: Array<ThreadCreatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadCreatedEventEdge = {
  cursor: Scalars['String']
  node: ThreadCreatedEvent
}

export type ThreadDeletedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ThreadDeletedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadDeletedEventConnection = {
  edges: Array<ThreadDeletedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadDeletedEventEdge = {
  cursor: Scalars['String']
  node: ThreadDeletedEvent
}

export type ThreadMetadataUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ThreadMetadataUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewTitleAsc = 'newTitle_ASC',
  NewTitleDesc = 'newTitle_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadMetadataUpdatedEventConnection = {
  edges: Array<ThreadMetadataUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadMetadataUpdatedEventEdge = {
  cursor: Scalars['String']
  node: ThreadMetadataUpdatedEvent
}

export type ThreadModeratedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ThreadModeratedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadModeratedEventConnection = {
  edges: Array<ThreadModeratedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadModeratedEventEdge = {
  cursor: Scalars['String']
  node: ThreadModeratedEvent
}

export type ThreadMovedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum ThreadMovedEventOrderByInput {
  ActorAsc = 'actor_ASC',
  ActorDesc = 'actor_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewCategoryAsc = 'newCategory_ASC',
  NewCategoryDesc = 'newCategory_DESC',
  OldCategoryAsc = 'oldCategory_ASC',
  OldCategoryDesc = 'oldCategory_DESC',
  ThreadAsc = 'thread_ASC',
  ThreadDesc = 'thread_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type ThreadMovedEventConnection = {
  edges: Array<ThreadMovedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type ThreadMovedEventEdge = {
  cursor: Scalars['String']
  node: ThreadMovedEvent
}

export type ThreadsByTitleFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: ThreadsByTitleSearchResult
  rank: Scalars['Float']
}

export type ThreadsByTitleSearchResult = ForumThread

export type TransactionalStatusUpdateWhereUniqueInput = {
  id: Scalars['ID']
}

export enum TransactionalStatusUpdateOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ChangedAtAsc = 'changedAt_ASC',
  ChangedAtDesc = 'changedAt_DESC',
  NftAsc = 'nft_ASC',
  NftDesc = 'nft_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type TransactionalStatusUpdateConnection = {
  edges: Array<TransactionalStatusUpdateEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type TransactionalStatusUpdateEdge = {
  cursor: Scalars['String']
  node: TransactionalStatusUpdate
}

export type UpcomingWorkingGroupOpeningWhereUniqueInput = {
  id: Scalars['ID']
}

export enum UpcomingWorkingGroupOpeningOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInEventAsc = 'createdInEvent_ASC',
  CreatedInEventDesc = 'createdInEvent_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  ExpectedStartAsc = 'expectedStart_ASC',
  ExpectedStartDesc = 'expectedStart_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  RewardPerBlockAsc = 'rewardPerBlock_ASC',
  RewardPerBlockDesc = 'rewardPerBlock_DESC',
  StakeAmountAsc = 'stakeAmount_ASC',
  StakeAmountDesc = 'stakeAmount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type UpcomingWorkingGroupOpeningConnection = {
  edges: Array<UpcomingWorkingGroupOpeningEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type UpcomingWorkingGroupOpeningEdge = {
  cursor: Scalars['String']
  node: UpcomingWorkingGroupOpening
}

export type VideoWhereUniqueInput = {
  id: Scalars['ID']
}

export enum VideoCategoryOrderByInput {
  ActiveVideosCounterAsc = 'activeVideosCounter_ASC',
  ActiveVideosCounterDesc = 'activeVideosCounter_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VideoCategoriesByNameFtsOutput = {
  highlight: Scalars['String']
  isTypeOf: Scalars['String']
  item: VideoCategoriesByNameSearchResult
  rank: Scalars['Float']
}

export type VideoCategoriesByNameSearchResult = VideoCategory

export type VideoCategoryConnection = {
  edges: Array<VideoCategoryEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoCategoryEdge = {
  cursor: Scalars['String']
  node: VideoCategory
}

export type VideoCategoryWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoMediaEncodingWhereUniqueInput = {
  id: Scalars['ID']
}

export enum VideoMediaEncodingOrderByInput {
  CodecNameAsc = 'codecName_ASC',
  CodecNameDesc = 'codecName_DESC',
  ContainerAsc = 'container_ASC',
  ContainerDesc = 'container_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  MimeMediaTypeAsc = 'mimeMediaType_ASC',
  MimeMediaTypeDesc = 'mimeMediaType_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VideoMediaEncodingConnection = {
  edges: Array<VideoMediaEncodingEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoMediaEncodingEdge = {
  cursor: Scalars['String']
  node: VideoMediaEncoding
}

export enum VideoMediaMetadataOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EncodingAsc = 'encoding_ASC',
  EncodingDesc = 'encoding_DESC',
  PixelHeightAsc = 'pixelHeight_ASC',
  PixelHeightDesc = 'pixelHeight_DESC',
  PixelWidthAsc = 'pixelWidth_ASC',
  PixelWidthDesc = 'pixelWidth_DESC',
  SizeAsc = 'size_ASC',
  SizeDesc = 'size_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VideoMediaMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type VideoMediaMetadataConnection = {
  edges: Array<VideoMediaMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoMediaMetadataEdge = {
  cursor: Scalars['String']
  node: VideoMediaMetadata
}

export enum VideoOrderByInput {
  CategoryAsc = 'category_ASC',
  CategoryDesc = 'category_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  CreatedInBlockAsc = 'createdInBlock_ASC',
  CreatedInBlockDesc = 'createdInBlock_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  DurationAsc = 'duration_ASC',
  DurationDesc = 'duration_DESC',
  HasMarketingAsc = 'hasMarketing_ASC',
  HasMarketingDesc = 'hasMarketing_DESC',
  ChannelAsc = 'channel_ASC',
  ChannelDesc = 'channel_DESC',
  IsCensoredAsc = 'isCensored_ASC',
  IsCensoredDesc = 'isCensored_DESC',
  IsExplicitAsc = 'isExplicit_ASC',
  IsExplicitDesc = 'isExplicit_DESC',
  IsFeaturedAsc = 'isFeatured_ASC',
  IsFeaturedDesc = 'isFeatured_DESC',
  IsPublicAsc = 'isPublic_ASC',
  IsPublicDesc = 'isPublic_DESC',
  LanguageAsc = 'language_ASC',
  LanguageDesc = 'language_DESC',
  LicenseAsc = 'license_ASC',
  LicenseDesc = 'license_DESC',
  MediaAsc = 'media_ASC',
  MediaDesc = 'media_DESC',
  MediaMetadataAsc = 'mediaMetadata_ASC',
  MediaMetadataDesc = 'mediaMetadata_DESC',
  NftAsc = 'nft_ASC',
  NftDesc = 'nft_DESC',
  PublishedBeforeJoystreamAsc = 'publishedBeforeJoystream_ASC',
  PublishedBeforeJoystreamDesc = 'publishedBeforeJoystream_DESC',
  ThumbnailPhotoAsc = 'thumbnailPhoto_ASC',
  ThumbnailPhotoDesc = 'thumbnailPhoto_DESC',
  TitleAsc = 'title_ASC',
  TitleDesc = 'title_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VideoConnection = {
  edges: Array<VideoEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VideoEdge = {
  cursor: Scalars['String']
  node: Video
}

export type VoteCastEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum VoteCastEventOrderByInput {
  CastVoteAsc = 'castVote_ASC',
  CastVoteDesc = 'castVote_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VoteCastEventConnection = {
  edges: Array<VoteCastEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VoteCastEventEdge = {
  cursor: Scalars['String']
  node: VoteCastEvent
}

export type VoteOnPollEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum VoteOnPollEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  PollAlternativeAsc = 'pollAlternative_ASC',
  PollAlternativeDesc = 'pollAlternative_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  VotingMemberAsc = 'votingMember_ASC',
  VotingMemberDesc = 'votingMember_DESC',
}

export type VoteOnPollEventConnection = {
  edges: Array<VoteOnPollEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VoteOnPollEventEdge = {
  cursor: Scalars['String']
  node: VoteOnPollEvent
}

export type VoteRevealedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum VoteRevealedEventOrderByInput {
  CastVoteAsc = 'castVote_ASC',
  CastVoteDesc = 'castVote_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VoteRevealedEventConnection = {
  edges: Array<VoteRevealedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VoteRevealedEventEdge = {
  cursor: Scalars['String']
  node: VoteRevealedEvent
}

export type VotingPeriodStartedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export type VotingPeriodStartedEvent = BaseGraphQlObject &
  Event & {
    createdAt: Scalars['DateTime']
    createdById: Scalars['String']
    deletedAt?: Maybe<Scalars['DateTime']>
    deletedById?: Maybe<Scalars['String']>
    id: Scalars['ID']
    /** Blocknumber of the block in which the event was emitted. */
    inBlock: Scalars['Int']
    /** Index of event in block from which it was emitted. */
    indexInBlock: Scalars['Int']
    /** Hash of the extrinsic which caused the event to be emitted */
    inExtrinsic?: Maybe<Scalars['String']>
    /** Network the block was produced in */
    network: Network
    /** Number of candidates in the election. */
    numOfCandidates: Scalars['BigInt']
    /** Filtering options for interface implementers */
    type?: Maybe<EventTypeOptions>
    updatedAt?: Maybe<Scalars['DateTime']>
    updatedById?: Maybe<Scalars['String']>
    version: Scalars['Int']
  }

export enum VotingPeriodStartedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NumOfCandidatesAsc = 'numOfCandidates_ASC',
  NumOfCandidatesDesc = 'numOfCandidates_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type VotingPeriodStartedEventWhereInput = {
  AND?: InputMaybe<Array<VotingPeriodStartedEventWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  inBlock_eq?: InputMaybe<Scalars['Int']>
  inBlock_gt?: InputMaybe<Scalars['Int']>
  inBlock_gte?: InputMaybe<Scalars['Int']>
  inBlock_in?: InputMaybe<Array<Scalars['Int']>>
  inBlock_lt?: InputMaybe<Scalars['Int']>
  inBlock_lte?: InputMaybe<Scalars['Int']>
  indexInBlock_eq?: InputMaybe<Scalars['Int']>
  indexInBlock_gt?: InputMaybe<Scalars['Int']>
  indexInBlock_gte?: InputMaybe<Scalars['Int']>
  indexInBlock_in?: InputMaybe<Array<Scalars['Int']>>
  indexInBlock_lt?: InputMaybe<Scalars['Int']>
  indexInBlock_lte?: InputMaybe<Scalars['Int']>
  inExtrinsic_contains?: InputMaybe<Scalars['String']>
  inExtrinsic_endsWith?: InputMaybe<Scalars['String']>
  inExtrinsic_eq?: InputMaybe<Scalars['String']>
  inExtrinsic_in?: InputMaybe<Array<Scalars['String']>>
  inExtrinsic_startsWith?: InputMaybe<Scalars['String']>
  network_eq?: InputMaybe<Network>
  network_in?: InputMaybe<Array<Network>>
  numOfCandidates_eq?: InputMaybe<Scalars['BigInt']>
  numOfCandidates_gt?: InputMaybe<Scalars['BigInt']>
  numOfCandidates_gte?: InputMaybe<Scalars['BigInt']>
  numOfCandidates_in?: InputMaybe<Array<Scalars['BigInt']>>
  numOfCandidates_lt?: InputMaybe<Scalars['BigInt']>
  numOfCandidates_lte?: InputMaybe<Scalars['BigInt']>
  OR?: InputMaybe<Array<VotingPeriodStartedEventWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type VotingPeriodStartedEventConnection = {
  edges: Array<VotingPeriodStartedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type VotingPeriodStartedEventEdge = {
  cursor: Scalars['String']
  node: VotingPeriodStartedEvent
}

export type WorkerWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkerExitedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkerExitedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerExitedEventConnection = {
  edges: Array<WorkerExitedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerExitedEventEdge = {
  cursor: Scalars['String']
  node: WorkerExitedEvent
}

export type WorkerRewardAccountUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkerRewardAccountUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewRewardAccountAsc = 'newRewardAccount_ASC',
  NewRewardAccountDesc = 'newRewardAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerRewardAccountUpdatedEventConnection = {
  edges: Array<WorkerRewardAccountUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerRewardAccountUpdatedEventEdge = {
  cursor: Scalars['String']
  node: WorkerRewardAccountUpdatedEvent
}

export type WorkerRewardAmountUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkerRewardAmountUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewRewardPerBlockAsc = 'newRewardPerBlock_ASC',
  NewRewardPerBlockDesc = 'newRewardPerBlock_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerRewardAmountUpdatedEventConnection = {
  edges: Array<WorkerRewardAmountUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerRewardAmountUpdatedEventEdge = {
  cursor: Scalars['String']
  node: WorkerRewardAmountUpdatedEvent
}

export type WorkerRoleAccountUpdatedEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkerRoleAccountUpdatedEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  NewRoleAccountAsc = 'newRoleAccount_ASC',
  NewRoleAccountDesc = 'newRoleAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerRoleAccountUpdatedEventConnection = {
  edges: Array<WorkerRoleAccountUpdatedEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerRoleAccountUpdatedEventEdge = {
  cursor: Scalars['String']
  node: WorkerRoleAccountUpdatedEvent
}

export enum WorkerOrderByInput {
  ApplicationAsc = 'application_ASC',
  ApplicationDesc = 'application_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  EntryAsc = 'entry_ASC',
  EntryDesc = 'entry_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  GroupIdAsc = 'groupId_ASC',
  GroupIdDesc = 'groupId_DESC',
  IsActiveAsc = 'isActive_ASC',
  IsActiveDesc = 'isActive_DESC',
  IsLeadAsc = 'isLead_ASC',
  IsLeadDesc = 'isLead_DESC',
  MembershipAsc = 'membership_ASC',
  MembershipDesc = 'membership_DESC',
  MissingRewardAmountAsc = 'missingRewardAmount_ASC',
  MissingRewardAmountDesc = 'missingRewardAmount_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  RewardPerBlockAsc = 'rewardPerBlock_ASC',
  RewardPerBlockDesc = 'rewardPerBlock_DESC',
  RoleAccountAsc = 'roleAccount_ASC',
  RoleAccountDesc = 'roleAccount_DESC',
  RuntimeIdAsc = 'runtimeId_ASC',
  RuntimeIdDesc = 'runtimeId_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StakeAccountAsc = 'stakeAccount_ASC',
  StakeAccountDesc = 'stakeAccount_DESC',
  StorageAsc = 'storage_ASC',
  StorageDesc = 'storage_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkerConnection = {
  edges: Array<WorkerEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerEdge = {
  cursor: Scalars['String']
  node: Worker
}

export type WorkerStartedLeavingEventWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkerStartedLeavingEventOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  InBlockAsc = 'inBlock_ASC',
  InBlockDesc = 'inBlock_DESC',
  IndexInBlockAsc = 'indexInBlock_ASC',
  IndexInBlockDesc = 'indexInBlock_DESC',
  InExtrinsicAsc = 'inExtrinsic_ASC',
  InExtrinsicDesc = 'inExtrinsic_DESC',
  NetworkAsc = 'network_ASC',
  NetworkDesc = 'network_DESC',
  RationaleAsc = 'rationale_ASC',
  RationaleDesc = 'rationale_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
  WorkerAsc = 'worker_ASC',
  WorkerDesc = 'worker_DESC',
}

export type WorkerStartedLeavingEventConnection = {
  edges: Array<WorkerStartedLeavingEventEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkerStartedLeavingEventEdge = {
  cursor: Scalars['String']
  node: WorkerStartedLeavingEvent
}

export type WorkingGroupApplicationWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkingGroupApplicationOrderByInput {
  ApplicantAsc = 'applicant_ASC',
  ApplicantDesc = 'applicant_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  OpeningAsc = 'opening_ASC',
  OpeningDesc = 'opening_DESC',
  RewardAccountAsc = 'rewardAccount_ASC',
  RewardAccountDesc = 'rewardAccount_DESC',
  RoleAccountAsc = 'roleAccount_ASC',
  RoleAccountDesc = 'roleAccount_DESC',
  RuntimeIdAsc = 'runtimeId_ASC',
  RuntimeIdDesc = 'runtimeId_DESC',
  StakeAsc = 'stake_ASC',
  StakeDesc = 'stake_DESC',
  StakingAccountAsc = 'stakingAccount_ASC',
  StakingAccountDesc = 'stakingAccount_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupApplicationConnection = {
  edges: Array<WorkingGroupApplicationEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupApplicationEdge = {
  cursor: Scalars['String']
  node: WorkingGroupApplication
}

export type WorkingGroupWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>
  name?: InputMaybe<Scalars['String']>
}

export enum WorkingGroupMetadataOrderByInput {
  AboutAsc = 'about_ASC',
  AboutDesc = 'about_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  SetInEventAsc = 'setInEvent_ASC',
  SetInEventDesc = 'setInEvent_DESC',
  StatusAsc = 'status_ASC',
  StatusDesc = 'status_DESC',
  StatusMessageAsc = 'statusMessage_ASC',
  StatusMessageDesc = 'statusMessage_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkingGroupMetadataConnection = {
  edges: Array<WorkingGroupMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupMetadataEdge = {
  cursor: Scalars['String']
  node: WorkingGroupMetadata
}

export type WorkingGroupOpeningWhereUniqueInput = {
  id: Scalars['ID']
}

export enum WorkingGroupOpeningMetadataOrderByInput {
  ApplicationDetailsAsc = 'applicationDetails_ASC',
  ApplicationDetailsDesc = 'applicationDetails_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  DescriptionAsc = 'description_ASC',
  DescriptionDesc = 'description_DESC',
  ExpectedEndingAsc = 'expectedEnding_ASC',
  ExpectedEndingDesc = 'expectedEnding_DESC',
  HiringLimitAsc = 'hiringLimit_ASC',
  HiringLimitDesc = 'hiringLimit_DESC',
  OriginallyValidAsc = 'originallyValid_ASC',
  OriginallyValidDesc = 'originallyValid_DESC',
  ShortDescriptionAsc = 'shortDescription_ASC',
  ShortDescriptionDesc = 'shortDescription_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupOpeningMetadataWhereUniqueInput = {
  id: Scalars['ID']
}

export type WorkingGroupOpeningMetadataConnection = {
  edges: Array<WorkingGroupOpeningMetadataEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupOpeningMetadataEdge = {
  cursor: Scalars['String']
  node: WorkingGroupOpeningMetadata
}

export enum WorkingGroupOpeningOrderByInput {
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  GroupAsc = 'group_ASC',
  GroupDesc = 'group_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  RewardPerBlockAsc = 'rewardPerBlock_ASC',
  RewardPerBlockDesc = 'rewardPerBlock_DESC',
  RuntimeIdAsc = 'runtimeId_ASC',
  RuntimeIdDesc = 'runtimeId_DESC',
  StakeAmountAsc = 'stakeAmount_ASC',
  StakeAmountDesc = 'stakeAmount_DESC',
  TypeAsc = 'type_ASC',
  TypeDesc = 'type_DESC',
  UnstakingPeriodAsc = 'unstakingPeriod_ASC',
  UnstakingPeriodDesc = 'unstakingPeriod_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupOpeningConnection = {
  edges: Array<WorkingGroupOpeningEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupOpeningEdge = {
  cursor: Scalars['String']
  node: WorkingGroupOpening
}

export enum WorkingGroupOrderByInput {
  BudgetAsc = 'budget_ASC',
  BudgetDesc = 'budget_DESC',
  CreatedAtAsc = 'createdAt_ASC',
  CreatedAtDesc = 'createdAt_DESC',
  DeletedAtAsc = 'deletedAt_ASC',
  DeletedAtDesc = 'deletedAt_DESC',
  LeaderAsc = 'leader_ASC',
  LeaderDesc = 'leader_DESC',
  MetadataAsc = 'metadata_ASC',
  MetadataDesc = 'metadata_DESC',
  NameAsc = 'name_ASC',
  NameDesc = 'name_DESC',
  UpdatedAtAsc = 'updatedAt_ASC',
  UpdatedAtDesc = 'updatedAt_DESC',
}

export type WorkingGroupConnection = {
  edges: Array<WorkingGroupEdge>
  pageInfo: PageInfo
  totalCount: Scalars['Int']
}

export type WorkingGroupEdge = {
  cursor: Scalars['String']
  node: WorkingGroup
}

export type Subscription = {
  stateSubscription: ProcessorState
}

export type ProcessorState = {
  chainHead: Scalars['Float']
  indexerHead: Scalars['Float']
  lastCompleteBlock: Scalars['Float']
  lastProcessedEvent: Scalars['String']
}

export type AnnouncingPeriodStartedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type AnnouncingPeriodStartedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type ApplicationFormQuestionAnswerCreateInput = {
  answer: Scalars['String']
  application: Scalars['ID']
  question: Scalars['ID']
}

export type ApplicationFormQuestionAnswerUpdateInput = {
  answer?: InputMaybe<Scalars['String']>
  application?: InputMaybe<Scalars['ID']>
  question?: InputMaybe<Scalars['ID']>
}

export type ApplicationFormQuestionCreateInput = {
  index: Scalars['Float']
  openingMetadata: Scalars['ID']
  question?: InputMaybe<Scalars['String']>
  type: ApplicationFormQuestionType
}

export type ApplicationFormQuestionUpdateInput = {
  index?: InputMaybe<Scalars['Float']>
  openingMetadata?: InputMaybe<Scalars['ID']>
  question?: InputMaybe<Scalars['String']>
  type?: InputMaybe<ApplicationFormQuestionType>
}

export type ApplicationWithdrawnEventCreateInput = {
  application: Scalars['ID']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type ApplicationWithdrawnEventUpdateInput = {
  application?: InputMaybe<Scalars['ID']>
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type AppliedOnOpeningEventCreateInput = {
  application: Scalars['ID']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  opening: Scalars['ID']
}

export type AppliedOnOpeningEventUpdateInput = {
  application?: InputMaybe<Scalars['ID']>
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  opening?: InputMaybe<Scalars['ID']>
}

export type AuctionBidCanceledEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
  video: Scalars['ID']
}

export type AuctionBidCanceledEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type AuctionBidMadeEventCreateInput = {
  bidAmount: Scalars['String']
  extendsAuction: Scalars['Boolean']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
  video: Scalars['ID']
}

export type AuctionBidMadeEventUpdateInput = {
  bidAmount?: InputMaybe<Scalars['String']>
  extendsAuction?: InputMaybe<Scalars['Boolean']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type AuctionCanceledEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  video: Scalars['ID']
}

export type AuctionCanceledEventUpdateInput = {
  contentActor?: InputMaybe<Scalars['JSONObject']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type AuctionCreateInput = {
  auctionType: Scalars['JSONObject']
  buyNowPrice?: InputMaybe<Scalars['String']>
  endedAtBlock?: InputMaybe<Scalars['Float']>
  initialOwner?: InputMaybe<Scalars['ID']>
  isCanceled: Scalars['Boolean']
  isCompleted: Scalars['Boolean']
  lastBid?: InputMaybe<Scalars['ID']>
  minimalBidStep: Scalars['String']
  nft: Scalars['ID']
  plannedEndAtBlock?: InputMaybe<Scalars['Float']>
  startingPrice: Scalars['String']
  startsAtBlock: Scalars['Float']
  winningMember?: InputMaybe<Scalars['ID']>
}

export type AuctionStartedEventCreateInput = {
  actor: Scalars['JSONObject']
  auction: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  video: Scalars['ID']
}

export type AuctionStartedEventUpdateInput = {
  actor?: InputMaybe<Scalars['JSONObject']>
  auction?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type AuctionUpdateInput = {
  auctionType?: InputMaybe<Scalars['JSONObject']>
  buyNowPrice?: InputMaybe<Scalars['String']>
  endedAtBlock?: InputMaybe<Scalars['Float']>
  initialOwner?: InputMaybe<Scalars['ID']>
  isCanceled?: InputMaybe<Scalars['Boolean']>
  isCompleted?: InputMaybe<Scalars['Boolean']>
  lastBid?: InputMaybe<Scalars['ID']>
  minimalBidStep?: InputMaybe<Scalars['String']>
  nft?: InputMaybe<Scalars['ID']>
  plannedEndAtBlock?: InputMaybe<Scalars['Float']>
  startingPrice?: InputMaybe<Scalars['String']>
  startsAtBlock?: InputMaybe<Scalars['Float']>
  winningMember?: InputMaybe<Scalars['ID']>
}

export type BaseModel = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type BaseModelUuid = BaseGraphQlObject & {
  createdAt: Scalars['DateTime']
  createdById: Scalars['String']
  deletedAt?: Maybe<Scalars['DateTime']>
  deletedById?: Maybe<Scalars['String']>
  id: Scalars['ID']
  updatedAt?: Maybe<Scalars['DateTime']>
  updatedById?: Maybe<Scalars['String']>
  version: Scalars['Int']
}

export type BaseWhereInput = {
  createdAt_eq?: InputMaybe<Scalars['String']>
  createdAt_gt?: InputMaybe<Scalars['String']>
  createdAt_gte?: InputMaybe<Scalars['String']>
  createdAt_lt?: InputMaybe<Scalars['String']>
  createdAt_lte?: InputMaybe<Scalars['String']>
  createdById_eq?: InputMaybe<Scalars['String']>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['String']>
  deletedAt_gt?: InputMaybe<Scalars['String']>
  deletedAt_gte?: InputMaybe<Scalars['String']>
  deletedAt_lt?: InputMaybe<Scalars['String']>
  deletedAt_lte?: InputMaybe<Scalars['String']>
  deletedById_eq?: InputMaybe<Scalars['String']>
  id_eq?: InputMaybe<Scalars['String']>
  id_in?: InputMaybe<Array<Scalars['String']>>
  updatedAt_eq?: InputMaybe<Scalars['String']>
  updatedAt_gt?: InputMaybe<Scalars['String']>
  updatedAt_gte?: InputMaybe<Scalars['String']>
  updatedAt_lt?: InputMaybe<Scalars['String']>
  updatedAt_lte?: InputMaybe<Scalars['String']>
  updatedById_eq?: InputMaybe<Scalars['String']>
}

export type BidCreateInput = {
  amount: Scalars['String']
  auction: Scalars['ID']
  bidder: Scalars['ID']
  createdInBlock: Scalars['Float']
  isCanceled: Scalars['Boolean']
}

export type BidMadeCompletingAuctionEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
  video: Scalars['ID']
}

export type BidMadeCompletingAuctionEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type BidUpdateInput = {
  amount?: InputMaybe<Scalars['String']>
  auction?: InputMaybe<Scalars['ID']>
  bidder?: InputMaybe<Scalars['ID']>
  createdInBlock?: InputMaybe<Scalars['Float']>
  isCanceled?: InputMaybe<Scalars['Boolean']>
}

export type BudgetBalanceSetEventCreateInput = {
  balance: Scalars['String']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type BudgetBalanceSetEventUpdateInput = {
  balance?: InputMaybe<Scalars['String']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type BudgetIncrementUpdatedEventCreateInput = {
  amount: Scalars['String']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type BudgetIncrementUpdatedEventUpdateInput = {
  amount?: InputMaybe<Scalars['String']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type BudgetRefillEventCreateInput = {
  balance: Scalars['String']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type BudgetRefillEventUpdateInput = {
  balance?: InputMaybe<Scalars['String']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type BudgetRefillPlannedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  nextRefillInBlock: Scalars['Float']
}

export type BudgetRefillPlannedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  nextRefillInBlock?: InputMaybe<Scalars['Float']>
}

export type BudgetSetEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newBudget: Scalars['String']
}

export type BudgetSetEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newBudget?: InputMaybe<Scalars['String']>
}

export type BudgetSpendingEventCreateInput = {
  amount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  rationale?: InputMaybe<Scalars['String']>
  reciever: Scalars['String']
}

export type BudgetSpendingEventUpdateInput = {
  amount?: InputMaybe<Scalars['String']>
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  rationale?: InputMaybe<Scalars['String']>
  reciever?: InputMaybe<Scalars['String']>
}

export type BuyNowCanceledEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  video: Scalars['ID']
}

export type BuyNowCanceledEventUpdateInput = {
  contentActor?: InputMaybe<Scalars['JSONObject']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type CandidacyNoteMetadataCreateInput = {
  bannerImageUri?: InputMaybe<Scalars['String']>
  bulletPoints: Array<Scalars['String']>
  description?: InputMaybe<Scalars['String']>
  header?: InputMaybe<Scalars['String']>
}

export type CandidacyNoteMetadataUpdateInput = {
  bannerImageUri?: InputMaybe<Scalars['String']>
  bulletPoints?: InputMaybe<Array<Scalars['String']>>
  description?: InputMaybe<Scalars['String']>
  header?: InputMaybe<Scalars['String']>
}

export type CandidacyNoteSetEventCreateInput = {
  candidate: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  noteMetadata: Scalars['ID']
}

export type CandidacyNoteSetEventUpdateInput = {
  candidate?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  noteMetadata?: InputMaybe<Scalars['ID']>
}

export type CandidacyStakeReleaseEventCreateInput = {
  candidate: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type CandidacyStakeReleaseEventUpdateInput = {
  candidate?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type CandidacyWithdrawEventCreateInput = {
  candidate: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type CandidacyWithdrawEventUpdateInput = {
  candidate?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type CandidateCreateInput = {
  electionRound: Scalars['ID']
  lastVoteReceivedAtBlock?: InputMaybe<Scalars['String']>
  lastVoteReceivedAtEventNumber?: InputMaybe<Scalars['Float']>
  member: Scalars['ID']
  noteMetadata: Scalars['ID']
  rewardAccountId: Scalars['String']
  stake: Scalars['String']
  stakeLocked: Scalars['Boolean']
  stakingAccountId: Scalars['String']
  status: CandidacyStatus
  votePower: Scalars['String']
}

export type CandidateUpdateInput = {
  electionRound?: InputMaybe<Scalars['ID']>
  lastVoteReceivedAtBlock?: InputMaybe<Scalars['String']>
  lastVoteReceivedAtEventNumber?: InputMaybe<Scalars['Float']>
  member?: InputMaybe<Scalars['ID']>
  noteMetadata?: InputMaybe<Scalars['ID']>
  rewardAccountId?: InputMaybe<Scalars['String']>
  stake?: InputMaybe<Scalars['String']>
  stakeLocked?: InputMaybe<Scalars['Boolean']>
  stakingAccountId?: InputMaybe<Scalars['String']>
  status?: InputMaybe<CandidacyStatus>
  votePower?: InputMaybe<Scalars['String']>
}

export type CastVoteCreateInput = {
  castBy: Scalars['String']
  commitment: Scalars['String']
  electionRound: Scalars['ID']
  stake: Scalars['String']
  stakeLocked: Scalars['Boolean']
  voteFor?: InputMaybe<Scalars['ID']>
  votePower: Scalars['String']
}

export type CastVoteUpdateInput = {
  castBy?: InputMaybe<Scalars['String']>
  commitment?: InputMaybe<Scalars['String']>
  electionRound?: InputMaybe<Scalars['ID']>
  stake?: InputMaybe<Scalars['String']>
  stakeLocked?: InputMaybe<Scalars['Boolean']>
  voteFor?: InputMaybe<Scalars['ID']>
  votePower?: InputMaybe<Scalars['String']>
}

export type CategoryArchivalStatusUpdatedEventCreateInput = {
  actor: Scalars['ID']
  category: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newArchivalStatus: Scalars['Boolean']
}

export type CategoryArchivalStatusUpdatedEventUpdateInput = {
  actor?: InputMaybe<Scalars['ID']>
  category?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newArchivalStatus?: InputMaybe<Scalars['Boolean']>
}

export type CategoryCreatedEventCreateInput = {
  category: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type CategoryCreatedEventUpdateInput = {
  category?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type CategoryDeletedEventCreateInput = {
  actor: Scalars['ID']
  category: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type CategoryDeletedEventUpdateInput = {
  actor?: InputMaybe<Scalars['ID']>
  category?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type CategoryMembershipOfModeratorUpdatedEventCreateInput = {
  category: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  moderator: Scalars['ID']
  network: Network
  newCanModerateValue: Scalars['Boolean']
}

export type CategoryMembershipOfModeratorUpdatedEventUpdateInput = {
  category?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  moderator?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  newCanModerateValue?: InputMaybe<Scalars['Boolean']>
}

export type CategoryStickyThreadUpdateEventCreateInput = {
  actor: Scalars['ID']
  category: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type CategoryStickyThreadUpdateEventUpdateInput = {
  actor?: InputMaybe<Scalars['ID']>
  category?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type CouncilMemberCreateInput = {
  accumulatedReward: Scalars['String']
  electedInCouncil: Scalars['ID']
  lastPaymentBlock: Scalars['String']
  member: Scalars['ID']
  rewardAccountId: Scalars['String']
  stake: Scalars['String']
  stakingAccountId: Scalars['String']
  unpaidReward: Scalars['String']
}

export type CouncilMemberUpdateInput = {
  accumulatedReward?: InputMaybe<Scalars['String']>
  electedInCouncil?: InputMaybe<Scalars['ID']>
  lastPaymentBlock?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  rewardAccountId?: InputMaybe<Scalars['String']>
  stake?: InputMaybe<Scalars['String']>
  stakingAccountId?: InputMaybe<Scalars['String']>
  unpaidReward?: InputMaybe<Scalars['String']>
}

export type CouncilorRewardUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  rewardAmount: Scalars['String']
}

export type CouncilorRewardUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  rewardAmount?: InputMaybe<Scalars['String']>
}

export type CouncilStageUpdateCreateInput = {
  electedCouncil?: InputMaybe<Scalars['ID']>
  electionProblem?: InputMaybe<ElectionProblem>
  changedAt: Scalars['String']
  stage: Scalars['JSONObject']
}

export type CouncilStageUpdateUpdateInput = {
  electedCouncil?: InputMaybe<Scalars['ID']>
  electionProblem?: InputMaybe<ElectionProblem>
  changedAt?: InputMaybe<Scalars['String']>
  stage?: InputMaybe<Scalars['JSONObject']>
}

export type CuratorCreateInput = {
  dummy?: InputMaybe<Scalars['Float']>
}

export type CuratorGroupCreateInput = {
  isActive: Scalars['Boolean']
}

export type CuratorGroupUpdateInput = {
  isActive?: InputMaybe<Scalars['Boolean']>
}

export type CuratorUpdateInput = {
  dummy?: InputMaybe<Scalars['Float']>
}

export type DeleteResponse = {
  id: Scalars['ID']
}

export type DistributionBucketCreateInput = {
  acceptingNewBags: Scalars['Boolean']
  bucketIndex: Scalars['Float']
  distributing: Scalars['Boolean']
  family: Scalars['ID']
}

export type DistributionBucketFamilyCreateInput = {
  metadata?: InputMaybe<Scalars['ID']>
}

export type DistributionBucketFamilyGeographicAreaCreateInput = {
  area: Scalars['JSONObject']
  distributionBucketFamilyMetadata: Scalars['ID']
}

export type DistributionBucketFamilyGeographicAreaUpdateInput = {
  area?: InputMaybe<Scalars['JSONObject']>
  distributionBucketFamilyMetadata?: InputMaybe<Scalars['ID']>
}

export type DistributionBucketFamilyMetadataCreateInput = {
  description?: InputMaybe<Scalars['String']>
  latencyTestTargets?: InputMaybe<Array<Scalars['String']>>
  region?: InputMaybe<Scalars['String']>
}

export type DistributionBucketFamilyMetadataUpdateInput = {
  description?: InputMaybe<Scalars['String']>
  latencyTestTargets?: InputMaybe<Array<Scalars['String']>>
  region?: InputMaybe<Scalars['String']>
}

export type DistributionBucketFamilyUpdateInput = {
  metadata?: InputMaybe<Scalars['ID']>
}

export type DistributionBucketOperatorCreateInput = {
  distributionBucket: Scalars['ID']
  metadata?: InputMaybe<Scalars['ID']>
  status: DistributionBucketOperatorStatus
  workerId: Scalars['Float']
}

export type DistributionBucketOperatorMetadataCreateInput = {
  extra?: InputMaybe<Scalars['String']>
  nodeEndpoint?: InputMaybe<Scalars['String']>
  nodeLocation?: InputMaybe<Scalars['ID']>
}

export type DistributionBucketOperatorMetadataUpdateInput = {
  extra?: InputMaybe<Scalars['String']>
  nodeEndpoint?: InputMaybe<Scalars['String']>
  nodeLocation?: InputMaybe<Scalars['ID']>
}

export type DistributionBucketOperatorUpdateInput = {
  distributionBucket?: InputMaybe<Scalars['ID']>
  metadata?: InputMaybe<Scalars['ID']>
  status?: InputMaybe<DistributionBucketOperatorStatus>
  workerId?: InputMaybe<Scalars['Float']>
}

export type DistributionBucketUpdateInput = {
  acceptingNewBags?: InputMaybe<Scalars['Boolean']>
  bucketIndex?: InputMaybe<Scalars['Float']>
  distributing?: InputMaybe<Scalars['Boolean']>
  family?: InputMaybe<Scalars['ID']>
}

export type ElectedCouncilCreateInput = {
  electedAtBlock: Scalars['Float']
  electedAtNetwork: Network
  electedAtTime: Scalars['DateTime']
  endedAtBlock?: InputMaybe<Scalars['Float']>
  endedAtNetwork?: InputMaybe<Network>
  endedAtTime?: InputMaybe<Scalars['DateTime']>
  isResigned: Scalars['Boolean']
}

export type ElectedCouncilUpdateInput = {
  electedAtBlock?: InputMaybe<Scalars['Float']>
  electedAtNetwork?: InputMaybe<Network>
  electedAtTime?: InputMaybe<Scalars['DateTime']>
  endedAtBlock?: InputMaybe<Scalars['Float']>
  endedAtNetwork?: InputMaybe<Network>
  endedAtTime?: InputMaybe<Scalars['DateTime']>
  isResigned?: InputMaybe<Scalars['Boolean']>
}

export type ElectionRoundCreateInput = {
  cycleId: Scalars['Float']
  electedCouncil: Scalars['ID']
  endedAtBlock?: InputMaybe<Scalars['Float']>
  endedAtNetwork?: InputMaybe<Network>
  endedAtTime?: InputMaybe<Scalars['DateTime']>
  isFinished: Scalars['Boolean']
  nextElectedCouncil?: InputMaybe<Scalars['ID']>
}

export type ElectionRoundUpdateInput = {
  cycleId?: InputMaybe<Scalars['Float']>
  electedCouncil?: InputMaybe<Scalars['ID']>
  endedAtBlock?: InputMaybe<Scalars['Float']>
  endedAtNetwork?: InputMaybe<Network>
  endedAtTime?: InputMaybe<Scalars['DateTime']>
  isFinished?: InputMaybe<Scalars['Boolean']>
  nextElectedCouncil?: InputMaybe<Scalars['ID']>
}

export type EnglishAuctionCompletedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  video: Scalars['ID']
  winner: Scalars['ID']
}

export type EnglishAuctionCompletedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
  winner?: InputMaybe<Scalars['ID']>
}

export type EventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  type?: InputMaybe<EventTypeOptions>
}

export type EventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  type?: InputMaybe<EventTypeOptions>
}

export type EventWhereUniqueInput = {
  id: Scalars['ID']
}

export type ForumCategoryCreateInput = {
  description: Scalars['String']
  parent?: InputMaybe<Scalars['ID']>
  status: Scalars['JSONObject']
  title: Scalars['String']
}

export type ForumCategoryUpdateInput = {
  description?: InputMaybe<Scalars['String']>
  parent?: InputMaybe<Scalars['ID']>
  status?: InputMaybe<Scalars['JSONObject']>
  title?: InputMaybe<Scalars['String']>
}

export type ForumPollAlternativeCreateInput = {
  index: Scalars['Float']
  poll: Scalars['ID']
  text: Scalars['String']
}

export type ForumPollAlternativeUpdateInput = {
  index?: InputMaybe<Scalars['Float']>
  poll?: InputMaybe<Scalars['ID']>
  text?: InputMaybe<Scalars['String']>
}

export type ForumPollCreateInput = {
  description: Scalars['String']
  endTime: Scalars['DateTime']
  thread: Scalars['ID']
}

export type ForumPollUpdateInput = {
  description?: InputMaybe<Scalars['String']>
  endTime?: InputMaybe<Scalars['DateTime']>
  thread?: InputMaybe<Scalars['ID']>
}

export type ForumPostCreateInput = {
  author: Scalars['ID']
  deletedInEvent?: InputMaybe<Scalars['ID']>
  isVisible: Scalars['Boolean']
  origin: Scalars['JSONObject']
  repliesTo?: InputMaybe<Scalars['ID']>
  status: Scalars['JSONObject']
  text: Scalars['String']
  thread: Scalars['ID']
}

export type ForumPostReactionCreateInput = {
  member: Scalars['ID']
  post: Scalars['ID']
  reaction: PostReaction
}

export type ForumPostReactionUpdateInput = {
  member?: InputMaybe<Scalars['ID']>
  post?: InputMaybe<Scalars['ID']>
  reaction?: InputMaybe<PostReaction>
}

export type ForumPostUpdateInput = {
  author?: InputMaybe<Scalars['ID']>
  deletedInEvent?: InputMaybe<Scalars['ID']>
  isVisible?: InputMaybe<Scalars['Boolean']>
  origin?: InputMaybe<Scalars['JSONObject']>
  repliesTo?: InputMaybe<Scalars['ID']>
  status?: InputMaybe<Scalars['JSONObject']>
  text?: InputMaybe<Scalars['String']>
  thread?: InputMaybe<Scalars['ID']>
}

export type ForumThreadCreateInput = {
  author: Scalars['ID']
  category: Scalars['ID']
  initialPost?: InputMaybe<Scalars['ID']>
  isSticky: Scalars['Boolean']
  isVisible: Scalars['Boolean']
  status: Scalars['JSONObject']
  title: Scalars['String']
  visiblePostsCount: Scalars['Float']
}

export type ForumThreadTagCreateInput = {
  visibleThreadsCount: Scalars['Float']
}

export type ForumThreadTagUpdateInput = {
  visibleThreadsCount?: InputMaybe<Scalars['Float']>
}

export type ForumThreadUpdateInput = {
  author?: InputMaybe<Scalars['ID']>
  category?: InputMaybe<Scalars['ID']>
  initialPost?: InputMaybe<Scalars['ID']>
  isSticky?: InputMaybe<Scalars['Boolean']>
  isVisible?: InputMaybe<Scalars['Boolean']>
  status?: InputMaybe<Scalars['JSONObject']>
  title?: InputMaybe<Scalars['String']>
  visiblePostsCount?: InputMaybe<Scalars['Float']>
}

export type FundingRequestDestinationCreateInput = {
  account: Scalars['String']
  amount: Scalars['String']
  list: Scalars['ID']
}

export type FundingRequestDestinationsListCreateInput = {
  phantom?: InputMaybe<Scalars['Float']>
}

export type FundingRequestDestinationsListUpdateInput = {
  phantom?: InputMaybe<Scalars['Float']>
}

export type FundingRequestDestinationUpdateInput = {
  account?: InputMaybe<Scalars['String']>
  amount?: InputMaybe<Scalars['String']>
  list?: InputMaybe<Scalars['ID']>
}

export type GeoCoordinatesCreateInput = {
  latitude: Scalars['Float']
  longitude: Scalars['Float']
}

export type GeoCoordinatesUpdateInput = {
  latitude?: InputMaybe<Scalars['Float']>
  longitude?: InputMaybe<Scalars['Float']>
}

export type GeographicalAreaContinentCreateInput = {
  code?: InputMaybe<Continent>
}

export type GeographicalAreaContinentUpdateInput = {
  code?: InputMaybe<Continent>
}

export type GeographicalAreaContinentWhereInput = {
  AND?: InputMaybe<Array<GeographicalAreaContinentWhereInput>>
  code_eq?: InputMaybe<Continent>
  code_in?: InputMaybe<Array<Continent>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<GeographicalAreaContinentWhereInput>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type GeographicalAreaContinentWhereUniqueInput = {
  id: Scalars['ID']
}

export type ChannelCategoryCreateInput = {
  activeVideosCounter: Scalars['Float']
  createdInBlock: Scalars['Float']
  name?: InputMaybe<Scalars['String']>
}

export type ChannelCategoryUpdateInput = {
  activeVideosCounter?: InputMaybe<Scalars['Float']>
  createdInBlock?: InputMaybe<Scalars['Float']>
  name?: InputMaybe<Scalars['String']>
}

export type ChannelCreateInput = {
  activeVideosCounter: Scalars['Float']
  avatarPhoto?: InputMaybe<Scalars['ID']>
  category?: InputMaybe<Scalars['ID']>
  coverPhoto?: InputMaybe<Scalars['ID']>
  createdInBlock: Scalars['Float']
  description?: InputMaybe<Scalars['String']>
  isCensored: Scalars['Boolean']
  isPublic?: InputMaybe<Scalars['Boolean']>
  language?: InputMaybe<Scalars['ID']>
  ownerCuratorGroup?: InputMaybe<Scalars['ID']>
  ownerMember?: InputMaybe<Scalars['ID']>
  rewardAccount?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type ChannelUpdateInput = {
  activeVideosCounter?: InputMaybe<Scalars['Float']>
  avatarPhoto?: InputMaybe<Scalars['ID']>
  category?: InputMaybe<Scalars['ID']>
  coverPhoto?: InputMaybe<Scalars['ID']>
  createdInBlock?: InputMaybe<Scalars['Float']>
  description?: InputMaybe<Scalars['String']>
  isCensored?: InputMaybe<Scalars['Boolean']>
  isPublic?: InputMaybe<Scalars['Boolean']>
  language?: InputMaybe<Scalars['ID']>
  ownerCuratorGroup?: InputMaybe<Scalars['ID']>
  ownerMember?: InputMaybe<Scalars['ID']>
  rewardAccount?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type InitialInvitationBalanceUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newInitialBalance: Scalars['String']
}

export type InitialInvitationBalanceUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newInitialBalance?: InputMaybe<Scalars['String']>
}

export type InitialInvitationCountUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newInitialInvitationCount: Scalars['Float']
}

export type InitialInvitationCountUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newInitialInvitationCount?: InputMaybe<Scalars['Float']>
}

export type InvitesTransferredEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  numberOfInvites: Scalars['Float']
  sourceMember: Scalars['ID']
  targetMember: Scalars['ID']
}

export type InvitesTransferredEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  numberOfInvites?: InputMaybe<Scalars['Float']>
  sourceMember?: InputMaybe<Scalars['ID']>
  targetMember?: InputMaybe<Scalars['ID']>
}

export type LanguageCreateInput = {
  createdInBlock: Scalars['Float']
  iso: Scalars['String']
}

export type LanguageUpdateInput = {
  createdInBlock?: InputMaybe<Scalars['Float']>
  iso?: InputMaybe<Scalars['String']>
}

export type LeaderInvitationQuotaUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newInvitationQuota: Scalars['Float']
}

export type LeaderInvitationQuotaUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newInvitationQuota?: InputMaybe<Scalars['Float']>
}

export type LeaderSetEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  worker?: InputMaybe<Scalars['ID']>
}

export type LeaderSetEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  worker?: InputMaybe<Scalars['ID']>
}

export type LeaderUnsetEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  leader: Scalars['ID']
  network: Network
}

export type LeaderUnsetEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  leader?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
}

export type LicenseCreateInput = {
  attribution?: InputMaybe<Scalars['String']>
  code?: InputMaybe<Scalars['Float']>
  customText?: InputMaybe<Scalars['String']>
}

export type LicenseUpdateInput = {
  attribution?: InputMaybe<Scalars['String']>
  code?: InputMaybe<Scalars['Float']>
  customText?: InputMaybe<Scalars['String']>
}

export type MemberAccountsUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
  newControllerAccount?: InputMaybe<Scalars['String']>
  newRootAccount?: InputMaybe<Scalars['String']>
}

export type MemberAccountsUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  newControllerAccount?: InputMaybe<Scalars['String']>
  newRootAccount?: InputMaybe<Scalars['String']>
}

export type MemberInvitedEventCreateInput = {
  controllerAccount: Scalars['String']
  handle: Scalars['String']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  invitingMember: Scalars['ID']
  metadata: Scalars['ID']
  network: Network
  newMember: Scalars['ID']
  rootAccount: Scalars['String']
}

export type MemberInvitedEventUpdateInput = {
  controllerAccount?: InputMaybe<Scalars['String']>
  handle?: InputMaybe<Scalars['String']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  invitingMember?: InputMaybe<Scalars['ID']>
  metadata?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  newMember?: InputMaybe<Scalars['ID']>
  rootAccount?: InputMaybe<Scalars['String']>
}

export type MemberMetadataCreateInput = {
  about?: InputMaybe<Scalars['String']>
  avatar: Scalars['JSONObject']
  name?: InputMaybe<Scalars['String']>
}

export type MemberMetadataUpdateInput = {
  about?: InputMaybe<Scalars['String']>
  avatar?: InputMaybe<Scalars['JSONObject']>
  name?: InputMaybe<Scalars['String']>
}

export type MemberProfileUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
  newHandle?: InputMaybe<Scalars['String']>
  newMetadata: Scalars['ID']
}

export type MemberProfileUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  newHandle?: InputMaybe<Scalars['String']>
  newMetadata?: InputMaybe<Scalars['ID']>
}

export type MembershipBoughtEventCreateInput = {
  controllerAccount: Scalars['String']
  handle: Scalars['String']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  metadata: Scalars['ID']
  network: Network
  newMember: Scalars['ID']
  referrer?: InputMaybe<Scalars['ID']>
  rootAccount: Scalars['String']
}

export type MembershipBoughtEventUpdateInput = {
  controllerAccount?: InputMaybe<Scalars['String']>
  handle?: InputMaybe<Scalars['String']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  metadata?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  newMember?: InputMaybe<Scalars['ID']>
  referrer?: InputMaybe<Scalars['ID']>
  rootAccount?: InputMaybe<Scalars['String']>
}

export type MembershipCreateInput = {
  boundAccounts: Array<Scalars['String']>
  controllerAccount: Scalars['String']
  entry: Scalars['JSONObject']
  handle: Scalars['String']
  inviteCount: Scalars['Float']
  invitedBy?: InputMaybe<Scalars['ID']>
  isCouncilMember: Scalars['Boolean']
  isFoundingMember: Scalars['Boolean']
  isVerified: Scalars['Boolean']
  metadata: Scalars['ID']
  referredBy?: InputMaybe<Scalars['ID']>
  rootAccount: Scalars['String']
}

export type MembershipPriceUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newPrice: Scalars['String']
}

export type MembershipPriceUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newPrice?: InputMaybe<Scalars['String']>
}

export type MembershipSystemSnapshotCreateInput = {
  defaultInviteCount: Scalars['Float']
  invitedInitialBalance: Scalars['String']
  membershipPrice: Scalars['String']
  referralCut: Scalars['Float']
  snapshotBlock: Scalars['Float']
}

export type MembershipSystemSnapshotUpdateInput = {
  defaultInviteCount?: InputMaybe<Scalars['Float']>
  invitedInitialBalance?: InputMaybe<Scalars['String']>
  membershipPrice?: InputMaybe<Scalars['String']>
  referralCut?: InputMaybe<Scalars['Float']>
  snapshotBlock?: InputMaybe<Scalars['Float']>
}

export type MembershipUpdateInput = {
  boundAccounts?: InputMaybe<Array<Scalars['String']>>
  controllerAccount?: InputMaybe<Scalars['String']>
  entry?: InputMaybe<Scalars['JSONObject']>
  handle?: InputMaybe<Scalars['String']>
  inviteCount?: InputMaybe<Scalars['Float']>
  invitedBy?: InputMaybe<Scalars['ID']>
  isCouncilMember?: InputMaybe<Scalars['Boolean']>
  isFoundingMember?: InputMaybe<Scalars['Boolean']>
  isVerified?: InputMaybe<Scalars['Boolean']>
  metadata?: InputMaybe<Scalars['ID']>
  referredBy?: InputMaybe<Scalars['ID']>
  rootAccount?: InputMaybe<Scalars['String']>
}

export type MemberVerificationStatusUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  isVerified: Scalars['Boolean']
  member: Scalars['ID']
  network: Network
  worker: Scalars['ID']
}

export type MemberVerificationStatusUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  isVerified?: InputMaybe<Scalars['Boolean']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  worker?: InputMaybe<Scalars['ID']>
}

export type NewCandidateEventCreateInput = {
  balance: Scalars['String']
  candidate: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  rewardAccount: Scalars['String']
  stakingAccount: Scalars['String']
}

export type NewCandidateEventUpdateInput = {
  balance?: InputMaybe<Scalars['String']>
  candidate?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  rewardAccount?: InputMaybe<Scalars['String']>
  stakingAccount?: InputMaybe<Scalars['String']>
}

export type NewCouncilElectedEventCreateInput = {
  electedCouncil: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type NewCouncilElectedEventUpdateInput = {
  electedCouncil?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type NewCouncilNotElectedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type NewCouncilNotElectedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type NewMissedRewardLevelReachedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newMissedRewardAmount: Scalars['String']
  worker: Scalars['ID']
}

export type NewMissedRewardLevelReachedEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newMissedRewardAmount?: InputMaybe<Scalars['String']>
  worker?: InputMaybe<Scalars['ID']>
}

export type NftBoughtEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
  video: Scalars['ID']
}

export type NftBoughtEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type NftIssuedEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  metadata: Scalars['String']
  network: Network
  newOwner?: InputMaybe<Scalars['ID']>
  royalty?: InputMaybe<Scalars['Float']>
  video: Scalars['ID']
}

export type NftIssuedEventUpdateInput = {
  contentActor?: InputMaybe<Scalars['JSONObject']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  metadata?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newOwner?: InputMaybe<Scalars['ID']>
  royalty?: InputMaybe<Scalars['Float']>
  video?: InputMaybe<Scalars['ID']>
}

export type NftSellOrderMadeEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  price: Scalars['String']
  video: Scalars['ID']
}

export type NftSellOrderMadeEventUpdateInput = {
  contentActor?: InputMaybe<Scalars['JSONObject']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  price?: InputMaybe<Scalars['String']>
  video?: InputMaybe<Scalars['ID']>
}

export type NodeLocationMetadataCreateInput = {
  city?: InputMaybe<Scalars['String']>
  coordinates?: InputMaybe<Scalars['ID']>
  countryCode?: InputMaybe<Scalars['String']>
}

export type NodeLocationMetadataUpdateInput = {
  city?: InputMaybe<Scalars['String']>
  coordinates?: InputMaybe<Scalars['ID']>
  countryCode?: InputMaybe<Scalars['String']>
}

export type NotEnoughCandidatesEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type NotEnoughCandidatesEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type OfferAcceptedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  video: Scalars['ID']
}

export type OfferAcceptedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type OfferCanceledEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  video: Scalars['ID']
}

export type OfferCanceledEventUpdateInput = {
  contentActor?: InputMaybe<Scalars['JSONObject']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type OfferStartedEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
  price?: InputMaybe<Scalars['String']>
  video: Scalars['ID']
}

export type OfferStartedEventUpdateInput = {
  contentActor?: InputMaybe<Scalars['JSONObject']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
  price?: InputMaybe<Scalars['String']>
  video?: InputMaybe<Scalars['ID']>
}

export type OpenAuctionBidAcceptedEventCreateInput = {
  contentActor: Scalars['JSONObject']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  video: Scalars['ID']
}

export type OpenAuctionBidAcceptedEventUpdateInput = {
  contentActor?: InputMaybe<Scalars['JSONObject']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  video?: InputMaybe<Scalars['ID']>
}

export type OpeningAddedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  opening: Scalars['ID']
}

export type OpeningAddedEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  opening?: InputMaybe<Scalars['ID']>
}

export type OpeningCanceledEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  opening: Scalars['ID']
}

export type OpeningCanceledEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  opening?: InputMaybe<Scalars['ID']>
}

export type OpeningFilledEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  opening: Scalars['ID']
}

export type OpeningFilledEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  opening?: InputMaybe<Scalars['ID']>
}

export type OwnedNftCreateInput = {
  creatorRoyalty?: InputMaybe<Scalars['Float']>
  metadata: Scalars['String']
  ownerMember?: InputMaybe<Scalars['ID']>
  transactionalStatus: Scalars['JSONObject']
}

export type OwnedNftUpdateInput = {
  creatorRoyalty?: InputMaybe<Scalars['Float']>
  metadata?: InputMaybe<Scalars['String']>
  ownerMember?: InputMaybe<Scalars['ID']>
  transactionalStatus?: InputMaybe<Scalars['JSONObject']>
}

export type PostAddedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  isEditable?: InputMaybe<Scalars['Boolean']>
  network: Network
  post: Scalars['ID']
  text: Scalars['String']
}

export type PostAddedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  isEditable?: InputMaybe<Scalars['Boolean']>
  network?: InputMaybe<Network>
  post?: InputMaybe<Scalars['ID']>
  text?: InputMaybe<Scalars['String']>
}

export type PostDeletedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  rationale: Scalars['String']
}

export type PostDeletedEventUpdateInput = {
  actor?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  rationale?: InputMaybe<Scalars['String']>
}

export type PostModeratedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  post: Scalars['ID']
  rationale: Scalars['String']
}

export type PostModeratedEventUpdateInput = {
  actor?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  post?: InputMaybe<Scalars['ID']>
  rationale?: InputMaybe<Scalars['String']>
}

export type PostReactedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  post: Scalars['ID']
  reactingMember: Scalars['ID']
  reactionResult: Scalars['JSONObject']
}

export type PostReactedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  post?: InputMaybe<Scalars['ID']>
  reactingMember?: InputMaybe<Scalars['ID']>
  reactionResult?: InputMaybe<Scalars['JSONObject']>
}

export type PostReactionResultValidCreateInput = {
  reaction: PostReaction
}

export type PostReactionResultValidUpdateInput = {
  reaction?: InputMaybe<PostReaction>
}

export type PostReactionResultValidWhereInput = {
  AND?: InputMaybe<Array<PostReactionResultValidWhereInput>>
  createdAt_eq?: InputMaybe<Scalars['DateTime']>
  createdAt_gt?: InputMaybe<Scalars['DateTime']>
  createdAt_gte?: InputMaybe<Scalars['DateTime']>
  createdAt_lt?: InputMaybe<Scalars['DateTime']>
  createdAt_lte?: InputMaybe<Scalars['DateTime']>
  createdById_eq?: InputMaybe<Scalars['ID']>
  createdById_in?: InputMaybe<Array<Scalars['ID']>>
  deletedAt_all?: InputMaybe<Scalars['Boolean']>
  deletedAt_eq?: InputMaybe<Scalars['DateTime']>
  deletedAt_gt?: InputMaybe<Scalars['DateTime']>
  deletedAt_gte?: InputMaybe<Scalars['DateTime']>
  deletedAt_lt?: InputMaybe<Scalars['DateTime']>
  deletedAt_lte?: InputMaybe<Scalars['DateTime']>
  deletedById_eq?: InputMaybe<Scalars['ID']>
  deletedById_in?: InputMaybe<Array<Scalars['ID']>>
  id_eq?: InputMaybe<Scalars['ID']>
  id_in?: InputMaybe<Array<Scalars['ID']>>
  OR?: InputMaybe<Array<PostReactionResultValidWhereInput>>
  reaction_eq?: InputMaybe<PostReaction>
  reaction_in?: InputMaybe<Array<PostReaction>>
  updatedAt_eq?: InputMaybe<Scalars['DateTime']>
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>
  updatedById_eq?: InputMaybe<Scalars['ID']>
  updatedById_in?: InputMaybe<Array<Scalars['ID']>>
}

export type PostReactionResultValidWhereUniqueInput = {
  id: Scalars['ID']
}

export type PostTextUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newText: Scalars['String']
  post: Scalars['ID']
}

export type PostTextUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newText?: InputMaybe<Scalars['String']>
  post?: InputMaybe<Scalars['ID']>
}

export type ProposalCancelledEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  proposal: Scalars['ID']
}

export type ProposalCancelledEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  proposal?: InputMaybe<Scalars['ID']>
}

export type ProposalCreatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  proposal: Scalars['ID']
}

export type ProposalCreatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  proposal?: InputMaybe<Scalars['ID']>
}

export type ProposalCreateInput = {
  councilApprovals: Scalars['Float']
  creator: Scalars['ID']
  description: Scalars['String']
  details: Scalars['JSONObject']
  exactExecutionBlock?: InputMaybe<Scalars['Float']>
  isFinalized?: InputMaybe<Scalars['Boolean']>
  stakingAccount?: InputMaybe<Scalars['String']>
  status: Scalars['JSONObject']
  statusSetAtBlock: Scalars['Float']
  statusSetAtTime: Scalars['DateTime']
  title: Scalars['String']
}

export type ProposalDecisionMadeEventCreateInput = {
  decisionStatus: Scalars['JSONObject']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  proposal: Scalars['ID']
}

export type ProposalDecisionMadeEventUpdateInput = {
  decisionStatus?: InputMaybe<Scalars['JSONObject']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  proposal?: InputMaybe<Scalars['ID']>
}

export type ProposalDiscussionPostCreatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  post: Scalars['ID']
  text: Scalars['String']
}

export type ProposalDiscussionPostCreatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  post?: InputMaybe<Scalars['ID']>
  text?: InputMaybe<Scalars['String']>
}

export type ProposalDiscussionPostCreateInput = {
  author: Scalars['ID']
  discussionThread: Scalars['ID']
  isVisible: Scalars['Boolean']
  repliesTo?: InputMaybe<Scalars['ID']>
  status: Scalars['JSONObject']
  text: Scalars['String']
}

export type ProposalDiscussionPostDeletedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  post: Scalars['ID']
}

export type ProposalDiscussionPostDeletedEventUpdateInput = {
  actor?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  post?: InputMaybe<Scalars['ID']>
}

export type ProposalDiscussionPostUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  post: Scalars['ID']
  text: Scalars['String']
}

export type ProposalDiscussionPostUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  post?: InputMaybe<Scalars['ID']>
  text?: InputMaybe<Scalars['String']>
}

export type ProposalDiscussionPostUpdateInput = {
  author?: InputMaybe<Scalars['ID']>
  discussionThread?: InputMaybe<Scalars['ID']>
  isVisible?: InputMaybe<Scalars['Boolean']>
  repliesTo?: InputMaybe<Scalars['ID']>
  status?: InputMaybe<Scalars['JSONObject']>
  text?: InputMaybe<Scalars['String']>
}

export type ProposalDiscussionThreadCreateInput = {
  mode: Scalars['JSONObject']
  proposal: Scalars['ID']
}

export type ProposalDiscussionThreadModeChangedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newMode: Scalars['JSONObject']
  thread: Scalars['ID']
}

export type ProposalDiscussionThreadModeChangedEventUpdateInput = {
  actor?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newMode?: InputMaybe<Scalars['JSONObject']>
  thread?: InputMaybe<Scalars['ID']>
}

export type ProposalDiscussionThreadUpdateInput = {
  mode?: InputMaybe<Scalars['JSONObject']>
  proposal?: InputMaybe<Scalars['ID']>
}

export type ProposalDiscussionWhitelistCreateInput = {
  phantom?: InputMaybe<Scalars['Float']>
}

export type ProposalDiscussionWhitelistUpdateInput = {
  phantom?: InputMaybe<Scalars['Float']>
}

export type ProposalExecutedEventCreateInput = {
  executionStatus: Scalars['JSONObject']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  proposal: Scalars['ID']
}

export type ProposalExecutedEventUpdateInput = {
  executionStatus?: InputMaybe<Scalars['JSONObject']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  proposal?: InputMaybe<Scalars['ID']>
}

export type ProposalStatusUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newStatus: Scalars['JSONObject']
  proposal: Scalars['ID']
}

export type ProposalStatusUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newStatus?: InputMaybe<Scalars['JSONObject']>
  proposal?: InputMaybe<Scalars['ID']>
}

export type ProposalUpdateInput = {
  councilApprovals?: InputMaybe<Scalars['Float']>
  creator?: InputMaybe<Scalars['ID']>
  description?: InputMaybe<Scalars['String']>
  details?: InputMaybe<Scalars['JSONObject']>
  exactExecutionBlock?: InputMaybe<Scalars['Float']>
  isFinalized?: InputMaybe<Scalars['Boolean']>
  stakingAccount?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['JSONObject']>
  statusSetAtBlock?: InputMaybe<Scalars['Float']>
  statusSetAtTime?: InputMaybe<Scalars['DateTime']>
  title?: InputMaybe<Scalars['String']>
}

export type ProposalVotedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  proposal: Scalars['ID']
  rationale: Scalars['String']
  voteKind: ProposalVoteKind
  voter: Scalars['ID']
  votingRound: Scalars['Float']
}

export type ProposalVotedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  proposal?: InputMaybe<Scalars['ID']>
  rationale?: InputMaybe<Scalars['String']>
  voteKind?: InputMaybe<ProposalVoteKind>
  voter?: InputMaybe<Scalars['ID']>
  votingRound?: InputMaybe<Scalars['Float']>
}

export type ReferendumFinishedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type ReferendumFinishedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type ReferendumStageRevealingCreateInput = {
  electionRound: Scalars['ID']
  startedAtBlock: Scalars['String']
  winningTargetCount: Scalars['String']
}

export type ReferendumStageRevealingUpdateInput = {
  electionRound?: InputMaybe<Scalars['ID']>
  startedAtBlock?: InputMaybe<Scalars['String']>
  winningTargetCount?: InputMaybe<Scalars['String']>
}

export type ReferendumStageVotingCreateInput = {
  electionRound: Scalars['ID']
  startedAtBlock: Scalars['String']
  winningTargetCount: Scalars['String']
}

export type ReferendumStageVotingUpdateInput = {
  electionRound?: InputMaybe<Scalars['ID']>
  startedAtBlock?: InputMaybe<Scalars['String']>
  winningTargetCount?: InputMaybe<Scalars['String']>
}

export type ReferendumStartedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  winningTargetCount: Scalars['String']
}

export type ReferendumStartedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  winningTargetCount?: InputMaybe<Scalars['String']>
}

export type ReferendumStartedForcefullyEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  winningTargetCount: Scalars['String']
}

export type ReferendumStartedForcefullyEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  winningTargetCount?: InputMaybe<Scalars['String']>
}

export type ReferralCutUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newValue: Scalars['Float']
}

export type ReferralCutUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newValue?: InputMaybe<Scalars['Float']>
}

export type RequestFundedEventCreateInput = {
  account: Scalars['String']
  amount: Scalars['String']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type RequestFundedEventUpdateInput = {
  account?: InputMaybe<Scalars['String']>
  amount?: InputMaybe<Scalars['String']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type RevealingStageStartedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type RevealingStageStartedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type RewardPaidEventCreateInput = {
  amount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  paymentType: RewardPaymentType
  rewardAccount: Scalars['String']
  worker: Scalars['ID']
}

export type RewardPaidEventUpdateInput = {
  amount?: InputMaybe<Scalars['String']>
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  paymentType?: InputMaybe<RewardPaymentType>
  rewardAccount?: InputMaybe<Scalars['String']>
  worker?: InputMaybe<Scalars['ID']>
}

export type RewardPaymentEventCreateInput = {
  councilMember: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  missingBalance: Scalars['String']
  network: Network
  paidBalance: Scalars['String']
  rewardAccount: Scalars['String']
}

export type RewardPaymentEventUpdateInput = {
  councilMember?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  missingBalance?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  paidBalance?: InputMaybe<Scalars['String']>
  rewardAccount?: InputMaybe<Scalars['String']>
}

export type RuntimeWasmBytecodeCreateInput = {
  bytecode: Scalars['String']
}

export type RuntimeWasmBytecodeUpdateInput = {
  bytecode?: InputMaybe<Scalars['String']>
}

export type StakeDecreasedEventCreateInput = {
  amount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  worker: Scalars['ID']
}

export type StakeDecreasedEventUpdateInput = {
  amount?: InputMaybe<Scalars['String']>
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  worker?: InputMaybe<Scalars['ID']>
}

export type StakeIncreasedEventCreateInput = {
  amount: Scalars['String']
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  worker: Scalars['ID']
}

export type StakeIncreasedEventUpdateInput = {
  amount?: InputMaybe<Scalars['String']>
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  worker?: InputMaybe<Scalars['ID']>
}

export type StakeReleasedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  stakingAccount: Scalars['String']
}

export type StakeReleasedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  stakingAccount?: InputMaybe<Scalars['String']>
}

export type StakeSlashedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  rationale?: InputMaybe<Scalars['String']>
  requestedAmount: Scalars['String']
  slashedAmount: Scalars['String']
  worker: Scalars['ID']
}

export type StakeSlashedEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  rationale?: InputMaybe<Scalars['String']>
  requestedAmount?: InputMaybe<Scalars['String']>
  slashedAmount?: InputMaybe<Scalars['String']>
  worker?: InputMaybe<Scalars['ID']>
}

export type StakingAccountAddedEventCreateInput = {
  account: Scalars['String']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
}

export type StakingAccountAddedEventUpdateInput = {
  account?: InputMaybe<Scalars['String']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
}

export type StakingAccountConfirmedEventCreateInput = {
  account: Scalars['String']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
}

export type StakingAccountConfirmedEventUpdateInput = {
  account?: InputMaybe<Scalars['String']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
}

export type StakingAccountRemovedEventCreateInput = {
  account: Scalars['String']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  member: Scalars['ID']
  network: Network
}

export type StakingAccountRemovedEventUpdateInput = {
  account?: InputMaybe<Scalars['String']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  member?: InputMaybe<Scalars['ID']>
  network?: InputMaybe<Network>
}

export type StandardDeleteResponse = {
  id: Scalars['ID']
}

export type StatusTextChangedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  metadata?: InputMaybe<Scalars['String']>
  network: Network
  result: Scalars['JSONObject']
}

export type StatusTextChangedEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  metadata?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  result?: InputMaybe<Scalars['JSONObject']>
}

export type StorageBagCreateInput = {
  owner: Scalars['JSONObject']
}

export type StorageBagUpdateInput = {
  owner?: InputMaybe<Scalars['JSONObject']>
}

export type StorageBucketCreateInput = {
  acceptingNewBags: Scalars['Boolean']
  dataObjectCountLimit: Scalars['String']
  dataObjectsCount: Scalars['String']
  dataObjectsSize: Scalars['String']
  dataObjectsSizeLimit: Scalars['String']
  operatorMetadata?: InputMaybe<Scalars['ID']>
  operatorStatus: Scalars['JSONObject']
}

export type StorageBucketOperatorMetadataCreateInput = {
  extra?: InputMaybe<Scalars['String']>
  nodeEndpoint?: InputMaybe<Scalars['String']>
  nodeLocation?: InputMaybe<Scalars['ID']>
}

export type StorageBucketOperatorMetadataUpdateInput = {
  extra?: InputMaybe<Scalars['String']>
  nodeEndpoint?: InputMaybe<Scalars['String']>
  nodeLocation?: InputMaybe<Scalars['ID']>
}

export type StorageBucketUpdateInput = {
  acceptingNewBags?: InputMaybe<Scalars['Boolean']>
  dataObjectCountLimit?: InputMaybe<Scalars['String']>
  dataObjectsCount?: InputMaybe<Scalars['String']>
  dataObjectsSize?: InputMaybe<Scalars['String']>
  dataObjectsSizeLimit?: InputMaybe<Scalars['String']>
  operatorMetadata?: InputMaybe<Scalars['ID']>
  operatorStatus?: InputMaybe<Scalars['JSONObject']>
}

export type StorageDataObjectCreateInput = {
  deletionPrize: Scalars['String']
  ipfsHash: Scalars['String']
  isAccepted: Scalars['Boolean']
  size: Scalars['String']
  storageBag: Scalars['ID']
  type: Scalars['JSONObject']
  unsetAt?: InputMaybe<Scalars['DateTime']>
}

export type StorageDataObjectUpdateInput = {
  deletionPrize?: InputMaybe<Scalars['String']>
  ipfsHash?: InputMaybe<Scalars['String']>
  isAccepted?: InputMaybe<Scalars['Boolean']>
  size?: InputMaybe<Scalars['String']>
  storageBag?: InputMaybe<Scalars['ID']>
  type?: InputMaybe<Scalars['JSONObject']>
  unsetAt?: InputMaybe<Scalars['DateTime']>
}

export type StorageSystemParametersCreateInput = {
  blacklist: Array<Scalars['String']>
  dataObjectFeePerMb: Scalars['String']
  distributionBucketsPerBagLimit: Scalars['Float']
  nextDataObjectId: Scalars['String']
  storageBucketMaxObjectsCountLimit: Scalars['String']
  storageBucketMaxObjectsSizeLimit: Scalars['String']
  storageBucketsPerBagLimit: Scalars['Float']
  uploadingBlocked: Scalars['Boolean']
}

export type StorageSystemParametersUpdateInput = {
  blacklist?: InputMaybe<Array<Scalars['String']>>
  dataObjectFeePerMb?: InputMaybe<Scalars['String']>
  distributionBucketsPerBagLimit?: InputMaybe<Scalars['Float']>
  nextDataObjectId?: InputMaybe<Scalars['String']>
  storageBucketMaxObjectsCountLimit?: InputMaybe<Scalars['String']>
  storageBucketMaxObjectsSizeLimit?: InputMaybe<Scalars['String']>
  storageBucketsPerBagLimit?: InputMaybe<Scalars['Float']>
  uploadingBlocked?: InputMaybe<Scalars['Boolean']>
}

export type TerminatedLeaderEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  penalty?: InputMaybe<Scalars['String']>
  rationale?: InputMaybe<Scalars['String']>
  worker: Scalars['ID']
}

export type TerminatedLeaderEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  penalty?: InputMaybe<Scalars['String']>
  rationale?: InputMaybe<Scalars['String']>
  worker?: InputMaybe<Scalars['ID']>
}

export type TerminatedWorkerEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  penalty?: InputMaybe<Scalars['String']>
  rationale?: InputMaybe<Scalars['String']>
  worker: Scalars['ID']
}

export type TerminatedWorkerEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  penalty?: InputMaybe<Scalars['String']>
  rationale?: InputMaybe<Scalars['String']>
  worker?: InputMaybe<Scalars['ID']>
}

export type ThreadCreatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  text: Scalars['String']
  thread: Scalars['ID']
  title: Scalars['String']
}

export type ThreadCreatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  text?: InputMaybe<Scalars['String']>
  thread?: InputMaybe<Scalars['ID']>
  title?: InputMaybe<Scalars['String']>
}

export type ThreadDeletedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  thread: Scalars['ID']
}

export type ThreadDeletedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  thread?: InputMaybe<Scalars['ID']>
}

export type ThreadMetadataUpdatedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newTitle?: InputMaybe<Scalars['String']>
  thread: Scalars['ID']
}

export type ThreadMetadataUpdatedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newTitle?: InputMaybe<Scalars['String']>
  thread?: InputMaybe<Scalars['ID']>
}

export type ThreadModeratedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  rationale: Scalars['String']
  thread: Scalars['ID']
}

export type ThreadModeratedEventUpdateInput = {
  actor?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  rationale?: InputMaybe<Scalars['String']>
  thread?: InputMaybe<Scalars['ID']>
}

export type ThreadMovedEventCreateInput = {
  actor: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newCategory: Scalars['ID']
  oldCategory: Scalars['ID']
  thread: Scalars['ID']
}

export type ThreadMovedEventUpdateInput = {
  actor?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newCategory?: InputMaybe<Scalars['ID']>
  oldCategory?: InputMaybe<Scalars['ID']>
  thread?: InputMaybe<Scalars['ID']>
}

export type TransactionalStatusUpdateCreateInput = {
  changedAt: Scalars['Float']
  nft: Scalars['ID']
  transactionalStatus: Scalars['JSONObject']
}

export type TransactionalStatusUpdateUpdateInput = {
  changedAt?: InputMaybe<Scalars['Float']>
  nft?: InputMaybe<Scalars['ID']>
  transactionalStatus?: InputMaybe<Scalars['JSONObject']>
}

export type UpcomingWorkingGroupOpeningCreateInput = {
  createdInEvent: Scalars['ID']
  expectedStart?: InputMaybe<Scalars['DateTime']>
  group: Scalars['ID']
  metadata: Scalars['ID']
  rewardPerBlock?: InputMaybe<Scalars['String']>
  stakeAmount?: InputMaybe<Scalars['String']>
}

export type UpcomingWorkingGroupOpeningUpdateInput = {
  createdInEvent?: InputMaybe<Scalars['ID']>
  expectedStart?: InputMaybe<Scalars['DateTime']>
  group?: InputMaybe<Scalars['ID']>
  metadata?: InputMaybe<Scalars['ID']>
  rewardPerBlock?: InputMaybe<Scalars['String']>
  stakeAmount?: InputMaybe<Scalars['String']>
}

export type VideoCategoryCreateInput = {
  activeVideosCounter: Scalars['Float']
  createdInBlock: Scalars['Float']
  name?: InputMaybe<Scalars['String']>
}

export type VideoCategoryUpdateInput = {
  activeVideosCounter?: InputMaybe<Scalars['Float']>
  createdInBlock?: InputMaybe<Scalars['Float']>
  name?: InputMaybe<Scalars['String']>
}

export type VideoCreateInput = {
  category?: InputMaybe<Scalars['ID']>
  createdInBlock: Scalars['Float']
  description?: InputMaybe<Scalars['String']>
  duration?: InputMaybe<Scalars['Float']>
  hasMarketing?: InputMaybe<Scalars['Boolean']>
  channel: Scalars['ID']
  isCensored: Scalars['Boolean']
  isExplicit?: InputMaybe<Scalars['Boolean']>
  isFeatured: Scalars['Boolean']
  isPublic?: InputMaybe<Scalars['Boolean']>
  language?: InputMaybe<Scalars['ID']>
  license?: InputMaybe<Scalars['ID']>
  media?: InputMaybe<Scalars['ID']>
  mediaMetadata?: InputMaybe<Scalars['ID']>
  nft?: InputMaybe<Scalars['ID']>
  publishedBeforeJoystream?: InputMaybe<Scalars['DateTime']>
  thumbnailPhoto?: InputMaybe<Scalars['ID']>
  title?: InputMaybe<Scalars['String']>
}

export type VideoMediaEncodingCreateInput = {
  codecName?: InputMaybe<Scalars['String']>
  container?: InputMaybe<Scalars['String']>
  mimeMediaType?: InputMaybe<Scalars['String']>
}

export type VideoMediaEncodingUpdateInput = {
  codecName?: InputMaybe<Scalars['String']>
  container?: InputMaybe<Scalars['String']>
  mimeMediaType?: InputMaybe<Scalars['String']>
}

export type VideoMediaMetadataCreateInput = {
  createdInBlock: Scalars['Float']
  encoding?: InputMaybe<Scalars['ID']>
  pixelHeight?: InputMaybe<Scalars['Float']>
  pixelWidth?: InputMaybe<Scalars['Float']>
  size?: InputMaybe<Scalars['String']>
}

export type VideoMediaMetadataUpdateInput = {
  createdInBlock?: InputMaybe<Scalars['Float']>
  encoding?: InputMaybe<Scalars['ID']>
  pixelHeight?: InputMaybe<Scalars['Float']>
  pixelWidth?: InputMaybe<Scalars['Float']>
  size?: InputMaybe<Scalars['String']>
}

export type VideoUpdateInput = {
  category?: InputMaybe<Scalars['ID']>
  createdInBlock?: InputMaybe<Scalars['Float']>
  description?: InputMaybe<Scalars['String']>
  duration?: InputMaybe<Scalars['Float']>
  hasMarketing?: InputMaybe<Scalars['Boolean']>
  channel?: InputMaybe<Scalars['ID']>
  isCensored?: InputMaybe<Scalars['Boolean']>
  isExplicit?: InputMaybe<Scalars['Boolean']>
  isFeatured?: InputMaybe<Scalars['Boolean']>
  isPublic?: InputMaybe<Scalars['Boolean']>
  language?: InputMaybe<Scalars['ID']>
  license?: InputMaybe<Scalars['ID']>
  media?: InputMaybe<Scalars['ID']>
  mediaMetadata?: InputMaybe<Scalars['ID']>
  nft?: InputMaybe<Scalars['ID']>
  publishedBeforeJoystream?: InputMaybe<Scalars['DateTime']>
  thumbnailPhoto?: InputMaybe<Scalars['ID']>
  title?: InputMaybe<Scalars['String']>
}

export type VoteCastEventCreateInput = {
  castVote: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type VoteCastEventUpdateInput = {
  castVote?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type VoteOnPollEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  pollAlternative: Scalars['ID']
  votingMember: Scalars['ID']
}

export type VoteOnPollEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  pollAlternative?: InputMaybe<Scalars['ID']>
  votingMember?: InputMaybe<Scalars['ID']>
}

export type VoteRevealedEventCreateInput = {
  castVote: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
}

export type VoteRevealedEventUpdateInput = {
  castVote?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
}

export type VotingPeriodStartedEventCreateInput = {
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  numOfCandidates: Scalars['String']
}

export type VotingPeriodStartedEventUpdateInput = {
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  numOfCandidates?: InputMaybe<Scalars['String']>
}

export type WorkerCreateInput = {
  application: Scalars['ID']
  entry: Scalars['ID']
  group: Scalars['ID']
  groupId: Scalars['String']
  isActive: Scalars['Boolean']
  isLead: Scalars['Boolean']
  membership: Scalars['ID']
  missingRewardAmount?: InputMaybe<Scalars['String']>
  rewardAccount: Scalars['String']
  rewardPerBlock: Scalars['String']
  roleAccount: Scalars['String']
  runtimeId: Scalars['Float']
  stake: Scalars['String']
  stakeAccount: Scalars['String']
  status: Scalars['JSONObject']
  storage?: InputMaybe<Scalars['String']>
}

export type WorkerExitedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  worker: Scalars['ID']
}

export type WorkerExitedEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  worker?: InputMaybe<Scalars['ID']>
}

export type WorkerRewardAccountUpdatedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newRewardAccount: Scalars['String']
  worker: Scalars['ID']
}

export type WorkerRewardAccountUpdatedEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newRewardAccount?: InputMaybe<Scalars['String']>
  worker?: InputMaybe<Scalars['ID']>
}

export type WorkerRewardAmountUpdatedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newRewardPerBlock: Scalars['String']
  worker: Scalars['ID']
}

export type WorkerRewardAmountUpdatedEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newRewardPerBlock?: InputMaybe<Scalars['String']>
  worker?: InputMaybe<Scalars['ID']>
}

export type WorkerRoleAccountUpdatedEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  newRoleAccount: Scalars['String']
  worker: Scalars['ID']
}

export type WorkerRoleAccountUpdatedEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  newRoleAccount?: InputMaybe<Scalars['String']>
  worker?: InputMaybe<Scalars['ID']>
}

export type WorkerStartedLeavingEventCreateInput = {
  group: Scalars['ID']
  inBlock: Scalars['Float']
  indexInBlock: Scalars['Float']
  inExtrinsic?: InputMaybe<Scalars['String']>
  network: Network
  rationale?: InputMaybe<Scalars['String']>
  worker: Scalars['ID']
}

export type WorkerStartedLeavingEventUpdateInput = {
  group?: InputMaybe<Scalars['ID']>
  inBlock?: InputMaybe<Scalars['Float']>
  indexInBlock?: InputMaybe<Scalars['Float']>
  inExtrinsic?: InputMaybe<Scalars['String']>
  network?: InputMaybe<Network>
  rationale?: InputMaybe<Scalars['String']>
  worker?: InputMaybe<Scalars['ID']>
}

export type WorkerUpdateInput = {
  application?: InputMaybe<Scalars['ID']>
  entry?: InputMaybe<Scalars['ID']>
  group?: InputMaybe<Scalars['ID']>
  groupId?: InputMaybe<Scalars['String']>
  isActive?: InputMaybe<Scalars['Boolean']>
  isLead?: InputMaybe<Scalars['Boolean']>
  membership?: InputMaybe<Scalars['ID']>
  missingRewardAmount?: InputMaybe<Scalars['String']>
  rewardAccount?: InputMaybe<Scalars['String']>
  rewardPerBlock?: InputMaybe<Scalars['String']>
  roleAccount?: InputMaybe<Scalars['String']>
  runtimeId?: InputMaybe<Scalars['Float']>
  stake?: InputMaybe<Scalars['String']>
  stakeAccount?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['JSONObject']>
  storage?: InputMaybe<Scalars['String']>
}

export type WorkingGroupApplicationCreateInput = {
  applicant: Scalars['ID']
  opening: Scalars['ID']
  rewardAccount: Scalars['String']
  roleAccount: Scalars['String']
  runtimeId: Scalars['Float']
  stake: Scalars['String']
  stakingAccount: Scalars['String']
  status: Scalars['JSONObject']
}

export type WorkingGroupApplicationUpdateInput = {
  applicant?: InputMaybe<Scalars['ID']>
  opening?: InputMaybe<Scalars['ID']>
  rewardAccount?: InputMaybe<Scalars['String']>
  roleAccount?: InputMaybe<Scalars['String']>
  runtimeId?: InputMaybe<Scalars['Float']>
  stake?: InputMaybe<Scalars['String']>
  stakingAccount?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['JSONObject']>
}

export type WorkingGroupCreateInput = {
  budget: Scalars['String']
  leader?: InputMaybe<Scalars['ID']>
  metadata?: InputMaybe<Scalars['ID']>
  name: Scalars['String']
}

export type WorkingGroupMetadataCreateInput = {
  about?: InputMaybe<Scalars['String']>
  description?: InputMaybe<Scalars['String']>
  group: Scalars['ID']
  setInEvent: Scalars['ID']
  status?: InputMaybe<Scalars['String']>
  statusMessage?: InputMaybe<Scalars['String']>
}

export type WorkingGroupMetadataUpdateInput = {
  about?: InputMaybe<Scalars['String']>
  description?: InputMaybe<Scalars['String']>
  group?: InputMaybe<Scalars['ID']>
  setInEvent?: InputMaybe<Scalars['ID']>
  status?: InputMaybe<Scalars['String']>
  statusMessage?: InputMaybe<Scalars['String']>
}

export type WorkingGroupOpeningCreateInput = {
  createdAt: Scalars['DateTime']
  group: Scalars['ID']
  metadata: Scalars['ID']
  rewardPerBlock: Scalars['String']
  runtimeId: Scalars['Float']
  stakeAmount: Scalars['String']
  status: Scalars['JSONObject']
  type: WorkingGroupOpeningType
  unstakingPeriod: Scalars['Float']
}

export type WorkingGroupOpeningMetadataCreateInput = {
  applicationDetails?: InputMaybe<Scalars['String']>
  description?: InputMaybe<Scalars['String']>
  expectedEnding?: InputMaybe<Scalars['DateTime']>
  hiringLimit?: InputMaybe<Scalars['Float']>
  originallyValid: Scalars['Boolean']
  shortDescription?: InputMaybe<Scalars['String']>
}

export type WorkingGroupOpeningMetadataUpdateInput = {
  applicationDetails?: InputMaybe<Scalars['String']>
  description?: InputMaybe<Scalars['String']>
  expectedEnding?: InputMaybe<Scalars['DateTime']>
  hiringLimit?: InputMaybe<Scalars['Float']>
  originallyValid?: InputMaybe<Scalars['Boolean']>
  shortDescription?: InputMaybe<Scalars['String']>
}

export type WorkingGroupOpeningUpdateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>
  group?: InputMaybe<Scalars['ID']>
  metadata?: InputMaybe<Scalars['ID']>
  rewardPerBlock?: InputMaybe<Scalars['String']>
  runtimeId?: InputMaybe<Scalars['Float']>
  stakeAmount?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['JSONObject']>
  type?: InputMaybe<WorkingGroupOpeningType>
  unstakingPeriod?: InputMaybe<Scalars['Float']>
}

export type WorkingGroupUpdateInput = {
  budget?: InputMaybe<Scalars['String']>
  leader?: InputMaybe<Scalars['ID']>
  metadata?: InputMaybe<Scalars['ID']>
  name?: InputMaybe<Scalars['String']>
}
