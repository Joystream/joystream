// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for referendum
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=referendum
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/referendum/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for referendum.
pub trait WeightInfo {
	fn on_initialize_revealing(_i: u32, ) -> Weight;
	fn on_initialize_voting() -> Weight;
	fn add_account_to_blacklist() -> Weight;
	fn vote() -> Weight;
	fn reveal_vote_space_for_new_winner(_i: u32, ) -> Weight;
	fn reveal_vote_space_not_in_winners(_i: u32, ) -> Weight;
	fn reveal_vote_space_replace_last_winner(_i: u32, ) -> Weight;
	fn reveal_vote_already_existing(_i: u32, ) -> Weight;
	fn release_vote_stake() -> Weight;
}

/// Weights for referendum using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:1)
	// Storage: Council Stage (r:0 w:1)
	fn on_initialize_revealing(i: u32, ) -> Weight {
		(27_114_000 as Weight)
			// Standard Error: 106_000
			.saturating_add((1_516_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	fn on_initialize_voting() -> Weight {
		(15_263_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance1Referendum AccountsBlacklist (r:0 w:1)
	fn add_account_to_blacklist() -> Weight {
		(12_028_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance1Referendum Stage (r:1 w:0)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Instance1Referendum AccountsBlacklist (r:1 w:0)
	fn vote() -> Weight {
		(39_211_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Storage: Council Candidates (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	fn reveal_vote_space_for_new_winner(i: u32, ) -> Weight {
		(37_777_000 as Weight)
			// Standard Error: 296_000
			.saturating_add((2_101_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Storage: Council Candidates (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	fn reveal_vote_space_not_in_winners(i: u32, ) -> Weight {
		(40_115_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((1_038_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Storage: Council Candidates (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	fn reveal_vote_space_replace_last_winner(i: u32, ) -> Weight {
		(39_799_000 as Weight)
			// Standard Error: 112_000
			.saturating_add((1_596_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Storage: Council Candidates (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	fn reveal_vote_already_existing(i: u32, ) -> Weight {
		(38_872_000 as Weight)
			// Standard Error: 102_000
			.saturating_add((1_946_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn release_vote_stake() -> Weight {
		(38_437_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn on_initialize_revealing(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_voting() -> Weight {
		0
	}
	fn add_account_to_blacklist() -> Weight {
		0
	}
	fn vote() -> Weight {
		0
	}
	fn reveal_vote_space_for_new_winner(i: u32, ) -> Weight {
		0
	}
	fn reveal_vote_space_not_in_winners(i: u32, ) -> Weight {
		0
	}
	fn reveal_vote_space_replace_last_winner(i: u32, ) -> Weight {
		0
	}
	fn reveal_vote_already_existing(i: u32, ) -> Weight {
		0
	}
	fn release_vote_stake() -> Weight {
		0
	}
}
