// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for referendum
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=referendum
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/referendum/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for referendum.
pub trait WeightInfo {
	fn on_initialize_revealing(_i: u32, ) -> Weight;
	fn on_initialize_voting() -> Weight;
	fn vote() -> Weight;
	fn reveal_vote_space_for_new_winner(_i: u32, ) -> Weight;
	fn reveal_vote_space_not_in_winners(_i: u32, ) -> Weight;
	fn reveal_vote_space_replace_last_winner(_i: u32, ) -> Weight;
	fn reveal_vote_already_existing(_i: u32, ) -> Weight;
	fn release_vote_stake() -> Weight;
	fn opt_out_of_voting() -> Weight;
}

/// Weights for referendum using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Proof: Instance1Referendum Stage (max_values: Some(1), max_size: Some(94), added: 589, mode: MaxEncodedLen)
	// Storage: Council AnnouncementPeriodNr (r:1 w:1)
	// Proof: Council AnnouncementPeriodNr (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Council Stage (r:0 w:1)
	// Proof: Council Stage (max_values: Some(1), max_size: Some(13), added: 508, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 2]`.
	fn on_initialize_revealing(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `474 + i * (26 ±0)`
		//  Estimated: `3072`
		// Minimum execution time: 23_743 nanoseconds.
		Weight::from_parts(24_926_812, 0u64)
			.saturating_add(Weight::from_parts(0, 3072))
			// Standard Error: 20_646
			.saturating_add(Weight::from_parts(965_895, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Proof: Instance1Referendum Stage (max_values: Some(1), max_size: Some(94), added: 589, mode: MaxEncodedLen)
	fn on_initialize_voting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128`
		//  Estimated: `1579`
		// Minimum execution time: 12_531 nanoseconds.
		Weight::from_parts(13_030_000, 0u64)
			.saturating_add(Weight::from_parts(0, 1579))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance1Referendum AccountsOptedOut (r:1 w:0)
	// Proof: Instance1Referendum AccountsOptedOut (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Instance1Referendum Stage (r:1 w:0)
	// Proof: Instance1Referendum Stage (max_values: Some(1), max_size: Some(94), added: 589, mode: MaxEncodedLen)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Proof: Instance1Referendum Votes (max_values: None, max_size: Some(113), added: 2588, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn vote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `291`
		//  Estimated: `17027`
		// Minimum execution time: 38_617 nanoseconds.
		Weight::from_parts(39_844_000, 0u64)
			.saturating_add(Weight::from_parts(0, 17027))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Proof: Instance1Referendum Stage (max_values: Some(1), max_size: Some(94), added: 589, mode: MaxEncodedLen)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Proof: Instance1Referendum Votes (max_values: None, max_size: Some(113), added: 2588, mode: MaxEncodedLen)
	// Storage: Council Candidates (r:1 w:1)
	// Proof: Council Candidates (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Proof: Council AnnouncementPeriodNr (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 2]`.
	fn reveal_vote_space_for_new_winner(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `690 + i * (100 ±0)`
		//  Estimated: `10276`
		// Minimum execution time: 39_963 nanoseconds.
		Weight::from_parts(42_083_067, 0u64)
			.saturating_add(Weight::from_parts(0, 10276))
			// Standard Error: 33_840
			.saturating_add(Weight::from_parts(1_954_615, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Proof: Instance1Referendum Stage (max_values: Some(1), max_size: Some(94), added: 589, mode: MaxEncodedLen)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Proof: Instance1Referendum Votes (max_values: None, max_size: Some(113), added: 2588, mode: MaxEncodedLen)
	// Storage: Council Candidates (r:1 w:1)
	// Proof: Council Candidates (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Proof: Council AnnouncementPeriodNr (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 2]`.
	fn reveal_vote_space_not_in_winners(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `790 + i * (93 ±0)`
		//  Estimated: `10276`
		// Minimum execution time: 41_645 nanoseconds.
		Weight::from_parts(43_641_575, 0u64)
			.saturating_add(Weight::from_parts(0, 10276))
			// Standard Error: 31_470
			.saturating_add(Weight::from_parts(1_200_351, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Proof: Instance1Referendum Stage (max_values: Some(1), max_size: Some(94), added: 589, mode: MaxEncodedLen)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Proof: Instance1Referendum Votes (max_values: None, max_size: Some(113), added: 2588, mode: MaxEncodedLen)
	// Storage: Council Candidates (r:1 w:1)
	// Proof: Council Candidates (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Proof: Council AnnouncementPeriodNr (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 2]`.
	fn reveal_vote_space_replace_last_winner(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `790 + i * (93 ±0)`
		//  Estimated: `10276`
		// Minimum execution time: 41_606 nanoseconds.
		Weight::from_parts(43_583_726, 0u64)
			.saturating_add(Weight::from_parts(0, 10276))
			// Standard Error: 37_016
			.saturating_add(Weight::from_parts(1_150_868, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance1Referendum Stage (r:1 w:1)
	// Proof: Instance1Referendum Stage (max_values: Some(1), max_size: Some(94), added: 589, mode: MaxEncodedLen)
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Proof: Instance1Referendum Votes (max_values: None, max_size: Some(113), added: 2588, mode: MaxEncodedLen)
	// Storage: Council Candidates (r:1 w:1)
	// Proof: Council Candidates (max_values: None, max_size: Some(161), added: 2636, mode: MaxEncodedLen)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Proof: Council AnnouncementPeriodNr (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 2]`.
	fn reveal_vote_already_existing(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `753 + i * (96 ±0)`
		//  Estimated: `10276`
		// Minimum execution time: 40_385 nanoseconds.
		Weight::from_parts(42_197_900, 0u64)
			.saturating_add(Weight::from_parts(0, 10276))
			// Standard Error: 32_864
			.saturating_add(Weight::from_parts(1_902_509, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance1Referendum Votes (r:1 w:1)
	// Proof: Instance1Referendum Votes (max_values: None, max_size: Some(113), added: 2588, mode: MaxEncodedLen)
	// Storage: Council AnnouncementPeriodNr (r:1 w:0)
	// Proof: Council AnnouncementPeriodNr (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn release_vote_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `783`
		//  Estimated: `13428`
		// Minimum execution time: 41_013 nanoseconds.
		Weight::from_parts(42_434_000, 0u64)
			.saturating_add(Weight::from_parts(0, 13428))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance1Referendum AccountsOptedOut (r:1 w:1)
	// Proof: Instance1Referendum AccountsOptedOut (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn opt_out_of_voting() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `72`
		//  Estimated: `3513`
		// Minimum execution time: 14_032 nanoseconds.
		Weight::from_parts(14_309_000, 0u64)
			.saturating_add(Weight::from_parts(0, 3513))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn on_initialize_revealing(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn on_initialize_voting() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn vote() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn reveal_vote_space_for_new_winner(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn reveal_vote_space_not_in_winners(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn reveal_vote_space_replace_last_winner(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn reveal_vote_already_existing(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn release_vote_stake() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn opt_out_of_voting() -> Weight {
		Weight::from_parts(0, 0)
	}
}
