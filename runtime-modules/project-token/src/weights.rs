// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for project_token
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=project_token
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/project-token/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for project_token.
pub trait WeightInfo {
	fn transfer(_o: u32, _m: u32, ) -> Weight;
	fn dust_account() -> Weight;
	fn join_whitelist(_h: u32, ) -> Weight;
	fn purchase_tokens_on_sale() -> Weight;
	fn participate_in_split() -> Weight;
	fn exit_revenue_split() -> Weight;
	fn set_frozen_status() -> Weight;
	fn burn() -> Weight;
	fn buy_on_amm_with_account_creation() -> Weight;
	fn buy_on_amm_with_existing_account() -> Weight;
	fn sell_on_amm() -> Weight;
}

/// Weights for project_token using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Token PalletFrozen (r:1 w:0)
	// Proof: Token PalletFrozen (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:25 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:25 w:25)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Token BloatBond (r:1 w:0)
	// Proof: Token BloatBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `o` is `[1, 24]`.
	/// The range of component `m` is `[1, 100]`.
	fn transfer(o: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1303 + o * (138 ±0)`
		//  Estimated: `20544 + o * (5564 ±0)`
		// Minimum execution time: 206_420 nanoseconds.
		Weight::from_parts(100_964_050, 0u64)
			.saturating_add(Weight::from_parts(0, 20544))
			// Standard Error: 50_287
			.saturating_add(Weight::from_parts(11_041_181, 0u64).saturating_mul(o.into()))
			// Standard Error: 11_975
			.saturating_add(Weight::from_parts(971_931, 0u64).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(o.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(o.into())))
			.saturating_add(Weight::from_parts(0, 5564).saturating_mul(o.into()))
	}
	// Storage: Token PalletFrozen (r:1 w:0)
	// Proof: Token PalletFrozen (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn dust_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1037`
		//  Estimated: `19043`
		// Minimum execution time: 60_546 nanoseconds.
		Weight::from_parts(62_573_000, 0u64)
			.saturating_add(Weight::from_parts(0, 19043))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Token PalletFrozen (r:1 w:0)
	// Proof: Token PalletFrozen (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Token BloatBond (r:1 w:0)
	// Proof: Token BloatBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `h` is `[1, 10]`.
	fn join_whitelist(h: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1062`
		//  Estimated: `20544`
		// Minimum execution time: 80_205 nanoseconds.
		Weight::from_parts(82_152_581, 0u64)
			.saturating_add(Weight::from_parts(0, 20544))
			// Standard Error: 14_533
			.saturating_add(Weight::from_parts(686_762, 0u64).saturating_mul(h.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Token PalletFrozen (r:1 w:0)
	// Proof: Token PalletFrozen (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token SalePlatformFee (r:1 w:0)
	// Proof: Token SalePlatformFee (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Token BloatBond (r:1 w:0)
	// Proof: Token BloatBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn purchase_tokens_on_sale() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1298`
		//  Estimated: `24636`
		// Minimum execution time: 106_921 nanoseconds.
		Weight::from_parts(109_485_000, 0u64)
			.saturating_add(Weight::from_parts(0, 24636))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Token PalletFrozen (r:1 w:0)
	// Proof: Token PalletFrozen (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn participate_in_split() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1446`
		//  Estimated: `19043`
		// Minimum execution time: 73_317 nanoseconds.
		Weight::from_parts(75_770_000, 0u64)
			.saturating_add(Weight::from_parts(0, 19043))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Token PalletFrozen (r:1 w:0)
	// Proof: Token PalletFrozen (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:0)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	fn exit_revenue_split() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1132`
		//  Estimated: `12847`
		// Minimum execution time: 42_581 nanoseconds.
		Weight::from_parts(43_405_000, 0u64)
			.saturating_add(Weight::from_parts(0, 12847))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Token PalletFrozen (r:0 w:1)
	// Proof: Token PalletFrozen (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn set_frozen_status() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_719 nanoseconds.
		Weight::from_parts(10_088_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Token PalletFrozen (r:1 w:0)
	// Proof: Token PalletFrozen (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1017`
		//  Estimated: `12847`
		// Minimum execution time: 42_932 nanoseconds.
		Weight::from_parts(44_861_000, 0u64)
			.saturating_add(Weight::from_parts(0, 12847))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Token PalletFrozen (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Token BloatBond (r:1 w:0)
	// Proof: Token BloatBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Token AmmBuyTxFees (r:1 w:0)
	// Proof: Token AmmBuyTxFees (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn buy_on_amm_with_account_creation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1044`
		//  Estimated: `20547`
		// Minimum execution time: 85_398 nanoseconds.
		Weight::from_parts(87_934_000, 0u64)
			.saturating_add(Weight::from_parts(0, 20547))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Token PalletFrozen (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Token BloatBond (r:1 w:0)
	// Proof: Token BloatBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Token AmmBuyTxFees (r:1 w:0)
	// Proof: Token AmmBuyTxFees (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn buy_on_amm_with_existing_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1044`
		//  Estimated: `20547`
		// Minimum execution time: 86_178 nanoseconds.
		Weight::from_parts(88_253_000, 0u64)
			.saturating_add(Weight::from_parts(0, 20547))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Token PalletFrozen (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Proof: Token TokenInfoById (max_values: None, max_size: Some(352), added: 2827, mode: MaxEncodedLen)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Proof: Token AccountInfoByTokenAndMember (max_values: None, max_size: Some(489), added: 2964, mode: MaxEncodedLen)
	// Storage: Token AmmSellTxFees (r:1 w:0)
	// Proof: Token AmmSellTxFees (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn sell_on_amm() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1114`
		//  Estimated: `19046`
		// Minimum execution time: 73_200 nanoseconds.
		Weight::from_parts(75_404_000, 0u64)
			.saturating_add(Weight::from_parts(0, 19046))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn transfer(o: u32, m: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn dust_account() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn join_whitelist(h: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn purchase_tokens_on_sale() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn participate_in_split() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn exit_revenue_split() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_frozen_status() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn burn() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn buy_on_amm_with_account_creation() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn buy_on_amm_with_existing_account() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn sell_on_amm() -> Weight {
		Weight::from_parts(0, 0)
	}
}
