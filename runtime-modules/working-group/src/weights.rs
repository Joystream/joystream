// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for working_group
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=working_group
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/working-group/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for working_group.
pub trait WeightInfo {
	fn on_initialize_leaving(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_with_missing_reward(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_with_missing_reward_cant_pay(_i: u32, ) -> Weight;
	fn on_initialize_rewarding_without_missing_reward(_i: u32, ) -> Weight;
	fn apply_on_opening(_i: u32, ) -> Weight;
	fn fill_opening_lead() -> Weight;
	fn fill_opening_worker(_i: u32, ) -> Weight;
	fn update_role_account() -> Weight;
	fn cancel_opening() -> Weight;
	fn withdraw_application() -> Weight;
	fn slash_stake(_i: u32, ) -> Weight;
	fn terminate_role_worker(_i: u32, ) -> Weight;
	fn terminate_role_lead(_i: u32, ) -> Weight;
	fn increase_stake() -> Weight;
	fn decrease_stake() -> Weight;
	fn spend_from_budget() -> Weight;
	fn fund_working_group_budget() -> Weight;
	fn update_reward_amount() -> Weight;
	fn set_status_text(_i: u32, ) -> Weight;
	fn update_reward_account() -> Weight;
	fn set_budget() -> Weight;
	fn add_opening(_i: u32, ) -> Weight;
	fn leave_role(_i: u32, ) -> Weight;
	fn lead_remark(_i: u32, ) -> Weight;
	fn worker_remark(_i: u32, ) -> Weight;
}

/// Weights for working_group using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:30)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:30 w:30)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:30 w:30)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_leaving(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (421 ±0)`
		//  Estimated: `10103 + i * (9027 ±0)`
		// Minimum execution time: 115_819 nanoseconds.
		Weight::from_parts(29_617_902, 0u64)
			.saturating_add(Weight::from_parts(0, 10103))
			// Standard Error: 37_643
			.saturating_add(Weight::from_parts(43_697_977, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 9027).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:30)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:30 w:30)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_rewarding_with_missing_reward(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246 + i * (310 ±0)`
		//  Estimated: `6131 + i * (5253 ±0)`
		// Minimum execution time: 102_207 nanoseconds.
		Weight::from_parts(25_714_361, 0u64)
			.saturating_add(Weight::from_parts(0, 6131))
			// Standard Error: 59_085
			.saturating_add(Weight::from_parts(39_012_046, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 5253).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:30)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:0)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_rewarding_with_missing_reward_cant_pay(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230 + i * (162 ±0)`
		//  Estimated: `5141 + i * (2650 ±0)`
		// Minimum execution time: 46_464 nanoseconds.
		Weight::from_parts(22_583_340, 0u64)
			.saturating_add(Weight::from_parts(0, 5141))
			// Standard Error: 14_440
			.saturating_add(Weight::from_parts(13_697_048, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 2650).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:31 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:30 w:30)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn on_initialize_rewarding_without_missing_reward(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `262 + i * (294 ±0)`
		//  Estimated: `6131 + i * (5253 ±0)`
		// Minimum execution time: 83_720 nanoseconds.
		Weight::from_parts(43_603_454, 0u64)
			.saturating_add(Weight::from_parts(0, 6131))
			// Standard Error: 34_868
			.saturating_add(Weight::from_parts(21_565_895, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 5253).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:0)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Proof: Membership StakingAccountIdMemberStatus (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextApplicationId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextApplicationId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ApplicationById (r:0 w:1)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	fn apply_on_opening(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `730`
		//  Estimated: `20541`
		// Minimum execution time: 58_925 nanoseconds.
		Weight::from_parts(57_796_865, 0u64)
			.saturating_add(Weight::from_parts(0, 20541))
			// Standard Error: 1_731
			.saturating_add(Weight::from_parts(1_961_679, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ApplicationById (r:1 w:1)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextWorkerId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextWorkerId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:0 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	fn fill_opening_lead() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `389`
		//  Estimated: `11687`
		// Minimum execution time: 43_224 nanoseconds.
		Weight::from_parts(45_020_000, 0u64)
			.saturating_add(Weight::from_parts(0, 11687))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:29)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ApplicationById (r:29 w:29)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextWorkerId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextWorkerId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[2, 30]`.
	fn fill_opening_worker(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `763 + i * (186 ±0)`
		//  Estimated: `23684 + i * (2378 ±6)`
		// Minimum execution time: 73_277 nanoseconds.
		Weight::from_parts(50_771_725, 0u64)
			.saturating_add(Weight::from_parts(0, 23684))
			// Standard Error: 17_657
			.saturating_add(Weight::from_parts(13_760_397, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 2378).saturating_mul(i.into()))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_role_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `641`
		//  Estimated: `7230`
		// Minimum execution time: 26_157 nanoseconds.
		Weight::from_parts(27_167_000, 0u64)
			.saturating_add(Weight::from_parts(0, 7230))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup OpeningById (r:1 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_opening() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `826`
		//  Estimated: `17069`
		// Minimum execution time: 51_771 nanoseconds.
		Weight::from_parts(53_617_000, 0u64)
			.saturating_add(Weight::from_parts(0, 17069))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance3WorkingGroup ApplicationById (r:1 w:1)
	// Proof: Instance3WorkingGroup ApplicationById (max_values: None, max_size: Some(168), added: 2643, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn withdraw_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `551`
		//  Estimated: `11990`
		// Minimum execution time: 33_956 nanoseconds.
		Weight::from_parts(35_192_000, 0u64)
			.saturating_add(Weight::from_parts(0, 11990))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn slash_stake(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833`
		//  Estimated: `16140`
		// Minimum execution time: 68_138 nanoseconds.
		Weight::from_parts(71_029_489, 0u64)
			.saturating_add(Weight::from_parts(0, 16140))
			// Standard Error: 2_465
			.saturating_add(Weight::from_parts(800_109, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn terminate_role_worker(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `836`
		//  Estimated: `19130`
		// Minimum execution time: 107_736 nanoseconds.
		Weight::from_parts(113_226_758, 0u64)
			.saturating_add(Weight::from_parts(0, 19130))
			// Standard Error: 4_336
			.saturating_add(Weight::from_parts(1_499_996, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:1)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup ActiveWorkerCount (r:1 w:1)
	// Proof: Instance3WorkingGroup ActiveWorkerCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn terminate_role_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `691`
		//  Estimated: `16480`
		// Minimum execution time: 104_005 nanoseconds.
		Weight::from_parts(110_961_526, 0u64)
			.saturating_add(Weight::from_parts(0, 16480))
			// Standard Error: 4_181
			.saturating_add(Weight::from_parts(1_481_452, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	fn increase_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688`
		//  Estimated: `11997`
		// Minimum execution time: 43_482 nanoseconds.
		Weight::from_parts(44_255_000, 0u64)
			.saturating_add(Weight::from_parts(0, 11997))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn decrease_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833`
		//  Estimated: `16140`
		// Minimum execution time: 51_547 nanoseconds.
		Weight::from_parts(53_119_000, 0u64)
			.saturating_add(Weight::from_parts(0, 16140))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn spend_from_budget() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `565`
		//  Estimated: `10227`
		// Minimum execution time: 33_571 nanoseconds.
		Weight::from_parts(35_120_000, 0u64)
			.saturating_add(Weight::from_parts(0, 10227))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn fund_working_group_budget() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `433`
		//  Estimated: `8684`
		// Minimum execution time: 36_409 nanoseconds.
		Weight::from_parts(37_278_000, 0u64)
			.saturating_add(Weight::from_parts(0, 8684))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	fn update_reward_amount() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `570`
		//  Estimated: `7783`
		// Minimum execution time: 28_617 nanoseconds.
		Weight::from_parts(30_037_000, 0u64)
			.saturating_add(Weight::from_parts(0, 7783))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup StatusTextHash (r:0 w:1)
	// Proof: Instance3WorkingGroup StatusTextHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn set_status_text(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `388`
		//  Estimated: `5133`
		// Minimum execution time: 21_974 nanoseconds.
		Weight::from_parts(23_989_814, 0u64)
			.saturating_add(Weight::from_parts(0, 5133))
			// Standard Error: 1_632
			.saturating_add(Weight::from_parts(1_675_668, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	fn update_reward_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `388`
		//  Estimated: `3640`
		// Minimum execution time: 21_747 nanoseconds.
		Weight::from_parts(22_344_000, 0u64)
			.saturating_add(Weight::from_parts(0, 3640))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup Budget (r:0 w:1)
	// Proof: Instance3WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_budget() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_211 nanoseconds.
		Weight::from_parts(10_616_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup NextOpeningId (r:1 w:1)
	// Proof: Instance3WorkingGroup NextOpeningId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup OpeningById (r:0 w:1)
	// Proof: Instance3WorkingGroup OpeningById (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn add_opening(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `688`
		//  Estimated: `14983`
		// Minimum execution time: 59_196 nanoseconds.
		Weight::from_parts(61_085_104, 0u64)
			.saturating_add(Weight::from_parts(0, 14983))
			// Standard Error: 1_496
			.saturating_add(Weight::from_parts(1_944_353, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:1)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn leave_role(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `388`
		//  Estimated: `3640`
		// Minimum execution time: 22_719 nanoseconds.
		Weight::from_parts(23_430_902, 0u64)
			.saturating_add(Weight::from_parts(0, 3640))
			// Standard Error: 1_458
			.saturating_add(Weight::from_parts(770_218, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance3WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn lead_remark(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `388`
		//  Estimated: `5133`
		// Minimum execution time: 20_111 nanoseconds.
		Weight::from_parts(21_522_148, 0u64)
			.saturating_add(Weight::from_parts(0, 5133))
			// Standard Error: 1_449
			.saturating_add(Weight::from_parts(1_032_500, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance3WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	fn worker_remark(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `425`
		//  Estimated: `3640`
		// Minimum execution time: 21_136 nanoseconds.
		Weight::from_parts(22_190_601, 0u64)
			.saturating_add(Weight::from_parts(0, 3640))
			// Standard Error: 1_040
			.saturating_add(Weight::from_parts(1_018_605, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn on_initialize_leaving(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn on_initialize_rewarding_with_missing_reward(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn on_initialize_rewarding_with_missing_reward_cant_pay(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn on_initialize_rewarding_without_missing_reward(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn apply_on_opening(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn fill_opening_lead() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn fill_opening_worker(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_role_account() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn cancel_opening() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn withdraw_application() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn slash_stake(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn terminate_role_worker(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn terminate_role_lead(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn increase_stake() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn decrease_stake() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn spend_from_budget() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn fund_working_group_budget() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_reward_amount() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_status_text(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_reward_account() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_budget() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn add_opening(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn leave_role(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn lead_remark(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn worker_remark(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
}
