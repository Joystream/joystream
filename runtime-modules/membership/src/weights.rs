// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=membership
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/membership/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for membership.
pub trait WeightInfo {
	fn buy_membership_without_referrer(_i: u32, _j: u32, ) -> Weight;
	fn buy_membership_with_referrer(_i: u32, _j: u32, ) -> Weight;
	fn update_profile(_i: u32, _j: u32, ) -> Weight;
	fn update_accounts_none() -> Weight;
	fn update_accounts_root() -> Weight;
	fn update_accounts_controller() -> Weight;
	fn update_accounts_both() -> Weight;
	fn set_referral_cut() -> Weight;
	fn transfer_invites() -> Weight;
	fn invite_member(_i: u32, _j: u32, ) -> Weight;
	fn gift_membership(_i: u32, _j: u32, ) -> Weight;
	fn set_membership_price() -> Weight;
	fn update_profile_verification() -> Weight;
	fn set_leader_invitation_quota() -> Weight;
	fn set_initial_invitation_balance() -> Weight;
	fn set_initial_invitation_count() -> Weight;
	fn add_staking_account_candidate() -> Weight;
	fn confirm_staking_account() -> Weight;
	fn remove_staking_account() -> Weight;
	fn member_remark_without_payment() -> Weight;
	fn member_remark_with_payment() -> Weight;
	fn create_member(_i: u32, _j: u32, ) -> Weight;
}

/// Weights for membership using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Membership MembershipPrice (r:1 w:0)
	// Proof: Membership MembershipPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Membership InitialInvitationCount (r:1 w:0)
	// Proof: Membership InitialInvitationCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:0 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn buy_membership_without_referrer(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `180`
		//  Estimated: `11597`
		// Minimum execution time: 124_066 nanoseconds.
		Weight::from_parts(49_859_298, 0u64)
			.saturating_add(Weight::from_parts(0, 11597))
			// Standard Error: 9_133
			.saturating_add(Weight::from_parts(1_621_936, 0u64).saturating_mul(i.into()))
			// Standard Error: 9_133
			.saturating_add(Weight::from_parts(820_862, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Membership MembershipPrice (r:1 w:0)
	// Proof: Membership MembershipPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership InitialInvitationCount (r:1 w:0)
	// Proof: Membership InitialInvitationCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Membership ReferralCut (r:1 w:0)
	// Proof: Membership ReferralCut (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn buy_membership_with_referrer(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `459`
		//  Estimated: `16673`
		// Minimum execution time: 157_415 nanoseconds.
		Weight::from_parts(67_131_450, 0u64)
			.saturating_add(Weight::from_parts(0, 16673))
			// Standard Error: 7_744
			.saturating_add(Weight::from_parts(1_630_128, 0u64).saturating_mul(i.into()))
			// Standard Error: 7_744
			.saturating_add(Weight::from_parts(1_085_601, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership MemberIdByHandleHash (r:1 w:2)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// The range of component `i` is `[0, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn update_profile(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `265`
		//  Estimated: `7111`
		// Minimum execution time: 96_191 nanoseconds.
		Weight::from_parts(30_922_914, 0u64)
			.saturating_add(Weight::from_parts(0, 7111))
			// Standard Error: 7_258
			.saturating_add(Weight::from_parts(1_737_636, 0u64).saturating_mul(i.into()))
			// Standard Error: 7_258
			.saturating_add(Weight::from_parts(835_360, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	fn update_accounts_none() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_952 nanoseconds.
		Weight::from_parts(4_270_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_accounts_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `220`
		//  Estimated: `3590`
		// Minimum execution time: 18_599 nanoseconds.
		Weight::from_parts(19_508_000, 0u64)
			.saturating_add(Weight::from_parts(0, 3590))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_accounts_controller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `220`
		//  Estimated: `3590`
		// Minimum execution time: 18_492 nanoseconds.
		Weight::from_parts(19_360_000, 0u64)
			.saturating_add(Weight::from_parts(0, 3590))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_accounts_both() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `220`
		//  Estimated: `3590`
		// Minimum execution time: 18_329 nanoseconds.
		Weight::from_parts(19_186_000, 0u64)
			.saturating_add(Weight::from_parts(0, 3590))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership ReferralCut (r:0 w:1)
	// Proof: Membership ReferralCut (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn set_referral_cut() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_762 nanoseconds.
		Weight::from_parts(10_034_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:2 w:2)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn transfer_invites() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `356`
		//  Estimated: `6190`
		// Minimum execution time: 25_625 nanoseconds.
		Weight::from_parts(26_264_000, 0u64)
			.saturating_add(Weight::from_parts(0, 6190))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Membership MembershipById (r:1 w:2)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Instance6WorkingGroup Budget (r:1 w:1)
	// Proof: Instance6WorkingGroup Budget (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Membership InitialInvitationBalance (r:1 w:0)
	// Proof: Membership InitialInvitationBalance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn invite_member(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `518`
		//  Estimated: `19963`
		// Minimum execution time: 143_149 nanoseconds.
		Weight::from_parts(71_819_302, 0u64)
			.saturating_add(Weight::from_parts(0, 19963))
			// Standard Error: 7_766
			.saturating_add(Weight::from_parts(1_606_300, 0u64).saturating_mul(i.into()))
			// Standard Error: 7_674
			.saturating_add(Weight::from_parts(798_967, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Membership MembershipPrice (r:1 w:0)
	// Proof: Membership MembershipPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:3)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:2 w:2)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:0 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn gift_membership(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260`
		//  Estimated: `23852`
		// Minimum execution time: 203_829 nanoseconds.
		Weight::from_parts(130_217_562, 0u64)
			.saturating_add(Weight::from_parts(0, 23852))
			// Standard Error: 9_437
			.saturating_add(Weight::from_parts(1_629_554, 0u64).saturating_mul(i.into()))
			// Standard Error: 9_325
			.saturating_add(Weight::from_parts(833_591, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: Membership MembershipPrice (r:0 w:1)
	// Proof: Membership MembershipPrice (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_membership_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_982 nanoseconds.
		Weight::from_parts(10_394_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance6WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance6WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn update_profile_verification() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `601`
		//  Estimated: `7230`
		// Minimum execution time: 25_463 nanoseconds.
		Weight::from_parts(26_338_000, 0u64)
			.saturating_add(Weight::from_parts(0, 7230))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Instance6WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance6WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance6WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance6WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn set_leader_invitation_quota() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `601`
		//  Estimated: `8723`
		// Minimum execution time: 26_333 nanoseconds.
		Weight::from_parts(27_219_000, 0u64)
			.saturating_add(Weight::from_parts(0, 8723))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership InitialInvitationBalance (r:0 w:1)
	// Proof: Membership InitialInvitationBalance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_initial_invitation_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_244 nanoseconds.
		Weight::from_parts(10_531_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership InitialInvitationCount (r:0 w:1)
	// Proof: Membership InitialInvitationCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_initial_invitation_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_851 nanoseconds.
		Weight::from_parts(10_057_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:1)
	// Proof: Membership StakingAccountIdMemberStatus (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn add_staking_account_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `456`
		//  Estimated: `15469`
		// Minimum execution time: 40_847 nanoseconds.
		Weight::from_parts(41_939_000, 0u64)
			.saturating_add(Weight::from_parts(0, 15469))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:1)
	// Proof: Membership StakingAccountIdMemberStatus (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	fn confirm_staking_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `299`
		//  Estimated: `7112`
		// Minimum execution time: 27_728 nanoseconds.
		Weight::from_parts(28_670_000, 0u64)
			.saturating_add(Weight::from_parts(0, 7112))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:1)
	// Proof: Membership StakingAccountIdMemberStatus (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn remove_staking_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `573`
		//  Estimated: `15469`
		// Minimum execution time: 39_805 nanoseconds.
		Weight::from_parts(41_089_000, 0u64)
			.saturating_add(Weight::from_parts(0, 15469))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	fn member_remark_without_payment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `220`
		//  Estimated: `3590`
		// Minimum execution time: 16_199 nanoseconds.
		Weight::from_parts(16_750_000, 0u64)
			.saturating_add(Weight::from_parts(0, 3590))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn member_remark_with_payment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `446`
		//  Estimated: `9786`
		// Minimum execution time: 49_317 nanoseconds.
		Weight::from_parts(50_654_000, 0u64)
			.saturating_add(Weight::from_parts(0, 9786))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Membership MemberIdByHandleHash (r:1 w:1)
	// Proof: Membership MemberIdByHandleHash (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	// Storage: Membership InitialInvitationCount (r:1 w:0)
	// Proof: Membership InitialInvitationCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Membership NextMemberId (r:1 w:1)
	// Proof: Membership NextMemberId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:0 w:1)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `j` is `[0, 100]`.
	fn create_member(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `6503`
		// Minimum execution time: 125_594 nanoseconds.
		Weight::from_parts(24_314_062, 0u64)
			.saturating_add(Weight::from_parts(0, 6503))
			// Standard Error: 7_340
			.saturating_add(Weight::from_parts(1_988_519, 0u64).saturating_mul(i.into()))
			// Standard Error: 7_253
			.saturating_add(Weight::from_parts(1_087_322, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn buy_membership_without_referrer(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn buy_membership_with_referrer(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_profile(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_accounts_none() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_accounts_root() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_accounts_controller() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_accounts_both() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_referral_cut() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn transfer_invites() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn invite_member(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn gift_membership(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_membership_price() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_profile_verification() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_leader_invitation_quota() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_initial_invitation_balance() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_initial_invitation_count() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn add_staking_account_candidate() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn confirm_staking_account() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn remove_staking_account() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn member_remark_without_payment() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn member_remark_with_payment() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn create_member(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
}
