// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for forum
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=forum
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/forum/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for forum.
pub trait WeightInfo {
	fn create_category(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn update_category_membership_of_moderator_new() -> Weight;
	fn update_category_membership_of_moderator_old() -> Weight;
	fn update_category_archival_status_lead(_i: u32, ) -> Weight;
	fn update_category_archival_status_moderator(_i: u32, ) -> Weight;
	fn update_category_title_lead(_i: u32, _j: u32, ) -> Weight;
	fn update_category_title_moderator(_i: u32, _j: u32, ) -> Weight;
	fn update_category_description_lead(_i: u32, _j: u32, ) -> Weight;
	fn update_category_description_moderator(_i: u32, _j: u32, ) -> Weight;
	fn delete_category_lead(_i: u32, ) -> Weight;
	fn delete_category_moderator(_i: u32, ) -> Weight;
	fn create_thread(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn edit_thread_metadata(_i: u32, _j: u32, ) -> Weight;
	fn delete_thread(_i: u32, ) -> Weight;
	fn move_thread_to_category_lead(_i: u32, ) -> Weight;
	fn move_thread_to_category_moderator(_i: u32, ) -> Weight;
	fn moderate_thread_lead(_i: u32, _k: u32, ) -> Weight;
	fn moderate_thread_moderator(_i: u32, _k: u32, ) -> Weight;
	fn add_post(_i: u32, _j: u32, ) -> Weight;
	fn edit_post_text(_i: u32, _j: u32, ) -> Weight;
	fn moderate_post_lead(_i: u32, _j: u32, ) -> Weight;
	fn moderate_post_moderator(_i: u32, _j: u32, ) -> Weight;
	fn delete_posts(_i: u32, _j: u32, _k: u32, ) -> Weight;
	fn set_stickied_threads_lead(_i: u32, _j: u32, ) -> Weight;
	fn set_stickied_threads_moderator(_i: u32, _j: u32, ) -> Weight;
}

/// Weights for forum using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextCategoryId (r:1 w:1)
	// Proof: Forum_1_1 NextCategoryId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[0, 100]`.
	fn create_category(i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `396 + i * (118 ±0)`
		//  Estimated: `9109 + i * (2746 ±0)`
		// Minimum execution time: 231_760 nanoseconds.
		Weight::from_parts(22_530_518, 0u64)
			.saturating_add(Weight::from_parts(0, 9109))
			// Standard Error: 126_071
			.saturating_add(Weight::from_parts(8_272_602, 0u64).saturating_mul(i.into()))
			// Standard Error: 7_008
			.saturating_add(Weight::from_parts(1_613_429, 0u64).saturating_mul(j.into()))
			// Standard Error: 7_008
			.saturating_add(Weight::from_parts(1_720_664, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:1 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:0 w:1)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn update_category_membership_of_moderator_new() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `601`
		//  Estimated: `8869`
		// Minimum execution time: 40_949 nanoseconds.
		Weight::from_parts(42_711_000, 0u64)
			.saturating_add(Weight::from_parts(0, 8869))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:1 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:1 w:1)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn update_category_membership_of_moderator_old() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671`
		//  Estimated: `12382`
		// Minimum execution time: 41_474 nanoseconds.
		Weight::from_parts(42_355_000, 0u64)
			.saturating_add(Weight::from_parts(0, 12382))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn update_category_archival_status_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477 + i * (119 ±0)`
		//  Estimated: `6123 + i * (2746 ±0)`
		// Minimum execution time: 34_935 nanoseconds.
		Weight::from_parts(31_958_111, 0u64)
			.saturating_add(Weight::from_parts(0, 6123))
			// Standard Error: 26_221
			.saturating_add(Weight::from_parts(4_201_431, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn update_category_archival_status_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `547 + i * (119 ±0)`
		//  Estimated: `5620 + i * (5269 ±0)`
		// Minimum execution time: 36_740 nanoseconds.
		Weight::from_parts(32_603_836, 0u64)
			.saturating_add(Weight::from_parts(0, 5620))
			// Standard Error: 15_368
			.saturating_add(Weight::from_parts(6_280_462, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_title_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477 + i * (119 ±0)`
		//  Estimated: `6123 + i * (2746 ±0)`
		// Minimum execution time: 56_819 nanoseconds.
		Weight::from_parts(30_831_612, 0u64)
			.saturating_add(Weight::from_parts(0, 6123))
			// Standard Error: 29_685
			.saturating_add(Weight::from_parts(4_476_794, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_662
			.saturating_add(Weight::from_parts(1_388_568, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_title_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `547 + i * (119 ±0)`
		//  Estimated: `5620 + i * (5269 ±0)`
		// Minimum execution time: 68_012 nanoseconds.
		Weight::from_parts(30_283_579, 0u64)
			.saturating_add(Weight::from_parts(0, 5620))
			// Standard Error: 30_940
			.saturating_add(Weight::from_parts(6_296_281, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_733
			.saturating_add(Weight::from_parts(1_405_211, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_description_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477 + i * (119 ±0)`
		//  Estimated: `6123 + i * (2746 ±0)`
		// Minimum execution time: 56_533 nanoseconds.
		Weight::from_parts(30_874_501, 0u64)
			.saturating_add(Weight::from_parts(0, 6123))
			// Standard Error: 26_601
			.saturating_add(Weight::from_parts(4_501_147, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_490
			.saturating_add(Weight::from_parts(1_382_130, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 99]`.
	fn update_category_description_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `547 + i * (119 ±0)`
		//  Estimated: `5620 + i * (5269 ±0)`
		// Minimum execution time: 68_230 nanoseconds.
		Weight::from_parts(31_034_151, 0u64)
			.saturating_add(Weight::from_parts(0, 5620))
			// Standard Error: 32_890
			.saturating_add(Weight::from_parts(6_288_805, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_842
			.saturating_add(Weight::from_parts(1_398_718, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn delete_category_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477 + i * (119 ±0)`
		//  Estimated: `7616 + i * (2746 ±0)`
		// Minimum execution time: 32_882 nanoseconds.
		Weight::from_parts(31_979_597, 0u64)
			.saturating_add(Weight::from_parts(0, 7616))
			// Standard Error: 58_632
			.saturating_add(Weight::from_parts(5_477_733, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:5 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryCounter (r:1 w:1)
	// Proof: Forum_1_1 CategoryCounter (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `i` is `[3, 6]`.
	fn delete_category_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `546 + i * (119 ±0)`
		//  Estimated: `12159 + i * (3469 ±17)`
		// Minimum execution time: 52_327 nanoseconds.
		Weight::from_parts(36_492_933, 0u64)
			.saturating_add(Weight::from_parts(0, 12159))
			// Standard Error: 30_867
			.saturating_add(Weight::from_parts(6_189_074, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 3469).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextThreadId (r:1 w:1)
	// Proof: Forum_1_1 NextThreadId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextPostId (r:1 w:1)
	// Proof: Forum_1_1 NextPostId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:0 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[0, 100]`.
	fn create_thread(i: u32, j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `622 + i * (119 ±0)`
		//  Estimated: `17348 + i * (2746 ±0)`
		// Minimum execution time: 228_563 nanoseconds.
		Weight::from_parts(102_404_108, 0u64)
			.saturating_add(Weight::from_parts(0, 17348))
			// Standard Error: 125_558
			.saturating_add(Weight::from_parts(5_739_251, 0u64).saturating_mul(i.into()))
			// Standard Error: 6_979
			.saturating_add(Weight::from_parts(942_514, 0u64).saturating_mul(j.into()))
			// Standard Error: 6_979
			.saturating_add(Weight::from_parts(1_955_204, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(7_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn edit_thread_metadata(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `576 + i * (119 ±0)`
		//  Estimated: `8166 + i * (2746 ±0)`
		// Minimum execution time: 56_444 nanoseconds.
		Weight::from_parts(30_628_675, 0u64)
			.saturating_add(Weight::from_parts(0, 8166))
			// Standard Error: 21_966
			.saturating_add(Weight::from_parts(4_503_910, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_215
			.saturating_add(Weight::from_parts(1_040_338, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn delete_thread(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `823 + i * (119 ±0)`
		//  Estimated: `14362 + i * (2746 ±0)`
		// Minimum execution time: 66_629 nanoseconds.
		Weight::from_parts(66_527_223, 0u64)
			.saturating_add(Weight::from_parts(0, 14362))
			// Standard Error: 38_981
			.saturating_add(Weight::from_parts(4_286_186, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:2)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn move_thread_to_category_lead(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `627 + i * (118 ±0)`
		//  Estimated: `11854 + i * (2218 ±24)`
		// Minimum execution time: 55_442 nanoseconds.
		Weight::from_parts(49_997_594, 0u64)
			.saturating_add(Weight::from_parts(0, 11854))
			// Standard Error: 56_690
			.saturating_add(Weight::from_parts(5_367_508, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 2218).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:7 w:2)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:7 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:2)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	fn move_thread_to_category_moderator(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `818 + i * (153 ±0)`
		//  Estimated: `14475 + i * (5269 ±0)`
		// Minimum execution time: 65_095 nanoseconds.
		Weight::from_parts(59_512_221, 0u64)
			.saturating_add(Weight::from_parts(0, 14475))
			// Standard Error: 21_250
			.saturating_add(Weight::from_parts(8_291_726, 0u64).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `k` is `[0, 100]`.
	fn moderate_thread_lead(i: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `730 + i * (119 ±0)`
		//  Estimated: `13302 + i * (2746 ±0)`
		// Minimum execution time: 87_254 nanoseconds.
		Weight::from_parts(64_350_541, 0u64)
			.saturating_add(Weight::from_parts(0, 13302))
			// Standard Error: 33_303
			.saturating_add(Weight::from_parts(4_059_025, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_843
			.saturating_add(Weight::from_parts(1_055_691, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `k` is `[0, 100]`.
	fn moderate_thread_moderator(i: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `803 + i * (119 ±0)`
		//  Estimated: `12799 + i * (5269 ±0)`
		// Minimum execution time: 97_997 nanoseconds.
		Weight::from_parts(65_632_588, 0u64)
			.saturating_add(Weight::from_parts(0, 12799))
			// Standard Error: 40_626
			.saturating_add(Weight::from_parts(5_712_657, 0u64).saturating_mul(i.into()))
			// Standard Error: 2_248
			.saturating_add(Weight::from_parts(1_054_800, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Forum_1_1 NextPostId (r:1 w:1)
	// Proof: Forum_1_1 NextPostId (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:0 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn add_post(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `856 + i * (119 ±0)`
		//  Estimated: `15855 + i * (2746 ±0)`
		// Minimum execution time: 106_827 nanoseconds.
		Weight::from_parts(84_957_961, 0u64)
			.saturating_add(Weight::from_parts(0, 15855))
			// Standard Error: 41_138
			.saturating_add(Weight::from_parts(4_102_728, 0u64).saturating_mul(i.into()))
			// Standard Error: 2_277
			.saturating_add(Weight::from_parts(1_959_463, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn edit_post_text(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `723 + i * (119 ±0)`
		//  Estimated: `11780 + i * (2746 ±0)`
		// Minimum execution time: 67_341 nanoseconds.
		Weight::from_parts(43_890_664, 0u64)
			.saturating_add(Weight::from_parts(0, 11780))
			// Standard Error: 28_226
			.saturating_add(Weight::from_parts(4_386_001, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_562
			.saturating_add(Weight::from_parts(1_938_387, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn moderate_post_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `910 + i * (119 ±0)`
		//  Estimated: `16916 + i * (2746 ±0)`
		// Minimum execution time: 104_643 nanoseconds.
		Weight::from_parts(76_357_270, 0u64)
			.saturating_add(Weight::from_parts(0, 16916))
			// Standard Error: 30_787
			.saturating_add(Weight::from_parts(5_110_368, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_704
			.saturating_add(Weight::from_parts(1_049_180, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:1 w:1)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	fn moderate_post_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `983 + i * (119 ±0)`
		//  Estimated: `16413 + i * (5269 ±0)`
		// Minimum execution time: 116_047 nanoseconds.
		Weight::from_parts(76_114_739, 0u64)
			.saturating_add(Weight::from_parts(0, 16413))
			// Standard Error: 34_804
			.saturating_add(Weight::from_parts(7_002_385, 0u64).saturating_mul(i.into()))
			// Standard Error: 1_926
			.saturating_add(Weight::from_parts(1_058_224, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
	// Storage: Forum_1_1 ThreadById (r:1 w:1)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	// Storage: Forum_1_1 PostById (r:20 w:20)
	// Proof: Forum_1_1 PostById (max_values: None, max_size: Some(149), added: 2624, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:0)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Membership MembershipById (r:1 w:0)
	// Proof: Membership MembershipById (max_values: None, max_size: Some(125), added: 2600, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 100]`.
	/// The range of component `k` is `[1, 20]`.
	fn delete_posts(i: u32, _j: u32, k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `973 + i * (119 ±0) + k * (100 ±0)`
		//  Estimated: `15352 + i * (2746 ±0) + k * (2624 ±0)`
		// Minimum execution time: 199_793 nanoseconds.
		Weight::from_parts(204_348_000, 0u64)
			.saturating_add(Weight::from_parts(0, 15352))
			// Standard Error: 443_347
			.saturating_add(Weight::from_parts(8_155_335, 0u64).saturating_mul(i.into()))
			// Standard Error: 130_626
			.saturating_add(Weight::from_parts(37_699_438, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
			.saturating_add(Weight::from_parts(0, 2624).saturating_mul(k.into()))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Proof: Instance1WorkingGroup CurrentLead (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:20 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 20]`.
	fn set_stickied_threads_lead(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `552 + i * (119 ±0) + j * (71 ±0)`
		//  Estimated: `7113 + j * (2596 ±0) + i * (2746 ±0)`
		// Minimum execution time: 55_734 nanoseconds.
		Weight::from_parts(34_953_201, 0u64)
			.saturating_add(Weight::from_parts(0, 7113))
			// Standard Error: 30_466
			.saturating_add(Weight::from_parts(4_094_107, 0u64).saturating_mul(i.into()))
			// Standard Error: 8_232
			.saturating_add(Weight::from_parts(5_277_913, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2596).saturating_mul(j.into()))
			.saturating_add(Weight::from_parts(0, 2746).saturating_mul(i.into()))
	}
	// Storage: Instance1WorkingGroup WorkerById (r:1 w:0)
	// Proof: Instance1WorkingGroup WorkerById (max_values: None, max_size: Some(175), added: 2650, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryById (r:6 w:1)
	// Proof: Forum_1_1 CategoryById (max_values: None, max_size: Some(271), added: 2746, mode: MaxEncodedLen)
	// Storage: Forum_1_1 CategoryByModerator (r:6 w:0)
	// Proof: Forum_1_1 CategoryByModerator (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	// Storage: Forum_1_1 ThreadById (r:20 w:0)
	// Proof: Forum_1_1 ThreadById (max_values: None, max_size: Some(121), added: 2596, mode: MaxEncodedLen)
	/// The range of component `i` is `[1, 6]`.
	/// The range of component `j` is `[0, 20]`.
	fn set_stickied_threads_moderator(i: u32, j: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `625 + i * (119 ±0) + j * (71 ±0)`
		//  Estimated: `6610 + j * (2596 ±0) + i * (5269 ±0)`
		// Minimum execution time: 66_774 nanoseconds.
		Weight::from_parts(31_061_455, 0u64)
			.saturating_add(Weight::from_parts(0, 6610))
			// Standard Error: 38_063
			.saturating_add(Weight::from_parts(6_596_073, 0u64).saturating_mul(i.into()))
			// Standard Error: 10_285
			.saturating_add(Weight::from_parts(5_393_637, 0u64).saturating_mul(j.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(i.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2596).saturating_mul(j.into()))
			.saturating_add(Weight::from_parts(0, 5269).saturating_mul(i.into()))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn create_category(i: u32, j: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_membership_of_moderator_new() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_membership_of_moderator_old() -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_archival_status_lead(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_archival_status_moderator(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_title_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_title_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_description_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn update_category_description_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_category_lead(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_category_moderator(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn create_thread(i: u32, j: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn edit_thread_metadata(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_thread(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn move_thread_to_category_lead(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn move_thread_to_category_moderator(i: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn moderate_thread_lead(i: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn moderate_thread_moderator(i: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn add_post(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn edit_post_text(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn moderate_post_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn moderate_post_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn delete_posts(i: u32, _j: u32, k: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_stickied_threads_lead(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
	fn set_stickied_threads_moderator(i: u32, j: u32, ) -> Weight {
		Weight::from_parts(0, 0)
	}
}
