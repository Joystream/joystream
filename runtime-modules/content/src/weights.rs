// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for content
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --base-path=/mnt/disks/local-ssd/
// --pallet=content
// --extrinsic=*
// --chain=dev
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/joystream-pallet-weight-template.hbs
// --output=./../runtime-modules/content/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for content.
pub trait WeightInfo {
	fn create_channel(_a: u32, _b: u32, _c: u32, _d: u32, _e: u32, ) -> Weight;
	fn channel_update_with_assets(_a: u32, _b: u32, _c: u32, _d: u32, _e: u32, ) -> Weight;
	fn channel_update_without_assets(_a: u32, _b: u32, ) -> Weight;
	fn delete_channel(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn update_channel_privilege_level() -> Weight;
	fn set_channel_paused_features_as_moderator(_a: u32, ) -> Weight;
	fn delete_channel_assets_as_moderator(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn delete_channel_as_moderator(_a: u32, _b: u32, _c: u32, _d: u32, ) -> Weight;
	fn set_channel_visibility_as_moderator(_a: u32, ) -> Weight;
	fn delete_video_assets_as_moderator(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn delete_video_as_moderator_with_assets(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn delete_video_as_moderator_without_assets(_a: u32, ) -> Weight;
	fn set_video_visibility_as_moderator(_a: u32, ) -> Weight;
	fn create_curator_group(_a: u32, ) -> Weight;
	fn update_curator_group_permissions(_a: u32, ) -> Weight;
	fn set_curator_group_status() -> Weight;
	fn add_curator_to_group() -> Weight;
	fn remove_curator_from_group() -> Weight;
	fn create_video_without_nft(_a: u32, _b: u32, _c: u32, ) -> Weight;
	fn create_video_with_nft(_a: u32, _b: u32, _c: u32, _d: u32, ) -> Weight;
	fn update_video_without_assets_without_nft(_a: u32, ) -> Weight;
	fn update_video_with_assets_without_nft(_a: u32, _b: u32, _c: u32, _d: u32, ) -> Weight;
	fn update_video_without_assets_with_nft(_a: u32, _b: u32, ) -> Weight;
	fn update_video_with_assets_with_nft(_a: u32, _b: u32, _c: u32, _d: u32, _e: u32, ) -> Weight;
	fn delete_video_without_assets() -> Weight;
	fn delete_video_with_assets(_a: u32, _b: u32, ) -> Weight;
	fn initialize_channel_transfer(_a: u32, ) -> Weight;
	fn cancel_channel_transfer() -> Weight;
	fn accept_channel_transfer_curator_to_curator(_a: u32, ) -> Weight;
	fn accept_channel_transfer_member_to_curator(_a: u32, ) -> Weight;
	fn accept_channel_transfer_member_to_member(_a: u32, ) -> Weight;
	fn issue_creator_token(_a: u32, ) -> Weight;
	fn creator_token_issuer_transfer(_a: u32, _b: u32, ) -> Weight;
	fn make_creator_token_permissionless() -> Weight;
	fn deissue_creator_token() -> Weight;
	fn init_creator_token_sale(_a: u32, ) -> Weight;
	fn update_upcoming_creator_token_sale() -> Weight;
	fn finalize_creator_token_sale() -> Weight;
	fn issue_revenue_split() -> Weight;
	fn issue_revenue_split_as_collaborator() -> Weight;
	fn finalize_revenue_split() -> Weight;
	fn reduce_creator_token_patronage_rate_to() -> Weight;
	fn claim_creator_token_patronage_credit() -> Weight;
	fn update_channel_payouts() -> Weight;
	fn withdraw_from_curator_channel_balance() -> Weight;
	fn withdraw_from_member_channel_balance() -> Weight;
	fn claim_channel_reward(_h: u32, ) -> Weight;
	fn claim_and_withdraw_member_channel_reward(_h: u32, ) -> Weight;
	fn claim_and_withdraw_curator_channel_reward(_h: u32, ) -> Weight;
	fn issue_nft(_w: u32, _b: u32, ) -> Weight;
	fn destroy_nft() -> Weight;
	fn sling_nft_back() -> Weight;
	fn offer_nft() -> Weight;
	fn cancel_offer() -> Weight;
	fn accept_incoming_offer() -> Weight;
	fn sell_nft() -> Weight;
	fn cancel_buy_now() -> Weight;
	fn update_buy_now_price() -> Weight;
	fn buy_nft() -> Weight;
	fn toggle_nft_limits() -> Weight;
	fn update_global_nft_limit() -> Weight;
	fn update_channel_nft_limit() -> Weight;
	fn start_english_auction(_w: u32, ) -> Weight;
	fn cancel_english_auction() -> Weight;
	fn make_english_auction_bid() -> Weight;
	fn settle_english_auction() -> Weight;
	fn start_open_auction(_w: u32, ) -> Weight;
	fn cancel_open_auction() -> Weight;
	fn cancel_open_auction_bid() -> Weight;
	fn pick_open_auction_winner() -> Weight;
	fn make_open_auction_bid() -> Weight;
	fn channel_owner_remark(_b: u32, ) -> Weight;
	fn channel_agent_remark(_b: u32, ) -> Weight;
	fn nft_owner_remark(_b: u32, ) -> Weight;
	fn update_channel_state_bloat_bond() -> Weight;
	fn update_video_state_bloat_bond() -> Weight;
}

/// Weights for content using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content ChannelStateBloatBondValue (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Content NextChannelId (r:1 w:1)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Storage DynamicBagCreationPolicies (r:1 w:0)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: Storage DistributionBucketByFamilyIdById (r:51 w:51)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Storage: Storage Blacklist (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Storage: Storage DataObjectsById (r:0 w:10)
	// Storage: Content ChannelById (r:0 w:1)
	fn create_channel(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		(908_684_000 as Weight)
			// Standard Error: 2_292_000
			.saturating_add((18_016_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 282_000
			.saturating_add((14_205_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(e as Weight))
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(d as Weight)))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Storage: Storage Blacklist (r:1 w:0)
	// Storage: Storage DataObjectsById (r:10 w:20)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: System Account (r:12 w:12)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	fn channel_update_with_assets(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		(971_918_000 as Weight)
			// Standard Error: 3_884_000
			.saturating_add((33_562_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(e as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(e as Weight)))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	fn channel_update_without_assets(a: u32, b: u32, ) -> Weight {
		(510_448_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage DataObjectsById (r:2 w:1)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: Storage DistributionBucketByFamilyIdById (r:51 w:51)
	// Storage: System Account (r:4 w:4)
	fn delete_channel(a: u32, b: u32, c: u32, ) -> Weight {
		(233_170_000 as Weight)
			// Standard Error: 150_000
			.saturating_add((29_941_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 130_000
			.saturating_add((11_647_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 18_000
			.saturating_add((9_620_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content ChannelById (r:1 w:1)
	fn update_channel_privilege_level() -> Weight {
		(98_810_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn set_channel_paused_features_as_moderator(a: u32, ) -> Weight {
		(214_382_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage DataObjectsById (r:1 w:1)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: System Account (r:2 w:2)
	fn delete_channel_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		(2_061_461_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage DataObjectsById (r:2 w:1)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: Storage DistributionBucketByFamilyIdById (r:51 w:51)
	// Storage: System Account (r:3 w:3)
	fn delete_channel_as_moderator(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		(1_605_250_000 as Weight)
			// Standard Error: 254_000
			.saturating_add((10_727_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn set_channel_visibility_as_moderator(a: u32, ) -> Weight {
		(215_338_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage DataObjectsById (r:1 w:1)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: System Account (r:2 w:2)
	fn delete_video_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		(767_564_000 as Weight)
			// Standard Error: 1_140_000
			.saturating_add((7_699_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 2_605_000
			.saturating_add((11_250_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage DataObjectsById (r:1 w:1)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: System Account (r:3 w:3)
	fn delete_video_as_moderator_with_assets(a: u32, b: u32, c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_687_000
			.saturating_add((27_261_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 6_140_000
			.saturating_add((88_930_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn delete_video_as_moderator_without_assets(a: u32, ) -> Weight {
		(199_525_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Content VideoById (r:1 w:0)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn set_video_visibility_as_moderator(a: u32, ) -> Weight {
		(36_868_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content NextCuratorGroupId (r:1 w:1)
	// Storage: Content CuratorGroupById (r:0 w:1)
	fn create_curator_group(a: u32, ) -> Weight {
		(34_264_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_796_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:1)
	fn update_curator_group_permissions(a: u32, ) -> Weight {
		(78_617_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_899_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:1)
	fn set_curator_group_status() -> Weight {
		(80_060_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:2 w:0)
	// Storage: Content CuratorGroupById (r:1 w:1)
	fn add_curator_to_group() -> Weight {
		(121_431_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:1)
	fn remove_curator_from_group() -> Weight {
		(117_050_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Content NextVideoId (r:1 w:1)
	// Storage: Content VideoStateBloatBondValue (r:1 w:0)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Storage: Storage Blacklist (r:1 w:0)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Storage: Storage DataObjectsById (r:0 w:1)
	// Storage: Content VideoById (r:0 w:1)
	fn create_video_without_nft(a: u32, b: u32, c: u32, ) -> Weight {
		(1_502_789_000 as Weight)
			// Standard Error: 4_685_000
			.saturating_add((9_026_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Content NextVideoId (r:1 w:1)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Storage: Content MinBidStep (r:1 w:0)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Storage: Membership MembershipById (r:21 w:0)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Storage: Content VideoStateBloatBondValue (r:1 w:0)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Storage: Storage Blacklist (r:1 w:0)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	// Storage: Storage DataObjectsById (r:0 w:1)
	// Storage: Content VideoById (r:0 w:1)
	fn create_video_with_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		(613_162_000 as Weight)
			// Standard Error: 1_014_000
			.saturating_add((5_880_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 1_087_000
			.saturating_add((7_636_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(31 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes(10 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
	}
	// Storage: Content VideoById (r:1 w:0)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn update_video_without_assets_without_nft(a: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Storage: Storage Blacklist (r:1 w:0)
	// Storage: Storage DataObjectsById (r:20 w:21)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: System Account (r:22 w:22)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	fn update_video_with_assets_without_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		(104_270_000 as Weight)
			// Standard Error: 1_421_000
			.saturating_add((24_042_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 1_421_000
			.saturating_add((21_283_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 3_295_000
			.saturating_add((16_738_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(12 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Storage: Content MinBidStep (r:1 w:0)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Storage: Membership MembershipById (r:3 w:0)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	fn update_video_without_assets_with_nft(a: u32, b: u32, ) -> Weight {
		(247_814_000 as Weight)
			// Standard Error: 931_000
			.saturating_add((9_010_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(22 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Storage: Content MinBidStep (r:1 w:0)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Storage: Membership MembershipById (r:21 w:0)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Storage: Storage Blacklist (r:1 w:0)
	// Storage: Storage DataObjectsById (r:20 w:21)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: System Account (r:22 w:22)
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	fn update_video_with_assets_with_nft(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		(1_983_336_000 as Weight)
			// Standard Error: 1_225_000
			.saturating_add((19_528_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 1_315_000
			.saturating_add((8_545_000 as Weight).saturating_mul(d as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(e as Weight))
			.saturating_add(T::DbWeight::get().reads(29 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn delete_video_without_assets() -> Weight {
		(197_320_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage DataObjectsById (r:1 w:1)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: Storage StorageBucketById (r:13 w:13)
	// Storage: System Account (r:4 w:4)
	fn delete_video_with_assets(a: u32, b: u32, ) -> Weight {
		(246_256_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((29_707_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 106_000
			.saturating_add((11_121_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Content NextTransferId (r:1 w:1)
	fn initialize_channel_transfer(a: u32, ) -> Weight {
		(173_025_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((7_085_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn cancel_channel_transfer() -> Weight {
		(174_790_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Instance3WorkingGroup Budget (r:1 w:0)
	fn accept_channel_transfer_curator_to_curator(a: u32, ) -> Weight {
		(83_717_000 as Weight)
			// Standard Error: 94_000
			.saturating_add((4_614_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Instance3WorkingGroup Budget (r:1 w:1)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn accept_channel_transfer_member_to_curator(a: u32, ) -> Weight {
		(109_674_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((4_976_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Membership MembershipById (r:2 w:0)
	// Storage: System Account (r:2 w:2)
	fn accept_channel_transfer_member_to_member(a: u32, ) -> Weight {
		(110_420_000 as Weight)
			// Standard Error: 92_000
			.saturating_add((5_431_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Token NextTokenId (r:1 w:1)
	// Storage: Token BloatBond (r:1 w:0)
	// Storage: Token SymbolsUsed (r:1 w:1)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Token AccountInfoByTokenAndMember (r:0 w:1)
	// Storage: Token TokenInfoById (r:0 w:1)
	fn issue_creator_token(a: u32, ) -> Weight {
		(141_763_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((11_922_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Storage: Token AccountInfoByTokenAndMember (r:2 w:2)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Token BloatBond (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn creator_token_issuer_transfer(a: u32, b: u32, ) -> Weight {
		(599_921_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((16_163_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Token TokenInfoById (r:1 w:1)
	fn make_creator_token_permissionless() -> Weight {
		(156_850_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Storage: Token SymbolsUsed (r:0 w:1)
	fn deissue_creator_token() -> Weight {
		(179_540_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Storage: Token MinSaleDuration (r:1 w:0)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	fn init_creator_token_sale(a: u32, ) -> Weight {
		(196_077_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Storage: Token MinSaleDuration (r:1 w:0)
	fn update_upcoming_creator_token_sale() -> Weight {
		(170_960_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	// Storage: Council Budget (r:1 w:1)
	fn finalize_creator_token_sale() -> Weight {
		(183_950_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Storage: Token MinRevenueSplitDuration (r:1 w:0)
	// Storage: Token MinRevenueSplitTimeToStart (r:1 w:0)
	// Storage: Council Budget (r:1 w:1)
	fn issue_revenue_split() -> Weight {
		(222_250_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Membership MembershipById (r:2 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Storage: Token MinRevenueSplitDuration (r:1 w:0)
	// Storage: Token MinRevenueSplitTimeToStart (r:1 w:0)
	fn issue_revenue_split_as_collaborator() -> Weight {
		(145_420_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn finalize_revenue_split() -> Weight {
		(188_180_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Token TokenInfoById (r:1 w:1)
	fn reduce_creator_token_patronage_rate_to() -> Weight {
		(173_210_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Token TokenInfoById (r:1 w:1)
	// Storage: Token AccountInfoByTokenAndMember (r:1 w:1)
	fn claim_creator_token_patronage_credit() -> Weight {
		(101_940_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Storage NextDataObjectId (r:1 w:1)
	// Storage: Storage DataObjectPerMegabyteFee (r:1 w:0)
	// Storage: Storage DataObjectStateBloatBondValue (r:1 w:0)
	// Storage: Storage Bags (r:1 w:1)
	// Storage: Storage UploadingBlocked (r:1 w:0)
	// Storage: Storage Blacklist (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	// Storage: Storage DataObjectsById (r:0 w:1)
	// Storage: Content ChannelCashoutsEnabled (r:0 w:1)
	// Storage: Content MaxCashoutAllowed (r:0 w:1)
	// Storage: Content MinCashoutAllowed (r:0 w:1)
	// Storage: Content Commitment (r:0 w:1)
	fn update_channel_payouts() -> Weight {
		(114_030_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Council Budget (r:1 w:1)
	fn withdraw_from_curator_channel_balance() -> Weight {
		(100_870_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn withdraw_from_member_channel_balance() -> Weight {
		(94_920_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content ChannelCashoutsEnabled (r:1 w:0)
	// Storage: Content MaxCashoutAllowed (r:1 w:0)
	// Storage: Content MinCashoutAllowed (r:1 w:0)
	// Storage: Council Budget (r:1 w:1)
	// Storage: Content Commitment (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn claim_channel_reward(h: u32, ) -> Weight {
		(130_548_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((859_000 as Weight).saturating_mul(h as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Content ChannelCashoutsEnabled (r:1 w:0)
	// Storage: Content MaxCashoutAllowed (r:1 w:0)
	// Storage: Content MinCashoutAllowed (r:1 w:0)
	// Storage: Council Budget (r:1 w:1)
	// Storage: Content Commitment (r:1 w:0)
	// Storage: System Account (r:2 w:2)
	fn claim_and_withdraw_member_channel_reward(h: u32, ) -> Weight {
		(150_813_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((489_000 as Weight).saturating_mul(h as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content ChannelCashoutsEnabled (r:1 w:0)
	// Storage: Content MaxCashoutAllowed (r:1 w:0)
	// Storage: Content MinCashoutAllowed (r:1 w:0)
	// Storage: Council Budget (r:1 w:1)
	// Storage: Content Commitment (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn claim_and_withdraw_curator_channel_reward(h: u32, ) -> Weight {
		(151_056_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((409_000 as Weight).saturating_mul(h as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Storage: Content MinBidStep (r:1 w:0)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Storage: Membership MembershipById (r:2 w:0)
	// Storage: Content MaxCreatorRoyalty (r:1 w:0)
	// Storage: Content MinCreatorRoyalty (r:1 w:0)
	// Storage: Content NftLimitsEnabled (r:1 w:0)
	// Storage: Content GlobalDailyNftLimit (r:1 w:0)
	// Storage: Content GlobalDailyNftCounter (r:1 w:1)
	// Storage: Content GlobalWeeklyNftLimit (r:1 w:0)
	// Storage: Content GlobalWeeklyNftCounter (r:1 w:1)
	fn issue_nft(w: u32, b: u32, ) -> Weight {
		(1_102_450_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(21 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(w as Weight)))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn destroy_nft() -> Weight {
		(220_920_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	fn sling_nft_back() -> Weight {
		(84_340_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	fn offer_nft() -> Weight {
		(226_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn cancel_offer() -> Weight {
		(219_150_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Membership MembershipById (r:2 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	fn accept_incoming_offer() -> Weight {
		(150_740_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn sell_nft() -> Weight {
		(219_940_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn cancel_buy_now() -> Weight {
		(220_960_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn update_buy_now_price() -> Weight {
		(220_430_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership MembershipById (r:2 w:0)
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	fn buy_nft() -> Weight {
		(150_520_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Content NftLimitsEnabled (r:1 w:1)
	fn toggle_nft_limits() -> Weight {
		(16_350_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content GlobalDailyNftLimit (r:1 w:1)
	fn update_global_nft_limit() -> Weight {
		(16_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:1)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn update_channel_nft_limit() -> Weight {
		(160_780_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Content MaxAuctionDuration (r:1 w:0)
	// Storage: Content MinAuctionDuration (r:1 w:0)
	// Storage: Content MaxAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MinAuctionExtensionPeriod (r:1 w:0)
	// Storage: Content MaxBidStep (r:1 w:0)
	// Storage: Content MinBidStep (r:1 w:0)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Storage: Membership MembershipById (r:2 w:0)
	fn start_english_auction(w: u32, ) -> Weight {
		(259_382_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((5_017_000 as Weight).saturating_mul(w as Weight))
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(w as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn cancel_english_auction() -> Weight {
		(230_110_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership MembershipById (r:3 w:0)
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: System Account (r:5 w:5)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	fn make_english_auction_bid() -> Weight {
		(209_500_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: System Account (r:3 w:3)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	fn settle_english_auction() -> Weight {
		(153_260_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Content MaxBidLockDuration (r:1 w:0)
	// Storage: Content MinBidLockDuration (r:1 w:0)
	// Storage: Content MinStartingPrice (r:1 w:0)
	// Storage: Content MaxStartingPrice (r:1 w:0)
	// Storage: Membership MembershipById (r:2 w:0)
	// Storage: Content AuctionStartsAtMaxDelta (r:1 w:0)
	fn start_open_auction(w: u32, ) -> Weight {
		(246_465_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((5_010_000 as Weight).saturating_mul(w as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(w as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn cancel_open_auction() -> Weight {
		(208_610_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Content VideoById (r:1 w:0)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Content OpenAuctionBidByVideoAndMember (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn cancel_open_auction_bid() -> Weight {
		(107_780_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Membership MembershipById (r:2 w:0)
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Content OpenAuctionBidByVideoAndMember (r:1 w:1)
	// Storage: System Account (r:3 w:3)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	fn pick_open_auction_winner() -> Weight {
		(147_590_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Membership MembershipById (r:2 w:0)
	// Storage: Content OpenAuctionBidByVideoAndMember (r:1 w:0)
	// Storage: System Account (r:4 w:4)
	// Storage: Content VideoById (r:1 w:1)
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Content PlatfromFeePercentage (r:1 w:0)
	fn make_open_auction_bid() -> Weight {
		(192_640_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	fn channel_owner_remark(b: u32, ) -> Weight {
		(43_283_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Content ChannelById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	fn channel_agent_remark(b: u32, ) -> Weight {
		(135_103_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
	}
	// Storage: Content VideoById (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content CuratorGroupById (r:1 w:0)
	// Storage: Content ChannelById (r:1 w:0)
	fn nft_owner_remark(b: u32, ) -> Weight {
		(218_256_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content ChannelStateBloatBondValue (r:0 w:1)
	fn update_channel_state_bloat_bond() -> Weight {
		(24_530_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Instance3WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Instance3WorkingGroup WorkerById (r:1 w:0)
	// Storage: Content VideoStateBloatBondValue (r:0 w:1)
	fn update_video_state_bloat_bond() -> Weight {
		(23_790_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn create_channel(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		0
	}
	fn channel_update_with_assets(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		0
	}
	fn channel_update_without_assets(a: u32, b: u32, ) -> Weight {
		0
	}
	fn delete_channel(a: u32, b: u32, c: u32, ) -> Weight {
		0
	}
	fn update_channel_privilege_level() -> Weight {
		0
	}
	fn set_channel_paused_features_as_moderator(a: u32, ) -> Weight {
		0
	}
	fn delete_channel_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		0
	}
	fn delete_channel_as_moderator(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		0
	}
	fn set_channel_visibility_as_moderator(a: u32, ) -> Weight {
		0
	}
	fn delete_video_assets_as_moderator(a: u32, b: u32, c: u32, ) -> Weight {
		0
	}
	fn delete_video_as_moderator_with_assets(a: u32, b: u32, c: u32, ) -> Weight {
		0
	}
	fn delete_video_as_moderator_without_assets(a: u32, ) -> Weight {
		0
	}
	fn set_video_visibility_as_moderator(a: u32, ) -> Weight {
		0
	}
	fn create_curator_group(a: u32, ) -> Weight {
		0
	}
	fn update_curator_group_permissions(a: u32, ) -> Weight {
		0
	}
	fn set_curator_group_status() -> Weight {
		0
	}
	fn add_curator_to_group() -> Weight {
		0
	}
	fn remove_curator_from_group() -> Weight {
		0
	}
	fn create_video_without_nft(a: u32, b: u32, c: u32, ) -> Weight {
		0
	}
	fn create_video_with_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		0
	}
	fn update_video_without_assets_without_nft(a: u32, ) -> Weight {
		0
	}
	fn update_video_with_assets_without_nft(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		0
	}
	fn update_video_without_assets_with_nft(a: u32, b: u32, ) -> Weight {
		0
	}
	fn update_video_with_assets_with_nft(a: u32, b: u32, c: u32, d: u32, e: u32, ) -> Weight {
		0
	}
	fn delete_video_without_assets() -> Weight {
		0
	}
	fn delete_video_with_assets(a: u32, b: u32, ) -> Weight {
		0
	}
	fn initialize_channel_transfer(a: u32, ) -> Weight {
		0
	}
	fn cancel_channel_transfer() -> Weight {
		0
	}
	fn accept_channel_transfer_curator_to_curator(a: u32, ) -> Weight {
		0
	}
	fn accept_channel_transfer_member_to_curator(a: u32, ) -> Weight {
		0
	}
	fn accept_channel_transfer_member_to_member(a: u32, ) -> Weight {
		0
	}
	fn issue_creator_token(a: u32, ) -> Weight {
		0
	}
	fn creator_token_issuer_transfer(a: u32, b: u32, ) -> Weight {
		0
	}
	fn make_creator_token_permissionless() -> Weight {
		0
	}
	fn deissue_creator_token() -> Weight {
		0
	}
	fn init_creator_token_sale(a: u32, ) -> Weight {
		0
	}
	fn update_upcoming_creator_token_sale() -> Weight {
		0
	}
	fn finalize_creator_token_sale() -> Weight {
		0
	}
	fn issue_revenue_split() -> Weight {
		0
	}
	fn issue_revenue_split_as_collaborator() -> Weight {
		0
	}
	fn finalize_revenue_split() -> Weight {
		0
	}
	fn reduce_creator_token_patronage_rate_to() -> Weight {
		0
	}
	fn claim_creator_token_patronage_credit() -> Weight {
		0
	}
	fn update_channel_payouts() -> Weight {
		0
	}
	fn withdraw_from_curator_channel_balance() -> Weight {
		0
	}
	fn withdraw_from_member_channel_balance() -> Weight {
		0
	}
	fn claim_channel_reward(h: u32, ) -> Weight {
		0
	}
	fn claim_and_withdraw_member_channel_reward(h: u32, ) -> Weight {
		0
	}
	fn claim_and_withdraw_curator_channel_reward(h: u32, ) -> Weight {
		0
	}
	fn issue_nft(w: u32, b: u32, ) -> Weight {
		0
	}
	fn destroy_nft() -> Weight {
		0
	}
	fn sling_nft_back() -> Weight {
		0
	}
	fn offer_nft() -> Weight {
		0
	}
	fn cancel_offer() -> Weight {
		0
	}
	fn accept_incoming_offer() -> Weight {
		0
	}
	fn sell_nft() -> Weight {
		0
	}
	fn cancel_buy_now() -> Weight {
		0
	}
	fn update_buy_now_price() -> Weight {
		0
	}
	fn buy_nft() -> Weight {
		0
	}
	fn toggle_nft_limits() -> Weight {
		0
	}
	fn update_global_nft_limit() -> Weight {
		0
	}
	fn update_channel_nft_limit() -> Weight {
		0
	}
	fn start_english_auction(w: u32, ) -> Weight {
		0
	}
	fn cancel_english_auction() -> Weight {
		0
	}
	fn make_english_auction_bid() -> Weight {
		0
	}
	fn settle_english_auction() -> Weight {
		0
	}
	fn start_open_auction(w: u32, ) -> Weight {
		0
	}
	fn cancel_open_auction() -> Weight {
		0
	}
	fn cancel_open_auction_bid() -> Weight {
		0
	}
	fn pick_open_auction_winner() -> Weight {
		0
	}
	fn make_open_auction_bid() -> Weight {
		0
	}
	fn channel_owner_remark(b: u32, ) -> Weight {
		0
	}
	fn channel_agent_remark(b: u32, ) -> Weight {
		0
	}
	fn nft_owner_remark(b: u32, ) -> Weight {
		0
	}
	fn update_channel_state_bloat_bond() -> Weight {
		0
	}
	fn update_video_state_bloat_bond() -> Weight {
		0
	}
}
