// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for proposals_engine
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --base-path=/mnt/disks/local-ssd/
// --pallet=proposals_engine
// --extrinsic=*
// --chain=dev
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/joystream-pallet-weight-template.hbs
// --output=./../runtime-modules/proposals/engine/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for proposals_engine.
pub trait WeightInfo {
	fn vote(_i: u32, ) -> Weight;
	fn cancel_proposal() -> Weight;
	fn veto_proposal() -> Weight;
	fn proposer_remark() -> Weight;
	fn on_initialize_immediate_execution_decode_fails(_i: u32, ) -> Weight;
	fn on_initialize_pending_execution_decode_fails(_i: u32, ) -> Weight;
	fn on_initialize_approved_pending_constitutionality(_i: u32, ) -> Weight;
	fn on_initialize_rejected(_i: u32, ) -> Weight;
	fn on_initialize_slashed(_i: u32, ) -> Weight;
	fn cancel_active_and_pending_proposals(_i: u32, ) -> Weight;
}

/// Weights for proposals_engine using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:1 w:1)
	fn vote(i: u32, ) -> Weight {
		(47_888_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((675_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn cancel_proposal() -> Weight {
		(98_790_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn veto_proposal() -> Weight {
		(53_520_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine Proposals (r:1 w:0)
	fn proposer_remark() -> Weight {
		(24_591_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:1)
	fn on_initialize_immediate_execution_decode_fails(i: u32, ) -> Weight {
		(26_040_000 as Weight)
			// Standard Error: 64_000
			.saturating_add((61_934_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((6 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:1)
	fn on_initialize_pending_execution_decode_fails(i: u32, ) -> Weight {
		(21_694_000 as Weight)
			// Standard Error: 56_000
			.saturating_add((32_464_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Council CouncilMembers (r:1 w:0)
	fn on_initialize_approved_pending_constitutionality(i: u32, ) -> Weight {
		(28_472_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((21_495_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:3)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn on_initialize_rejected(i: u32, ) -> Weight {
		(26_645_000 as Weight)
			// Standard Error: 81_000
			.saturating_add((84_339_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((8 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Council CouncilMembers (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:3)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn on_initialize_slashed(i: u32, ) -> Weight {
		(30_142_000 as Weight)
			// Standard Error: 66_000
			.saturating_add((74_001_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((8 as Weight).saturating_mul(i as Weight)))
	}
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: ProposalEngine Proposals (r:2 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine VoteExistsByProposalByVoter (r:0 w:3)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn cancel_active_and_pending_proposals(i: u32, ) -> Weight {
		(20_266_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((49_225_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(i as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((8 as Weight).saturating_mul(i as Weight)))
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn vote(i: u32, ) -> Weight {
		0
	}
	fn cancel_proposal() -> Weight {
		0
	}
	fn veto_proposal() -> Weight {
		0
	}
	fn proposer_remark() -> Weight {
		0
	}
	fn on_initialize_immediate_execution_decode_fails(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_pending_execution_decode_fails(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_approved_pending_constitutionality(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_rejected(i: u32, ) -> Weight {
		0
	}
	fn on_initialize_slashed(i: u32, ) -> Weight {
		0
	}
	fn cancel_active_and_pending_proposals(i: u32, ) -> Weight {
		0
	}
}
