// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for proposals_codex
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-09, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=proposals_codex
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/joystream-pallet-weight-template.hbs
// --output=./scripts/../runtime-modules/proposals/codex/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions needed for proposals_codex.
pub trait WeightInfo {
	fn create_proposal_signal(_i: u32, _t: u32, _d: u32, ) -> Weight;
	fn create_proposal_runtime_upgrade(_i: u32, _t: u32, _d: u32, ) -> Weight;
	fn create_proposal_funding_request(_i: u32, _t: u32, _d: u32, ) -> Weight;
	fn create_proposal_set_max_validator_count(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_veto_proposal(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_create_working_group_lead_opening(_i: u32, _t: u32, _d: u32, ) -> Weight;
	fn create_proposal_fill_working_group_lead_opening(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_update_working_group_budget(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_decrease_working_group_lead_stake(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_slash_working_group_lead(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_set_working_group_lead_reward(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_terminate_working_group_lead(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_amend_constitution(_i: u32, _t: u32, _d: u32, ) -> Weight;
	fn create_proposal_cancel_working_group_lead_opening(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_set_membership_price(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_set_council_budget_increment(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_set_councilor_reward(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_set_initial_invitation_balance(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_set_initial_invitation_count(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_set_membership_lead_invitation_quota(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_set_referral_cut(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_update_global_nft_limit(_t: u32, _d: u32, ) -> Weight;
	fn create_proposal_update_channel_payouts(_t: u32, _d: u32, _i: u32, ) -> Weight;
	fn create_proposal_update_max_yearly_patronage_rate(_t: u32, _d: u32, ) -> Weight;
}

/// Weights for proposals_codex using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_signal(i: u32, t: u32, d: u32, ) -> Weight {
		(119_338_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((1_874_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 66_000
			.saturating_add((832_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 66_000
			.saturating_add((1_020_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_runtime_upgrade(i: u32, t: u32, d: u32, ) -> Weight {
		(114_863_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_891_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 46_000
			.saturating_add((855_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 46_000
			.saturating_add((1_089_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_funding_request(_i: u32, t: u32, d: u32, ) -> Weight {
		(106_889_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_318_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 25_000
			.saturating_add((1_443_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Staking MinimumValidatorCount (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_set_max_validator_count(t: u32, d: u32, ) -> Weight {
		(100_376_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((1_312_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 21_000
			.saturating_add((1_472_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: ProposalEngine Proposals (r:1 w:1)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_veto_proposal(t: u32, d: u32, ) -> Weight {
		(115_318_000 as Weight)
			// Standard Error: 47_000
			.saturating_add((1_112_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 47_000
			.saturating_add((1_334_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_create_working_group_lead_opening(i: u32, t: u32, d: u32, ) -> Weight {
		(117_180_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((2_020_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 42_000
			.saturating_add((810_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 42_000
			.saturating_add((1_044_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Instance1WorkingGroup OpeningById (r:1 w:0)
	// Storage: Instance1WorkingGroup ApplicationById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_fill_working_group_lead_opening(t: u32, d: u32, ) -> Weight {
		(118_975_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((1_264_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 38_000
			.saturating_add((1_302_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_update_working_group_budget(t: u32, d: u32, ) -> Weight {
		(99_672_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((1_222_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 26_000
			.saturating_add((1_351_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_decrease_working_group_lead_stake(t: u32, d: u32, ) -> Weight {
		(103_629_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((1_255_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 19_000
			.saturating_add((1_435_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_slash_working_group_lead(t: u32, d: u32, ) -> Weight {
		(103_453_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((1_326_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 26_000
			.saturating_add((1_418_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_set_working_group_lead_reward(t: u32, d: u32, ) -> Weight {
		(99_679_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((1_417_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 37_000
			.saturating_add((1_621_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Instance1WorkingGroup CurrentLead (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_terminate_working_group_lead(t: u32, d: u32, ) -> Weight {
		(102_435_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_320_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 23_000
			.saturating_add((1_501_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_amend_constitution(i: u32, t: u32, d: u32, ) -> Weight {
		(118_339_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_853_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 45_000
			.saturating_add((837_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 45_000
			.saturating_add((974_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Instance1WorkingGroup OpeningById (r:1 w:0)
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_cancel_working_group_lead_opening(t: u32, d: u32, ) -> Weight {
		(109_349_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((1_247_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 38_000
			.saturating_add((1_240_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_set_membership_price(t: u32, d: u32, ) -> Weight {
		(95_468_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((1_383_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 34_000
			.saturating_add((1_501_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_set_council_budget_increment(t: u32, d: u32, ) -> Weight {
		(97_264_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((1_261_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 19_000
			.saturating_add((1_439_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_set_councilor_reward(t: u32, d: u32, ) -> Weight {
		(97_564_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((1_259_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 18_000
			.saturating_add((1_422_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_set_initial_invitation_balance(t: u32, d: u32, ) -> Weight {
		(98_633_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((1_198_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 25_000
			.saturating_add((1_442_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_set_initial_invitation_count(t: u32, d: u32, ) -> Weight {
		(96_739_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((1_310_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 30_000
			.saturating_add((1_446_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_set_membership_lead_invitation_quota(t: u32, d: u32, ) -> Weight {
		(100_502_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((1_194_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 24_000
			.saturating_add((1_306_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_set_referral_cut(t: u32, d: u32, ) -> Weight {
		(97_395_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((1_255_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 22_000
			.saturating_add((1_448_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_update_global_nft_limit(t: u32, d: u32, ) -> Weight {
		(95_855_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((1_340_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 23_000
			.saturating_add((1_517_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: Membership MembershipById (r:1 w:0)
	// Storage: ProposalEngine ActiveProposalCount (r:1 w:1)
	// Storage: Membership StakingAccountIdMemberStatus (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: ProposalDiscussion ThreadCount (r:1 w:1)
	// Storage: ProposalEngine ProposalCount (r:1 w:1)
	// Storage: ProposalsCodex ThreadIdByProposalId (r:0 w:1)
	// Storage: ProposalDiscussion ThreadById (r:0 w:1)
	// Storage: ProposalEngine Proposals (r:0 w:1)
	// Storage: ProposalEngine DispatchableCallCode (r:0 w:1)
	fn create_proposal_update_channel_payouts(t: u32, d: u32, i: u32, ) -> Weight {
		(121_494_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((801_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 43_000
			.saturating_add((1_010_000 as Weight).saturating_mul(d as Weight))
			// Standard Error: 6_000
			.saturating_add((1_809_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	fn create_proposal_update_max_yearly_patronage_rate(_t: u32, _d: u32, ) -> Weight {
		0
	}
}

// Default implementation for tests
impl WeightInfo for () {
	fn create_proposal_signal(i: u32, t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_runtime_upgrade(i: u32, t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_funding_request(_i: u32, t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_set_max_validator_count(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_veto_proposal(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_create_working_group_lead_opening(i: u32, t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_fill_working_group_lead_opening(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_update_working_group_budget(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_decrease_working_group_lead_stake(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_slash_working_group_lead(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_set_working_group_lead_reward(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_terminate_working_group_lead(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_amend_constitution(i: u32, t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_cancel_working_group_lead_opening(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_set_membership_price(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_set_council_budget_increment(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_set_councilor_reward(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_set_initial_invitation_balance(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_set_initial_invitation_count(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_set_membership_lead_invitation_quota(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_set_referral_cut(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_update_global_nft_limit(t: u32, d: u32, ) -> Weight {
		0
	}
	fn create_proposal_update_channel_payouts(t: u32, d: u32, i: u32, ) -> Weight {
		0
	}
	fn create_proposal_update_max_yearly_patronage_rate(_t: u32, _d: u32, ) -> Weight {
		0
	}
}
