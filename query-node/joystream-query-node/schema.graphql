"Stored information about a registered user"
type Member @entity {
	"Randomly generated string id"
	id: ID!

	memberId: BigInt! @unique

	"The unique handle chosen by member"
	handle: String @unique @fulltext(query: "handles")

	"A Url to member's Avatar image"
	avatarUri: String

	"Short text chosen by member to share information about themselves"
	about: String

	"Blocknumber when member was registered"
	registeredAtBlock: BigInt!

	"Member's controller account id"
	controllerAccount: Bytes!

	"Member's root account id"
	rootAccount: Bytes!
}

#### High Level Derivative Entities ####

enum Language {
	CHINESE
	ENGLISH
	ARABIC
	PORTUGESE
	FRENCH
}

type Channel @entity {
	"Randomly generated string id"
	id: ID!

	"Underlying entity id"
	entityId: BigInt! @unique

	"Owner of the channel"
	owner: Member!

	"The title of the Channel"
	title: String! @unique @fulltext(query: "titles")

	"The description of a Channel"
	description: String!

	"Url for Channel's cover (background) photo. Recommended ratio: 16:9."
	coverPhotoURL: String!

	"Channel's avatar photo."
	avatarPhotoURL: String!

	"Flag signaling whether a channel is public."
	isPublic: Boolean!

	"Flag signaling whether a channel is curated/verified."
	isCurated: Boolean!

	"The primary langauge of the channel's content"
	language: Language

	videos: [Video!] @derivedFrom(field: "channel")
}

type Category @entity {
	"Randomly generated string id"
	id: ID!

	"Underlying entity id"
	entityId: BigInt! @unique

	"The name of the category"
	name: String! @unique @fulltext(query: "names")

	"The description of the category"
	description: String

	videos: [Video!] @derivedFrom(field: "category")
}

"Encoding and containers"
enum VideoMediaEncoding {
	H264_MPEG4
	VP8_WEBM
	THEROA_VORBIS
}

type KnownLicense @entity {
	"Randomly generated string id"
	id: ID!

	"Short, commonly recognized code of the licence (ie. CC_BY_SA)"
	code: String! @unique

	"Full, descriptive name of the license (ie. Creative Commons - Attribution-NonCommercial-NoDerivs)"
	name: String

	"Short description of the license conditions"
	description: String

	"An url pointing to full license content"
	url: String
}

type UserDefinedLicense @entity {
	"Randomly generated string id"
	id: ID!

	"Custom license content"
	content: String!
}

type JoystreamMediaLocation @entity {
	"Randomly generated string id"
	id: ID!

	"Id of the data object in the Joystream runtime dataDirectory module"
	dataObjectId: String! @unique
}

type HttpMediaLocation @entity {
	"Randomly generated string id"
	id: ID!

	"The http url pointing to the media"
	url: String!

	"The port to use when connecting to the http url (defaults to 80)"
	port: Int
}

type VideoMedia @entity {
	"Randomly generated string id"
	id: ID!

	"Underlying entity id"
	entityId: BigInt! @unique

	"Encoding of the video media object"
	encoding: VideoMediaEncoding!

	"Video media width in pixels"
	pixelWidth: Int!

	"Video media height in pixels"
	pixelHeight: Int!

	"Video media size in bytes"
	size: BigInt

	# One of the location field will be non-null

	httpMediaLocation: HttpMediaLocation
	joystreamMediaLocation: JoystreamMediaLocation
}

type Video @entity {
	"Randomly generated string id"
	id: ID!

	"Underlying entity id"
	entityId: BigInt! @unique

	"Reference to member's channel"
	channel: Channel!

	"Reference to a video category"
	category: Category!

	"The title of the video"
	title: String! @fulltext(query: "titles")

	"The description of the Video"
	description: String!

	"Video duration in seconds"
	duration: Int!

	"Video's skippable intro duration in seconds"
	skippableIntroDuration: BigInt

	"Video thumbnail url (recommended ratio: 16:9)"
	thumbnailURL: String!

	"Video's main langauge"
	language: Language

	"Reference to VideoMedia"
	media: VideoMedia!

	"Whether or not Video contains marketing"
	hasMarketing: Boolean

	"If the Video was published on other platform before beeing published on Joystream - the original publication date"
	publishedBeforeJoystream: BigInt

	"Whether the Video is supposed to be publically displayed"
	isPublic: Boolean!

	"Video curation status set by the Curator"
	isCurated: Boolean!

	"Whether the Video contains explicit material."
	isExplicit: Boolean!

	# One of the license field will be non-null
	knownLicence: KnownLicense
	userDefinedLicense: UserDefinedLicense
}
