"Stored information about a registered user"
type Member @entity {
	memberId: BigInt!

	"The unique handle chosen by member"
	handle: String @fulltext(query: "handles")

	"A Url to member's Avatar image"
	avatarUri: String

	"Short text chosen by member to share information about themselves"
	about: String

	"Blocknumber when member was registered"
	registeredAtBlock: BigInt!

	"Member's controller account id"
	controllerAccount: Bytes!

	"Member's root account id"
	rootAccount: Bytes!
}

"""
It represents a conceptual category, similar - but not identical,
to tables in relational databases and classes in object-oriented programming
Examples of classes in our example could be:
- Person: represents the concept of a person.
- Place: represents the concept of a place.
- PersonLivedInPlace: represents the concept that a person lived in a place.
"""
type Class @entity {
	"Runtime identifier for class"
	classId: BigInt!

	"Name of class"
	name: String!

	"Description of class"
	description: String!

	"The maximum number of entities which can be created"
	maximumEntitiesCount: BigInt!

	"The current number of entities which exist"
	currentNumberOfEntities: BigInt!

	"How many entities a given controller may create at most"
	defaultEntityCreationVoucherUpperBound: BigInt!

	"For this permission, the individual member is allowed to create the entity and become controller"
	anyMemberCanCreate: Boolean

	"Whether to prevent everyone from creating an entity"
	entityCreationBlocked: Boolean!

	"Whether to prevent everyone from updating entity properties"
	allEntityPropertyValuesLocked: Boolean!

	"All properties that have been used on this class across different class schemas"
	properties: [Property!] @derivedFrom(field: "referencedClass")

	"All schemas that are available for this class, think v0.0 Person, v.1.0 Person, etc."
	schemas: [Schema!] @derivedFrom(field: "class")

	"Current class maintainer curator groups"
	maintainers: [CuratorGroup!]

	"All vouchers for this class"
	vouchers: [EntityCreationVoucher!] @derivedFrom(field: "class")
}

enum PropertyType {
	BOOL
	UINT16
	UINT32
	UINT64
	INT16
	INT32
	INT64
	TEXT
	REFERENCE
	VECBOOL
	VECUINT16
	VECUINT32
	VECUINT64
	VECINT16
	VECINT32
	VECINT64
	VECTEXT
	VECREFERENCE
}

"'Property' representation, related to a given 'Class'"
type Property @entity {
	"Runtime identifier for property in class"
	propertyID: BigInt!

	"Type of 'Property'"
	propertyType: PropertyType!

	"If property value can be skipped, when adding entity schema support"
	required: Boolean!

	"Used to enforce uniqeness of a property across all entities that have this property"
	unique: Boolean!

	"Name of property"
	name: String!

	"Description of property"
	description: String!

	"Property is locked from maintainer"
	isLockedFromMaintainer: Boolean!

	"Property is locked from controller"
	isLockedFromController: Boolean!

	"Upper bound for vector length when property is a vector"
	maximumLength: BigInt

	"Optional field, it must reference a class then PropertyType is Reference"
	referencedClass: Class

	"Optional field, Only will be set when PropertyType is Reference"
	sameControllerStatus: Boolean

	"Schemas which involve this property"
	schemas: [Schema!] @derivedFrom(field: "properties")
}

"Represents a standard for what information must be associated with any entity of a given class"
type Schema @entity {
	"Runtime identifier of schema in class"
	schemaId: BigInt!

	"Class to which this schema corresponds"
	class: Class!

	"Properties of class that are in this schema"
	properties: [Property!]

	"If schema can be added to an entity"
	isActive: Boolean!
}

"Working group participant: working-group/src/types.rs"
type Worker @entity {
	member: Member!

	"Account used to authenticate in this role"
	roleAccountId: Bytes!

	# "Whether the role has recurring reward, and if so an identifier for this"
	# rewardRelationship: Option<RewardRelationshipId>

	# "When set, describes role stake of the worker/lead"
	# roleStakeProfile: Option<RoleStakeProfile<StakeId, BlockNumber>>
}

type Curator @entity {
	"Account used to authenticate"
	worker: Worker!

	groups: [CuratorGroup] @derivedFrom(field: "curators")
}

"A group, that consists of 'curators' set"
type CuratorGroup @entity {
	"Runtime identifier for group"
	groupId: BigInt!

	"Activity stats of group"
	isActive: Boolean!

	"All member curators of this group"
	curators: [Curator!]

	"All classes this group maintains"
	maintainerOfClasses: [Class!] @derivedFrom(field: "maintainers")
}

"A voucher for 'Entity' creation"
type EntityCreationVoucher @entity {
	"Class to which voucher applies"
	class: Class!

	"Controller to which this voucher applies"
	controller: EntityController!

	"How many are allowed in total"
	maximumEntitiesCount: BigInt!

	"How many have currently been created"
	entitiesCreated: BigInt!
}

enum EntityControllerType {
	LEAD
	MEMBER
	MAINTAINERS
}

"Owner of an 'Entity'"
type EntityController @entity {
	"Current controller, which is initially set based on who created entity"
	controllerType: EntityControllerType!

	"Optional field, will be set when EntityControllerType is MEMBER"
	controllerWhenMember: Member
}

"""
Represents a particular instance of a class,
hence each entity corresponds to exactly one class
"""
type Entity @entity {
	"Runtime identifier for entity"
	entityID: BigInt!

	"Current controller, which is initially set based on who created entity"
	controller: EntityController!

	"Forbid groups to mutate any property value"
	isFrozen: Boolean!

	"Prevent from being referenced by any entity (including self-references)"
	isReferenceable: Boolean!

	"The class of this entity"
	class: Class!

	"""
	What schemas under which this entity of a class is available, think
	v.2.0 Person schema for John, v3.0 Person schema for John
	"""
	supportedSchemas: [Schema!]

	"Values for properties on class that are used by some schema used by this entity!"
	values: [PropertyValue!] @derivedFrom(field: "property")

	"Total number of inbound references from another entities"
	totalNumberOfInboundReferences: BigInt!

	"Number of inbound references from another entities with 'SameOwner' flag set"
	sameOwnerInboundReferences: BigInt!
}

"Fields encode a flattened representation of non-vector properties, only one will be non-null"
type SingleValue @variant {
	bool: Boolean

	integer: BigInt

	text: Bytes

	hash: Bytes

	reference: Entity
}

"""
Fields encode a flattened representation of vector properties, only one will be non-null
"""
type VectorValue @variant {
	boolVec: [Boolean!]

	intVec: [BigInt!]

	textVec: [Bytes!]

	hashVec: [Bytes!]

	referenceVec: [Entity!]

	"Used to avoid vector data race update conditions"
	nonce: BigInt!
}

union StoredValue = SingleValue | VectorValue

type PropertyValue @entity {
	"Runtime identifier of property value in entity"
	propertyValueID: BigInt!

	"Property to which this value corresponds"
	property: Property!

	value: StoredValue!
}
