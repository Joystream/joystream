type VideoReactedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in"
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The video being reacted to"
  video: Video!

  # TODO: remove this field when Hydra supports deeply nested filtering
  "Video channel"
  videoChannel: Channel!

  "The reaction result"
  reactionResult: VideoReactionOptions!

  "The member reacting to the video"
  reactingMember: Membership!
}

type CommentReactedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in"
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The comment being reacted to"
  comment: Comment!

  "Comment's video"
  video: Video!

  # TODO: remove this field when Hydra supports deeply nested filtering
  "Video channel"
  videoChannel: Channel!

  "The reaction id"
  reactionResult: Int!

  "The member reacting to the comment"
  reactingMember: Membership!
}

type CommentCreatedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in"
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The comment that was added"
  comment: Comment!

  "Parent comment author (if any)"
  parentCommentAuthor: Membership

  "Comment's video"
  video: Video!

  # TODO: remove this field when Hydra supports deeply nested filtering
  "Video channel"
  videoChannel: Channel!

  "Comment's original text"
  text: String!
}

type CommentTextUpdatedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in"
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The comment being updated"
  comment: Comment!

  "Comment's video"
  video: Video!

  # TODO: remove this field when Hydra supports deeply nested filtering
  "Video channel"
  videoChannel: Channel!

  "New comment text"
  newText: String!

  # Only author can edit the comment, so no actor context required
}

type CommentDeletedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in"
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Comment deleted"
  comment: Comment!

  "Comment's video"
  video: Video!

  # TODO: remove this field when Hydra supports deeply nested filtering
  "Video channel"
  videoChannel: Channel!

  # No actor context required, since commenter would delete the comment
}

type CommentModeratedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in"
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Comment deleted"
  comment: Comment!

  "Comment's video"
  video: Video!

  # TODO: remove this field when Hydra supports deeply nested filtering
  "Video channel"
  videoChannel: Channel!

  "The actor responsible for the removal of comment"
  actor: ContentActor!

  "Comment deletion rationale"
  rationale: String!
}

# This event entity is both pinning and unpinning the comment
type CommentPinnedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in"
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The comment being pinned"
  comment: Comment!

  "Comment's video"
  video: Video!

  # TODO: remove this field when Hydra supports deeply nested filtering
  "Video channel"
  videoChannel: Channel!

  "The action performed. true if comment is pinned, otherwise false."
  action: Boolean!

  # Only channel owner can pin the comment, so no actor context required
}

# This event is used for both banning & unbanning the member
type MemberBannedFromChannelEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in"
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The chanel user is blocked from"
  channel: Channel!

  "The member being banned from channel"
  member: Membership!

  "The action performed. true if member is banned, false if member is unbanned"
  action: Boolean!

  # Only channel owner can pin the comment, so no actor context required
}

type VideoReactionsPreferenceEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted"
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in"
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The video on which the comment section status changed"
  video: Video!

  "Is comment section enabled (true if enabled)"
  reactionsStatus: Boolean!

  # Only channel owner can enable/disable the comment section, so no actor context required
}

type VideoDeletedEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that deleted the video."
  actor: ContentActor!

  "ID  of the deleted video"
  videoId: Int!
}

type VideoDeletedByModeratorEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that deleted the video."
  actor: ContentActor!

  "ID  of the deleted video"
  videoId: Int!

  "Why the video was deleted"
  rationale: String!
}

type ChannelDeletedByModeratorEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that deleted the video."
  actor: ContentActor!

  "ID  of the deleted channel"
  channelId: Int!

  "Why the video was deleted"
  rationale: String!
}

type ChannelAssetsDeletedByModeratorEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that deleted the channel assets."
  actor: ContentActor!

  "Channel whose assets are deleted"
  channelId: Int!

  "ID  of the deleted video"
  assetIds: [Int!]

  "why the channel assets were deleted"
  rationale: String!
}

type VideoAssetsDeletedByModeratorEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that deleted the channel assets."
  actor: ContentActor!

  "Video whose assets are being deleted"
  videoId: Int!

  "Does deleted video assets belongs to NFT"
  are_nft_assets: Boolean

  "ID  of the deleted video"
  assetIds: [Int!]

  "why the channel assets were deleted"
  rationale: String!
}

type VideoVisibilitySetByModeratorEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that deleted the channel assets."
  actor: ContentActor!

  "Video whose visibility/censorship status is changed"
  videoId: Int!

  "Is video being censored/hidden (yes if true)"
  isHidden: Boolean!

  "Why video's visibility status was set"
  rationale: String!
}

type ChannelVisibilitySetByModeratorEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that deleted the channel assets."
  actor: ContentActor!

  "Channel whose visibility/censorship status is changed"
  channelId: Int!

  "Is channel being censored/hidden (yes if true)"
  isHidden: Boolean!

  "Why channel's visibility status was set"
  rationale: String!
}

type ChannelRewardClaimedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The channel that claimed the reward"
  channel: Channel!

  "Reward amount claimed"
  amount: BigInt!
}

type ChannelRewardClaimedAndWithdrawnEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The channel that claimed the reward"
  channel: Channel!

  "Reward amount claimed"
  amount: BigInt!

  "Destination account ID. Null in case the funds destination was Council"
  account: String

  "Content actor"
  actor: ContentActor!
}

type ChannelFundsWithdrawnEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "The channel that claimed the reward"
  channel: Channel!

  "Reward amount claimed"
  amount: BigInt!

  "Destination account ID. Null in case the funds destination was Council"
  account: String

  "Content actor"
  actor: ContentActor!
}

type ChannelPayoutsUpdatedEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Merkle root of the channel payouts"
  commitment: String

  "Storage data object corresponding to the channel payouts payload"
  payloadDataObject: StorageDataObject

  "Size of the serialized channel payouts payload"
  payloadSize: BigInt

  "Hash of the serialized channel payouts payload"
  payloadHash: String

  "Minimum amount of channel reward cashout allowed at a time"
  minCashoutAllowed: BigInt

  "Maximum amount of channel reward cashout allowed at a time"
  maxCashoutAllowed: BigInt

  "Can channel cashout the rewards"
  channelCashoutsEnabled: Boolean
}

type PaymentContextVideo @variant {
  "Video for which the payment was made"
  video: Video!
}

type PaymentContextChannel @variant {
  "Channel for which the payment was made"
  channel: Channel!
}

"Various Channel Payment Contexts"
union PaymentContext = PaymentContextVideo | PaymentContextChannel

"Direct channel payment by any member by-passing the council payouts"
type ChannelPaymentMadeEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that made the payment"
  payer: Membership!

  "Amount of the payment"
  amount: BigInt!

  "Payment and payee context"
  paymentContext: PaymentContext

  "Channel that received the payment (if any)"
  payeeChannel: Channel

  "Reason of the payment"
  rationale: String
}
