type OpenAuctionStartedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that started this auction."
  actor: ContentActor!

  "Video that's being auctioned."
  video: Video!

  "Auction started."
  auction: Auction!

  "Member owning the Nft (if any) that started the auction."
  ownerMember: Membership

  "Curator group owning the Nft (if any) that started the auction."
  ownerCuratorGroup: CuratorGroup
}

type EnglishAuctionStartedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Actor that started this auction."
  actor: ContentActor!

  "Video that's being auctioned."
  video: Video!

  "Auction started."
  auction: Auction!

  "Member owning the Nft (if any) that started the auction."
  ownerMember: Membership

  "Curator group owning the Nft (if any) that started the auction.."
  ownerCuratorGroup: CuratorGroup
}

type NftIssuedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Content actor that issued the NFT."
  contentActor: ContentActor!

  "Video represented via NFT."
  video: Video!

  # TODO: remove this field when Hydra supports deeply nested filtering
  "Reference to a NFT's video category"
  videoCategory: VideoCategory

  "Royalty for the NFT/video."
  royalty: Float

  # TODO: inspect if metadata can be unpacked and mean something useful
  "NFT's metadata."
  metadata: String!

  "Member owning the Nft (if any)."
  ownerMember: Membership

  "Curator group owning the Nft (if any)."
  ownerCuratorGroup: CuratorGroup
}

type AuctionBidMadeEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Member bidding in the auction."
  member: Membership!

  "Video that's bidden on."
  video: Video!

  "Bid made."
  bidAmount: BigInt!

  "Member owning the Nft (if any) when auction bid was made."
  ownerMember: Membership

  "Curator group owning the Nft (if any) when auction bid was made."
  ownerCuratorGroup: CuratorGroup

  "Bid that is being displaced by current bid in English auction"
  previousTopBid: Bid

  "Previous top bidder"
  previousTopBidder: Membership
}

type AuctionBidCanceledEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Auction that canceled the bid."
  member: Membership!

  "Auctioned video."
  video: Video!

  "Member owning the Nft (if any) when auction bid was canceled."
  ownerMember: Membership

  "Curator group owning the Nft (if any) when auction bid was canceled."
  ownerCuratorGroup: CuratorGroup
}

type AuctionCanceledEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Content actor canceling the event."
  contentActor: ContentActor!

  "Auctioned video."
  video: Video!

  "Member owning the Nft (if any) that canceled the auction."
  ownerMember: Membership

  "Curator group owning the Nft (if any) that canceled the auction."
  ownerCuratorGroup: CuratorGroup
}

type EnglishAuctionSettledEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Member claiming the auctioned NFT."
  winner: Membership!

  "winning bid"
  winningBid: Bid!

  "Auctioned video."
  video: Video!

  "Members who bid on this auction"
  bidders: [Membership!]

  "Member owning the Nft (if any) before english auction was completed."
  ownerMember: Membership

  "Curator group owning the Nft (if any) before english auction was completed."
  ownerCuratorGroup: CuratorGroup
}

type BidMadeCompletingAuctionEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Member completing the auction."
  member: Membership!

  "Auctioned video."
  video: Video!

  "Member owning the Nft (if any) when the bid was made that completed the auction."
  ownerMember: Membership

  "Curator group owning the Nft (if any) when the bid was made that completed the auction."
  ownerCuratorGroup: CuratorGroup

  "Price for which the NFT was bought"
  price: BigInt!

  "winning bid"
  winningBid: Bid!

  "Bid that is being displaced by current bid in English auction"
  previousTopBid: Bid

  "Previous top bidder"
  previousTopBidder: Membership

  "Members who bid on this auction"
  bidders: [Membership!]
}

type OpenAuctionBidAcceptedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "Content actor that accepted the bid."
  contentActor: ContentActor!

  "Auctioned video."
  video: Video!

  "Member owning the Nft (if any) that accepted the open auction bid."
  ownerMember: Membership

  "Curator group owning the Nft (if any) that accepted the open auction bid."
  ownerCuratorGroup: CuratorGroup

  "Accepted/winning bid"
  winningBid: Bid

  "Winning bidder"
  winningBidder: Membership

  "Members who bid on this auction"
  bidders: [Membership!]
}

type OfferStartedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "NFT's video."
  video: Video!

  "Content actor acting as NFT owner."
  contentActor: ContentActor!

  "Member that receives the offer."
  member: Membership!

  "Offer's price."
  price: BigInt

  "Member owning the Nft (if any) that offered the Nft."
  ownerMember: Membership

  "Curator group owning the Nft (if any) that offered the Nft."
  ownerCuratorGroup: CuratorGroup
}

type OfferAcceptedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "NFT's video."
  video: Video!

  "Member owning the Nft (if any) when the offer was accepted."
  ownerMember: Membership

  "Curator group owning the Nft (if any) when the offer was accepted."
  ownerCuratorGroup: CuratorGroup

  "Price for which the NFT was bought"
  price: BigInt
}

type OfferCanceledEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "NFT's video."
  video: Video!

  "Content actor acting as NFT owner."
  contentActor: ContentActor!

  "Member owning the Nft (if any) that canceled the offer."
  ownerMember: Membership

  "Curator group owning the Nft (if any) that canceled the offer."
  ownerCuratorGroup: CuratorGroup
}

type NftSellOrderMadeEvent @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "NFT's video."
  video: Video!

  "Content actor acting as NFT owner."
  contentActor: ContentActor!

  "Member owning the Nft (if any)."
  ownerMember: Membership

  "Curator group owning the Nft (if any)."
  ownerCuratorGroup: CuratorGroup

  "Offer's price."
  price: BigInt!
}

type NftBoughtEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "NFT's video."
  video: Video!

  "Member that bought the NFT."
  member: Membership!

  "Member owning the Nft (if any) before it was bought."
  ownerMember: Membership

  "Curator group owning the Nft (if any) before it was bought."
  ownerCuratorGroup: CuratorGroup

  "Price for which NFT was bought"
  price: BigInt!
}

type BuyNowCanceledEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "NFT's video."
  video: Video!

  "Content actor acting as NFT owner."
  contentActor: ContentActor!

  "Member owning the Nft (if any)."
  ownerMember: Membership

  "Curator group owning the Nft (if any)."
  ownerCuratorGroup: CuratorGroup
}

type BuyNowPriceUpdatedEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "NFT's video."
  video: Video!

  "Content actor acting as NFT owner."
  contentActor: ContentActor!

  "New buy-now price."
  newPrice: BigInt!

  "Member owning the Nft (if any) before it was bought."
  ownerMember: Membership

  "Curator group owning the Nft (if any) before it was bought."
  ownerCuratorGroup: CuratorGroup
}

type NftSlingedBackToTheOriginalArtistEvent implements Event @entity {
  ### GENERIC DATA ###

  "(network}-{blockNumber}-{indexInBlock}."
  id: ID!

  "Hash of the extrinsic which caused the event to be emitted."
  inExtrinsic: String

  "Blocknumber of the block in which the event was emitted."
  inBlock: Int!

  "Network the block was produced in."
  network: Network!

  "Index of event in block from which it was emitted."
  indexInBlock: Int!

  ### SPECIFIC DATA ###

  "NFT's video."
  video: Video!

  "Content actor who slung back the NFT."
  contentActor: ContentActor!

  "Member owning the Nft (if any) whom NFT was slung back."
  ownerMember: Membership

  "Curator group owning the Nft (if any) whom NFT was slung back."
  ownerCuratorGroup: CuratorGroup
}
