type AvatarObject @variant {
  "The avatar data object"
  avatarObject: StorageDataObject!
}

type AvatarUri @variant {
  "The avatar URL"
  avatarUri: String!
}

union Avatar = AvatarObject | AvatarUri

enum MembershipExternalResourceType {
  EMAIL
  HYPERLINK
  TWITTER
  TELEGRAM
  DISCORD
  FACEBOOK
  YOUTUBE
  MATRIX
  IRC
  WECHAT
  WHATSAPP
}

type MembershipExternalResource @entity {
  "Unique combination of {MemberMetadata.id}-{resourceType}"
  id: ID!
  type: MembershipExternalResourceType!
  value: String!
  memberMetadata: MemberMetadata!
  member: Membership
}

type MemberMetadata @entity {
  "Member's name"
  name: String

  "Avatar data object"
  avatar: Avatar

  "Short text chosen by member to share information about themselves"
  about: String

  member: Membership @derivedFrom(field: "metadata")

  "Social media handles, email address..."
  externalResources: [MembershipExternalResource] @derivedFrom(field: "memberMetadata")
}

type MembershipEntryPaid @variant {
  "The event the membership was bought in"
  # Must be optional because of member.entry <=> membershipBoughtEvent.newMember cross relationship
  membershipBoughtEvent: MembershipBoughtEvent
}

type MembershipEntryInvited @variant {
  "The event the member was invited in"
  # Must be optional because of member.entry <=> memberInvitedEvent.newMember cross relationship
  memberInvitedEvent: MemberInvitedEvent
}

type MembershipEntryGifted @variant {
  "The event the member was gifted in"
  # Must be optional because of member.entry <=> membershipGiftedEvent.newMember cross relationship
  membershipGiftedEvent: MembershipGiftedEvent
}

type MembershipEntryMemberCreated @variant {
  "The event the member was created in"
  # Must be optional because of member.entry <=> memberCreatedEvent.newMember cross relationship
  memberCreatedEvent: MemberCreatedEvent
}

type MembershipEntryGenesis @variant {
  phantom: Int
}

union MembershipEntryMethod =
    MembershipEntryPaid
  | MembershipEntryInvited
  | MembershipEntryGifted
  | MembershipEntryMemberCreated
  | MembershipEntryGenesis

"Stored information about a registered user"
type Membership @entity {
  "MemberId: runtime identifier for a user"
  id: ID!

  "The unique handle chosen by member"
  handle: String! @unique @fulltext(query: "membersByHandle")

  "Member's metadata"
  metadata: MemberMetadata!

  "Member's controller account id"
  controllerAccount: String!

  "Member's root account id"
  rootAccount: String!

  "How the member was registered"
  entry: MembershipEntryMethod!

  "Whether member has been verified by membership working group."
  isVerified: Boolean!

  "Staking accounts bounded to membership."
  boundAccounts: [String!]

  "Current count of invites left to send."
  inviteCount: Int!

  "All members invited by this member."
  invitees: [Membership!] @derivedFrom(field: "invitedBy")

  "A member that invited this member (if any)"
  invitedBy: Membership

  "All members referred by this member"
  referredMembers: [Membership!] @derivedFrom(field: "referredBy")

  "A member that referred this member (if any)"
  referredBy: Membership

  "Whether member is founding member."
  isFoundingMember: Boolean!

  "Whether member is elected in the current council."
  isCouncilMember: Boolean!

  "Social media handles, email address..."
  externalResources: [MembershipExternalResource] @derivedFrom(field: "member")

  "Member's working group roles (current and past)"
  roles: [Worker!] @derivedFrom(field: "membership")

  # Required for ProposalDiscussionWhitelist->members Many-to-Many relationship
  "List of proposal thread whitelists the member is part of"
  whitelistedIn: [ProposalDiscussionWhitelist!] @derivedFrom(field: "members")

  # Required for BountyEntrantWhitelist->members Many-to-Many relationship
  "List of bounty entrant whitelists the member is part of"
  whitelistedInBounties: [BountyEntrantWhitelist!] @derivedFrom(field: "members")

  "Content channels the member owns"
  channels: [Channel!] @derivedFrom(field: "ownerMember")

  "List of channel collaborators with their permissions"
  collaboratorInChannels: [Collaborator!]! @derivedFrom(field: "member")

  # Required for Channel->bannedMembers Many-to-Many relationship
  "List of channels the member is baned from participating in"
  memberBannedFromChannels: [Channel!] @derivedFrom(field: "bannedMembers")

  # # Required for CommentReaction->members Many-to-Many relationship
  # "List of comment reactions the member has made globally"
  # memberGlobalCommentReactions: [CommentReaction!] @derivedFrom(field: "members")
  # Council & Referendum relations

  #"Council reward payment made received by the member."
  #budgetPayments: [BudgetPayment!] @derivedFrom(field: "member")

  "Candidacies announced by this member."
  councilCandidacies: [Candidate!] @derivedFrom(field: "member")

  "Elected councils' memberships of the member."
  councilMembers: [CouncilMember!] @derivedFrom(field: "member")

  # NFTs & Members relations

  "Auctions in which is this user whitelisted to participate"
  whitelistedInAuctions: [Auction!]! @derivedFrom(field: "whitelistedMembers")

  "NFTs owned by this member"
  ownedNfts: [OwnedNft!]! @derivedFrom(field: "ownerMember")

  "NFTs owned by this member in various channels."
  nftCollectorInChannels: [ChannelNftCollectors!]! @derivedFrom(field: "member")

  "Number of channels ever created by this member"
  totalChannelsCreated: Int!

  # Required for EnglishAuctionSettledEvent->members Many-to-Many relationship
  "Member as bidder in EnglishAuctionSettledEvent/s."
  memberEnglishAuctionSettledEvents: [EnglishAuctionSettledEvent!] @derivedFrom(field: "bidders")

  # Required for OpenAuctionBidAcceptedEvent->members Many-to-Many relationship
  "Member as bidder in OpenAuctionBidAcceptedEvent/s."
  memberOpenAuctionAcceptedBidEvents: [OpenAuctionBidAcceptedEvent!] @derivedFrom(field: "bidders")

  # Required for BidMadeCompletingAuctionEvent->members Many-to-Many relationship
  "Member as bidder in BidMadeCompletingAuctionEvent/s."
  memberBidMadeCompletingAuctionEvents: [BidMadeCompletingAuctionEvent!] @derivedFrom(field: "bidders")
}
