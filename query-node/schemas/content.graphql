type Language @entity {
  "Runtime entity identifier (EntityId)"
  id: ID!

  "Language identifier ISO 639-1"
  iso: String!

  createdInBlock: Int!
}

type Channel @entity {
  "Runtime entity identifier (EntityId)"
  id: ID!

  "Application used for channel creation"
  entryApp: App

  "Member owning the channel (if any)"
  ownerMember: Membership

  "Curator group owning the channel (if any)"
  ownerCuratorGroup: CuratorGroup

  "The title of the Channel"
  title: String @fulltext(query: "search")

  "The description of a Channel"
  description: String

  "Count of channel's videos with an uploaded asset that are public and not censored."
  activeVideosCounter: Int!

  "Channel's cover (background) photo asset. Recommended ratio: 16:9."
  coverPhoto: StorageDataObject

  "Channel's avatar photo asset."
  avatarPhoto: StorageDataObject

  ##########################

  "Flag signaling whether a channel is public."
  isPublic: Boolean

  "Flag signaling whether a channel is censored."
  isCensored: Boolean!

  "The primary langauge of the channel's content"
  language: Language

  "List of videos that belong to the channel"
  videos: [Video!]! @derivedFrom(field: "channel")

  "Number of the block the channel was created in"
  createdInBlock: Int!

  "List of channel collaborators with their permissions"
  collaborators: [Collaborator!]! @derivedFrom(field: "channel")

  "List of members blocked from from participating on any video of the channel."
  bannedMembers: [Membership!]

  "Owners of video NFTs belonging to this channel."
  channelNftCollectors: [ChannelNftCollectors!]! @derivedFrom(field: "channel")

  "Channel's reward account, storing the income from the nft sales and channel payouts."
  rewardAccount: String!

  "Value of channel state bloat bond fee paid by channel creator"
  channelStateBloatBond: BigInt!

  "Channel's privilege level"
  privilegeLevel: Int

  #################
  # Channel Rewards
  #################

  "Cumulative rewards claimed by this channel"
  cumulativeRewardClaimed: BigInt

  "List of all claimed rewards"
  claimedRewards: [ChannelRewardClaimedEvent!] @derivedFrom(field: "channel")

  "Number of videos ever created in this channel"
  totalVideosCreated: Int!
}

type VideoCategory @entity {
  "Runtime identifier"
  id: ID!

  "The name of the category"
  name: String @fulltext(query: "videoCategoriesByName")

  "The description of the category"
  description: String

  "Count of category's videos with an uploaded asset that are public and not censored."
  activeVideosCounter: Int!

  "Parent category if defined"
  parentCategory: VideoCategory

  videos: [Video!]! @derivedFrom(field: "category")

  nfts: [OwnedNft!]! @derivedFrom(field: "videoCategory")

  createdInBlock: Int!
}

type Video @entity {
  "Runtime identifier"
  id: ID!

  "Application used for video creation"
  entryApp: App

  "Reference to videos's channel"
  channel: Channel!

  "Reference to a video category"
  category: VideoCategory

  "The title of the video"
  title: String @fulltext(query: "search")

  "The description of the Video"
  description: String

  "Video duration in seconds"
  duration: Int

  "Video thumbnail asset (recommended ratio: 16:9)"
  thumbnailPhoto: StorageDataObject

  ##########################

  "Video's main langauge"
  language: Language

  "Whether or not Video contains marketing"
  hasMarketing: Boolean

  "If the Video was published on other platform before beeing published on Joystream - the original publication date"
  publishedBeforeJoystream: DateTime

  "Whether the Video is supposed to be publically displayed"
  isPublic: Boolean

  "Flag signaling whether a video is censored."
  isCensored: Boolean!

  "Video NFT details"
  nft: OwnedNft

  "Whether the Video contains explicit material."
  isExplicit: Boolean

  "License under the video is published"
  license: License

  "Video media asset"
  media: StorageDataObject

  "Value of video state bloat bond fee paid by channel owner"
  videoStateBloatBond: BigInt!

  ##########################

  "Video file metadata"
  mediaMetadata: VideoMediaMetadata

  createdInBlock: Int!

  "List of video subtitles"
  subtitles: [VideoSubtitle!] @derivedFrom(field: "video")
  ##########################

  "Is comment section enabled (true if enabled)"
  isCommentSectionEnabled: Boolean!

  "channel owner pinned comment"
  pinnedComment: Comment @derivedFrom(field: "video")

  "List of all video comments"
  comments: [Comment!] @derivedFrom(field: "video")

  "Comments count"
  commentsCount: Int!

  "Is reactions feature enabled on video (true if enabled i.e. video can be reacted)"
  isReactionFeatureEnabled: Boolean!

  "List of all video reactions"
  reactions: [VideoReaction!] @derivedFrom(field: "video")

  "Reactions count by reaction Id"
  reactionsCountByReactionId: [VideoReactionsCountByReactionType!] @derivedFrom(field: "video")

  "Reactions count"
  reactionsCount: Int!

  "Video ID coming from YPP"
  ytVideoId: String

  "Whether the video is a short format, vertical video (e.g. Youtube Shorts, TikTok, Instagram Reels)"
  isShort: Boolean
}

type VideoMediaMetadata @entity {
  "Unique identifier"
  id: ID!

  "Encoding of the video media object"
  encoding: VideoMediaEncoding

  "Video media width in pixels"
  pixelWidth: Int

  "Video media height in pixels"
  pixelHeight: Int

  "Video media size in bytes"
  size: BigInt

  video: Video @derivedFrom(field: "mediaMetadata")

  createdInBlock: Int!
}

type VideoMediaEncoding @entity {
  "Encoding of the video media object"
  codecName: String

  "Media container format"
  container: String

  "Content MIME type"
  mimeMediaType: String
}

type License @entity {
  "Unique identifier"
  id: ID!

  "License code defined by Joystream"
  code: Int

  "Attribution (if required by the license)"
  attribution: String

  "Custom license content"
  custom_text: String
}

type VideoSubtitle @entity {
  "{type}-{language}"
  id: ID!

  "Subtitle's video"
  video: Video!

  # Atlas will use 'subtitles' | 'closed-captions' for now and possible other types in the future.
  "Subtitle's type"
  type: String!

  "Subtitle's language"
  language: Language

  "MIME type description of format used for this subtitle"
  mimeType: String!

  "Storage object representing the subtitle file"
  asset: StorageDataObject
}

type VideoReactionsCountByReactionType @entity {
  "{videoId}-{reactionId}"
  id: ID!

  "The reaction option"
  reaction: VideoReactionOptions!

  "No of times the video has been reacted with given reaction"
  count: Int!

  "The video which has been react with given reaction"
  video: Video!
}

enum VideoReactionOptions {
  "Reacting again with the same option will cancel the previous reaction"
  LIKE
  UNLIKE
}

type VideoReaction @entity {
  "{memberId}-{videoId}"
  id: ID!

  "The Reaction"
  reaction: VideoReactionOptions!

  "The member that reacted"
  member: Membership!

  "ID of the member that reacted"
  memberId: String!

  "The video that has been reacted to"
  video: Video!
}

type CommentReaction @entity {
  "{memberId}-{commentId}-{reactionId}"
  id: ID!

  "The Reaction id"
  reaction_id: Int!

  "The member that reacted"
  member: Membership!

  "ID of the member that reacted"
  memberId: String!

  "The comment that has been reacted to"
  comment: Comment!

  # Added to efficiently delete all reactions of all
  # (deleted) comments once video has been deleted.
  "The video the comment (that has been reacted) exists"
  video: Video!
}

enum CommentStatus {
  VISIBLE
  DELETED
  MODERATED
}

type CommentReactionsCountByReactionId @entity {
  "{commentId}-{reactionId}"
  id: ID!

  "The reaction id"
  reaction_id: Int!

  "No of times the comment has been reacted with given reaction Id"
  count: Int!

  "The comment which has been react with given reaction Id"
  comment: Comment!

  # Added to efficiently delete all reactions counts of all
  # (deleted) comments once video has been deleted.
  "The video the comment (that has been reacted) exists"
  video: Video!
}

type Comment @entity {
  "METAPROTOCOL-{network}-{blockNumber}-{indexInBlock}"
  id: ID!

  "Author of the video comment"
  author: Membership!

  "Comment text"
  text: String! @fulltext(query: "commentText")

  "Video the comment was added to"
  video: Video!

  "Status of the comment; either it is visible, deleted, or moderated (deleted by moderator)"
  status: CommentStatus!

  "List of all reactions to the comment"
  reactions: [CommentReaction!] @derivedFrom(field: "comment")

  "Reactions count by reaction Id"
  reactionsCountByReactionId: [CommentReactionsCountByReactionId!] @derivedFrom(field: "comment")

  "A (parent) comment that this comment replies to (if any)"
  parentComment: Comment

  "How many comments has replied to this comment"
  repliesCount: Int!

  "Total number of reactions to this comment"
  reactionsCount: Int!

  "Sum of replies and reactions"
  reactionsAndRepliesCount: Int!

  "Whether comment has been edited or not"
  isEdited: Boolean!

  "List of all text update events (edits)"
  edits: [CommentTextUpdatedEvent!] @derivedFrom(field: "comment")

  "The event the comment was deleted in (if any)"
  deletedInEvent: CommentDeletedEvent @derivedFrom(field: "comment")

  "The event the comment was moderated in (if any)"
  moderatedInEvent: CommentModeratedEvent @derivedFrom(field: "comment")
}

type Collaborator @entity {
  "Relevant channel"
  channel: Channel!

  "Related member"
  member: Membership!

  # unfortunately permissions can't be modeled as ist of enums
  # `permissions: [ChannelActionPermission!]!`
  # TODO: rework it after this feature is available https://github.com/Joystream/hydra/issues/507
  "List of member's permissions"
  permissions: [String!]!
}
