import {
  BaseModel,
  <%= props.fields.some((field) => { return field.type === 'bool' }) ? "BooleanField," : "" -%>
  <%= props.fields.some((field) => { return field.type === 'date' }) ? "DateField," : "" -%>
  <%= props.fields.some((field) => { return field.type === 'float' }) ? "FloatField," : "" -%>
  <%= props.fields.some((field) => { return field.type === 'int' }) ? "IntField," : "" -%>
  <%= props.fields.some((field) => { return field.type === 'json' }) ? "JSONField," : "" -%>
  Model,
  <%= props.fields.some((field) => { return field.type === 'mto' }) ? "ManyToOne," : "" -%>
  <%= props.fields.some((field) => { return field.type === 'otm' }) ? "OneToMany," : "" -%>
  StringField
} from '<%= props.warthogPathInSourceFiles %>';

@Model()
export class <%= props.className %> extends BaseModel {
<% props.fields.forEach(function(field){ %>
  <% locals.tmp = !field.required %>

  <%
    // Special case for OneToMany
    if(field.type === 'otm') {
      locals.relClassName = props.pascalCase(field.name)
      locals.relCamelName = props.camelCase(field.name)
  %>
    @OneToMany(() => <%= locals.relClassName %>, (<%= locals.relCamelName %>: <%= locals.relClassName %>) => <%= locals.relCamelName %>.<%= props.camelName %>)
    <%= locals.relCamelName %>?: <%= locals.relClassName %>[];
  <% return; } %>

  <%
    // Special case for ManyToOne
    if(field.type === 'mto') {
      locals.relClassName = props.pascalCase(field.name)
      locals.relCamelName = props.camelCase(field.name)
  %>
    @ManyToOne(() => <%= locals.relClassName %>, (<%= locals.relCamelName %>: <%= locals.relClassName %>) => <%= locals.relCamelName %>.<%= props.camelNamePlural %>, {
      skipGraphQLField: true,
      nullable: true
    })
    <%= locals.relCamelName %>?: <%= locals.relClassName %>;
  <% return; } %>

  @<%= field.decorator %>(<%= locals.tmp ? "{" : "" -%>
    <%_ _%><%= field.required ? "" : "nullable: true," -%>
    <%_ _%><%= locals.tmp ? "}" : "" -%>)
  <%= field.name %><%= field.required ? "!" : "?" %>: <%= field.tsType %>;
<% }) %>
}
