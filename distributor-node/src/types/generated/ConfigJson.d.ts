/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Set of bucket ids distributed by the node. If not specified, all buckets currently assigned to worker specified in `config.workerId` will be distributed. Expected bucket id format is: {familyId}:{bucketIndex}
 */
export type DistributedBucketsIds = string[]

/**
 * Configuration schema for distirubtor CLI and node
 */
export interface DistributorNodeConfiguration {
  /**
   * Node identifier used when sending elasticsearch logs and exposed on /status endpoint
   */
  id: string
  /**
   * Specifies external endpoints that the distributor node will connect to
   */
  endpoints: {
    /**
     * Query node graphql server uri (for example: http://localhost:8081/graphql)
     */
    queryNode: string
    /**
     * Joystream node websocket api uri (for example: ws://localhost:9944)
     */
    joystreamNodeWs: string
  }
  /**
   * Specifies paths where node's data will be stored
   */
  directories: {
    /**
     * Path to a directory where all the cached assets will be stored
     */
    assets: string
    /**
     * Path to a directory where information about the current cache state will be stored (LRU-SP cache data, stored assets mime types etc.)
     */
    cacheState: string
  }
  /**
   * Specifies the logging configuration
   */
  logs?: {
    file?: FileLoggingOptions
    console?: ConsoleLoggingOptions
    elastic?: ElasticsearchLoggingOptions
  }
  /**
   * Specifies node limits w.r.t. storage, outbound connections etc.
   */
  limits: {
    /**
     * Maximum total size of all (cached) assets stored in `directories.assets`
     */
    storage: string
    /**
     * Maximum number of concurrent downloads from the storage node(s)
     */
    maxConcurrentStorageNodeDownloads: number
    /**
     * Maximum number of total simultaneous outbound connections to storage node(s) (excluding proxy connections)
     */
    maxConcurrentOutboundConnections: number
    /**
     * Timeout for all outbound storage node http requests in miliseconds
     */
    outboundRequestsTimeoutMs: number
    /**
     * Timeout for pending storage node downloads in seconds
     */
    pendingDownloadTimeoutSec: number
    /**
     * Maximum size of a data object allowed to be cached by the node
     */
    maxCachedItemSize?: string
    /**
     * TTL (in seconds) for dataObjectSourceByObjectId cache used when proxying objects of size greater than maxCachedItemSize to the right storage node.
     */
    dataObjectSourceByObjectIdTTL?: number
  }
  /**
   * Specifies how often periodic tasks (for example cache cleanup) are executed by the node.
   */
  intervals: {
    /**
     * How often, in seconds, will the cache state be saved in `directories.state`. Independently of the specified interval, the node will always try to save cache state before exiting.
     */
    saveCacheState: number
    /**
     * How often, in seconds, will the distributor node attempt to send requests to all current storage node endpoints in order to check how quickly they respond. The node will never make more than 10 such requests concurrently.
     */
    checkStorageNodeResponseTimes: number
    /**
     * How often, in seconds, will the distributor node fetch data about all its distribution obligations from the query node and remove all the no-longer assigned data objects from local storage and cache state
     */
    cacheCleanup: number
  }
  /**
   * Public api configuration
   */
  publicApi: {
    /**
     * Distributor node public api port
     */
    port: number
  }
  /**
   * Operator api configuration
   */
  operatorApi?: {
    /**
     * Distributor node operator api port
     */
    port: number
    /**
     * HMAC (HS256) secret key used for JWT authorization
     */
    hmacSecret: string
  }
  /**
   * Specifies the keys available within distributor node CLI.
   */
  keys?: (SubstrateUri | MnemonicPhrase | JSONBackupFile)[]
  buckets?: DistributedBucketsIds
  /**
   * ID of the node operator (distribution working group worker)
   */
  workerId?: number
}
export interface FileLoggingOptions {
  /**
   * Minimum level of logs sent to this output
   */
  level: 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly'
  /**
   * Path where the logs will be stored (absolute or relative to config file)
   */
  path: string
  /**
   * Maximum number of log files to store. Recommended to be at least 7 when frequency is set to `daily` and at least 24 * 7 when frequency is set to `hourly`
   */
  maxFiles?: number
  /**
   * Maximum size of a single log file in bytes
   */
  maxSize?: number
  /**
   * The frequency of creating new log files (regardless of maxSize)
   */
  frequency?: 'yearly' | 'monthly' | 'daily' | 'hourly'
  /**
   * Whether to archive old logs
   */
  archive?: boolean
}
export interface ConsoleLoggingOptions {
  /**
   * Minimum level of logs sent to this output
   */
  level: 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly'
}
export interface ElasticsearchLoggingOptions {
  /**
   * Minimum level of logs sent to this output
   */
  level: 'error' | 'warn' | 'info' | 'http' | 'verbose' | 'debug' | 'silly'
  /**
   * Elastichsearch endpoint to push the logs to (for example: http://localhost:9200)
   */
  endpoint: string
}
/**
 * Keypair's substrate uri (for example: //Alice)
 */
export interface SubstrateUri {
  type?: 'ed25519' | 'sr25519' | 'ecdsa'
  suri: string
}
/**
 * Menomonic phrase
 */
export interface MnemonicPhrase {
  type?: 'ed25519' | 'sr25519' | 'ecdsa'
  mnemonic: string
}
/**
 * Path to JSON backup file from polkadot signer / polakdot/apps (relative to config file path)
 */
export interface JSONBackupFile {
  keyfile: string
}
