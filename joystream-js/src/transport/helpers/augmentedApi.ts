import { ApiPromise } from '@polkadot/api'

// Allows creating augmented api.query and api.tx without the need for configuring tsconfing paths in dependent project
// TODO: Investigate if there is an easier way to achieve this
export function getAugmented(api: ApiPromise) {
  return {
    query: {
      authorship: api.query.authorship,
      babe: api.query.babe,
      balances: api.query.balances,
      contentDirectory: api.query.contentDirectory,
      contentDirectoryWorkingGroup: api.query.contentDirectoryWorkingGroup,
      contentWorkingGroup: api.query.contentWorkingGroup,
      council: api.query.council,
      councilElection: api.query.councilElection,
      dataDirectory: api.query.dataDirectory,
      dataObjectStorageRegistry: api.query.dataObjectStorageRegistry,
      dataObjectTypeRegistry: api.query.dataObjectTypeRegistry,
      discovery: api.query.discovery,
      forum: api.query.forum,
      grandpa: api.query.grandpa,
      hiring: api.query.hiring,
      imOnline: api.query.imOnline,
      members: api.query.members,
      memo: api.query.memo,
      minting: api.query.minting,
      offences: api.query.offences,
      proposalsCodex: api.query.proposalsCodex,
      proposalsDiscussion: api.query.proposalsDiscussion,
      proposalsEngine: api.query.proposalsEngine,
      randomnessCollectiveFlip: api.query.randomnessCollectiveFlip,
      recurringRewards: api.query.recurringRewards,
      session: api.query.session,
      stake: api.query.stake,
      staking: api.query.staking,
      storageWorkingGroup: api.query.storageWorkingGroup,
      sudo: api.query.sudo,
      system: api.query.system,
      timestamp: api.query.timestamp,
      transactionPayment: api.query.transactionPayment,
      versionedStore: api.query.versionedStore,
      versionedStorePermissions: api.query.versionedStorePermissions,
    },
    tx: {
      authorship: api.tx.authorship,
      balances: api.tx.balances,
      contentDirectory: api.tx.contentDirectory,
      contentDirectoryWorkingGroup: api.tx.contentDirectoryWorkingGroup,
      contentWorkingGroup: api.tx.contentWorkingGroup,
      council: api.tx.council,
      councilElection: api.tx.councilElection,
      dataDirectory: api.tx.dataDirectory,
      dataObjectStorageRegistry: api.tx.dataObjectStorageRegistry,
      dataObjectTypeRegistry: api.tx.dataObjectTypeRegistry,
      discovery: api.tx.discovery,
      finalityTracker: api.tx.finalityTracker,
      forum: api.tx.forum,
      grandpa: api.tx.grandpa,
      imOnline: api.tx.imOnline,
      members: api.tx.members,
      memo: api.tx.memo,
      proposalsCodex: api.tx.proposalsCodex,
      proposalsDiscussion: api.tx.proposalsDiscussion,
      proposalsEngine: api.tx.proposalsEngine,
      session: api.tx.session,
      staking: api.tx.staking,
      storageWorkingGroup: api.tx.storageWorkingGroup,
      sudo: api.tx.sudo,
      system: api.tx.system,
      timestamp: api.tx.timestamp,
      utility: api.tx.utility,
      versionedStorePermissions: api.tx.versionedStorePermissions,
    },
  }
}

export type AugmentedApi = ReturnType<typeof getAugmented>
