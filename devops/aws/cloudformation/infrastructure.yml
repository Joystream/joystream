# Deploy inftrastructure required to run a new joystream chain.
# This is comprised of:
#   - N validators
#   - One RPC node
#   - One Build instance

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EC2InstanceType:
    Type: String
    Default: t2.xlarge
  ValidatorEC2InstanceType:
    Type: String
    Default: t2.xlarge
  RPCEC2InstanceType:
    Type: String
    Default: t2.xlarge
  BuildEC2InstanceType:
    Type: String
    Default: c4.2xlarge
  StorageEc2InstanceType:
    Type: String
    Default: t2.xlarge
  JoystreamAmi:
    Type: String
  DefaultAMI:
    Type: String
    Default: 'ami-0a8273bdc1bfaedf7'
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: 'joystream-key'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  NumberOfValidators:
    Description: Number of validator instances to launch
    Type: Number
    Default: 2
  NumberOfStorageNodes:
    Description: Number of storage node instances to launch
    Type: Number
    Default: 0
  NumberOfDistributorNodes:
    Description: Number of distributor node instances to launch
    Type: Number
    Default: 0
  TotalNumberOfInstancesInGroups:
    Description: Sum of NumberOfValidators,NumberOfStorageNodes,NumberOfDistributorNodes
    Type: Number
    Default: 2
  VolumeSize:
    Description: volume size in GB for all instances
    Type: Number
    Default: 200

Conditions:
  HasAMIId: !Not [!Equals [!Ref JoystreamAmi, '']]

Resources:
  # Common security group for all instances
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Internal Security group for RPC nodes ${AWS::StackName}'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9933
          ToPort: 9933
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9944
          ToPort: 9944
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 30333
          ToPort: 30333
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_rpc'

  InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              wget: []
              unzip: []
    Properties:
      LaunchTemplateName: !Sub 'LaunchTemplate_${AWS::StackName}'
      LaunchTemplateData:
        ImageId: !If [HasAMIId, !Ref JoystreamAmi, !Ref DefaultAMI]
        InstanceType: !Ref EC2InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !GetAtt SecurityGroup.GroupId
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: !Ref VolumeSize
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe

            # send script output to /tmp so we can debug boot failures
            exec > /tmp/userdata.log 2>&1

            # Prevent interactive prompts that would interrupt the installation
            export DEBIAN_FRONTEND=noninteractive

            # Update all packages
            apt-get update -y

            # Get latest cfn scripts and install them;
            apt-get install -y python3-setuptools
            mkdir -p /opt/aws/bin
            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz

            /opt/aws/bin/cfn-signal -e $? -r "Instance Created" '${WaitHandle}'

  ValidatorsGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: !Ref NumberOfValidators
      AvailabilityZones:
        Fn::GetAZs:
          Ref: 'AWS::Region'
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref InstanceLaunchTemplate
            Version: !GetAtt InstanceLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Ref ValidatorEC2InstanceType
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
          PropagateAtLaunch: 'true'

  StorageNodesGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '0'
      MaxSize: '4'
      DesiredCapacity: !Ref NumberOfStorageNodes
      AvailabilityZones:
        Fn::GetAZs:
          Ref: 'AWS::Region'
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref InstanceLaunchTemplate
            Version: !GetAtt InstanceLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Ref RPCEC2InstanceType
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
          PropagateAtLaunch: 'true'

  DistributorNodesGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '0'
      MaxSize: '4'
      DesiredCapacity: !Ref NumberOfDistributorNodes
      AvailabilityZones:
        Fn::GetAZs:
          Ref: 'AWS::Region'
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref InstanceLaunchTemplate
            Version: !GetAtt InstanceLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Ref RPCEC2InstanceType
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
          PropagateAtLaunch: 'true'

  RPCInstance:
    Type: AWS::EC2::Instance
    Properties:
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      InstanceType: !Ref RPCEC2InstanceType
      LaunchTemplate:
        LaunchTemplateId: !Ref InstanceLaunchTemplate
        Version: !GetAtt InstanceLaunchTemplate.LatestVersionNumber
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref VolumeSize
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_rpc'

  BuildInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref BuildEC2InstanceType
      LaunchTemplate:
        LaunchTemplateId: !Ref InstanceLaunchTemplate
        Version: !GetAtt InstanceLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_build'

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref 'WaitHandle'
      Timeout: '1000'
      Count: !Ref TotalNumberOfInstancesInGroups

Outputs:
  ValidatorsAutoScalingId:
    Description: The Auto Scaling ID
    Value: !Ref ValidatorsGroup
    Export:
      Name: !Sub '${AWS::StackName}ValidatorsGroup'

  StorageNodesAutoScalingId:
    Description: The Auto Scaling ID
    Value: !Ref StorageNodesGroup
    Export:
      Name: !Sub '${AWS::StackName}StorageNodesGroup'

  DistributorNodesAutoScalingId:
    Description: The Auto Scaling ID
    Value: !Ref DistributorNodesGroup
    Export:
      Name: !Sub '${AWS::StackName}DistributorNodesGroup'

  RPCPublicIp:
    Description: The DNS name for the created instance
    Value: !Sub '${RPCInstance.PublicIp}'
    Export:
      Name: !Sub '${AWS::StackName}RPCPublicIp'

  BuildPublicIp:
    Description: The DNS name for the created instance
    Value: !Sub '${BuildInstance.PublicIp}'
    Export:
      Name: !Sub '${AWS::StackName}BuildPublicIp'

  BuildInstanceId:
    Description: Build instance ID
    Value: !Ref BuildInstance
    Export:
      Name: !Sub '${AWS::StackName}BuildInstanceId'
