---
# Install developer tools

- name: Install required system packages
  become: true
  apt:
    update_cache: yes
    pkg:
      - coreutils
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
      - tar
      - unzip
      - jq
      - cmake
      - clang
      - llvm
      - gcc
      - xz-utils
      - sudo
      - pkg-config
      - libc6-dev
      - make
      - libssl-dev
      - python3
      - cmake
      - dpkg
      - lsb-release
      - protobuf-compiler
      - libprotobuf-dev
    state: latest

# ref: https://docs.docker.com/engine/install/ubuntu/#uninstall-old-versions
- name: Remove old docker version
  become: true
  apt:
    name:
      - docker-compose
      - docker.io
      - docker-doc
      - docker-compose
      - podman-docker
      - containerd
      - runc
    state: absent

- name: Add Docker GPG Key and repo
  become: true
  shell:
    cmd: |
      bash -c "
        mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg | gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
        echo 'deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
            https://download.docker.com/linux/{{ ansible_distribution | lower }} \
              $(lsb_release -cs) stable' | tee /etc/apt/sources.list.d/docker.list > /dev/null
      "
    creates: /etc/apt/sources.list.d/docker.list

- name: Install Docker
  become: true
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
    state: latest
    update_cache: true

- name: Install docker-compose
  become: true
  shell:
    cmd: |
      bash -c "
        curl -L 'https://github.com/docker/compose/releases/download/v2.20.1/docker-compose-$(uname -s)-$(uname -m)' -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
      "
    creates: /usr/local/bin/docker-compose

- name: Install Docker module for Python
  pip:
    name: docker

# usermod -aG docker username
# To allow non root user to run docker
- name: Add user to docker group
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker,
    append: yes

- name: Install rustup
  shell: 
    cmd: |
      bash -ic "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y"
  args:
    executable: /bin/bash

- name: Install volta
  shell: 
    cmd: |
      bash -ic "curl https://get.volta.sh | bash -i"
  args:
    executable: /bin/bash
  when: ansible_machine == "x86_64"

- name: Install yarn and node with volta
  shell: 
    cmd: |
      bash -ic "
        volta install node@18 && volta install yarn
      "
  args:
    executable: /bin/bash
  when: ansible_machine == "x86_64"