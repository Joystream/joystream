---

- name: DeployPlayground
  hosts: all
  gather_facts: yes

  tasks:
    - name: Add authorized key
      when: (ssh_pub_key is defined) and (ssh_pub_key|length > 0)
      ansible.posix.authorized_key:
        user: ubuntu
        state: present
        key: "{{ ssh_pub_key }}"

    - name: Install tools
      include_role:
        name: common
        tasks_from: install-tools

    - name: Get code from git repo
      include_role:
        name: common
        tasks_from: get-code-git

    - name: Build joystream apps
      include_role:
        name: common
        tasks_from: build-apps

    - name: Make sure docker is running
      command: systemctl start docker
      become: yes

    - name: Build joystream/node docker image
      shell: bash -ic "./build-node-docker.sh"
      args:
        chdir: '{{ remote_code_path }}'
      environment:
        RUNTIME_PROFILE: '{{ runtime_profile }}'
      async: 3600
      poll: 0
      register: node_build_result

    - name: Check on build node image async task
      async_status:
        jid: '{{ node_build_result.ansible_job_id }}'
      register: job_result
      until: job_result.finished
      # Max number of times to check for status
      retries: 36
      # Check for the status every 100s
      delay: 100

    - name: Start Playground Services
      shell: bash -ic "./tests/network-tests/run-node-docker.sh && ./start-multistorage.sh"
      args:
        chdir: '{{ remote_code_path }}'
      environment:
        RUNTIME_PROFILE: '{{ runtime_profile }}'
        PERSIST: 'true'
        COLOSSUS_1_URL: 'https://{{ inventory_hostname }}.nip.io/colossus-1/'
        DISTRIBUTOR_1_URL: 'https://{{ inventory_hostname }}.nip.io/distributor-1/'
        COLOSSUS_2_URL: 'https://{{ inventory_hostname }}.nip.io/colossus-2/'
        DISTRIBUTOR_2_URL: 'https://{{ inventory_hostname }}.nip.io/distributor-2/'
        SKIP_CHAIN_SETUP: '{{ skip_chain_setup }}'
        INIT_CHAIN_SCENARIO: '{{ init_chain_scenario }}'
        BALANCE_CREDIT: 1000000000000000
        BALANCE_LOCKED: 1000000000000000
        TREASURY_ACCOUNT_URI: '{{ treasury_suri }}'
        INITIAL_BALANCES: '{{ initial_balances }}'
        SKIP_NODE: 'true'
      async: 4000
      poll: 0
      register: start_services_result

    - name: Check on yarn start task
      async_status:
        jid: '{{ start_services_result.ansible_job_id }}'
      register: job_result
      until: job_result.finished
      # Max number of times to check for status
      retries: 40
      # Check for the status every 100s
      delay: 100

    - name: Set nip.io domain with IP
      set_fact:
        nip_domain: '{{ inventory_hostname }}.nip.io'
      run_once: yes

    - name: Install and configure Caddy
      include_role:
        name: caddy_ansible.caddy_ansible
        apply:
          become: yes
      vars:
        caddy_config: "{{ lookup('template', 'templates/Playground-Caddyfile.j2') }}"
        caddy_systemd_capabilities_enabled: true
        caddy_update: false
        caddy_home: "/home/caddy"

    - name: Set endpoints
      set_fact:
        all_services: |
          websocket_rpc: wss://{{ nip_domain }}/ws-rpc
          http_rpc: https://{{ nip_domain }}/http-rpc
          colossus_1: https://{{ nip_domain }}/colossus-1
          distributor_1: https://{{ nip_domain }}/distributor-1
          colossus_2: https://{{ nip_domain }}/colossus-2
          distributor_2: https://{{ nip_domain }}/distributor-2
          graphql_server: https://{{ nip_domain }}/query-node/server/graphql
          graphql_server_websocket: wss://{{ nip_domain }}/query-node/server/graphql
          indexer: https://{{ nip_domain }}/query-node/indexer/graphql
          member_faucet: https://{{ nip_domain }}/member-faucet/register
          orion: https://{{ nip_domain }}/orion/graphql
          config: https://{{ nip_domain }}/network/config.json
          stack_name: {{ stack_name }}
      run_once: yes

    - name: Print endpoints
      debug:
        msg: '{{ all_services | from_yaml }}'
      run_once: yes

    - name: Create config.json to serve as Caddy endpoint
      copy:
        content: '{{ all_services | from_yaml | to_json }}'
        dest: '/home/caddy/endpoints.json'
        mode: a+r
      become: true

    - name: Save output as file on local
      copy:
        content: '{{ all_services | from_yaml | to_json }}'
        dest: 'endpoints.json'
      delegate_to: localhost
