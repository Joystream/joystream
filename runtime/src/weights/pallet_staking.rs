// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=pallet_staking
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/frame-weight-template.hbs
// --output=./scripts/../runtime/src/weights/pallet_staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub use pallet_staking::weights::WeightInfo;

/// Weights for pallet_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	fn bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `999`
		//  Estimated: `14490`
		// Minimum execution time: 51_582 nanoseconds.
		Weight::from_parts(52_750_000, 0u64)
			.saturating_add(Weight::from_parts(0, 14490))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:3 w:3)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:2 w:2)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	fn bond_extra() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2012`
		//  Estimated: `27982`
		// Minimum execution time: 99_765 nanoseconds.
		Weight::from_parts(102_585_000, 0u64)
			.saturating_add(Weight::from_parts(0, 27982))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:0)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:1 w:0)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:3 w:3)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:2 w:2)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	fn unbond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2245`
		//  Estimated: `38588`
		// Minimum execution time: 107_669 nanoseconds.
		Weight::from_parts(110_427_000, 0u64)
			.saturating_add(Weight::from_parts(0, 38588))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_update(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `931`
		//  Estimated: `14546`
		// Minimum execution time: 38_269 nanoseconds.
		Weight::from_parts(40_572_245, 0u64)
			.saturating_add(Weight::from_parts(0, 14546))
			// Standard Error: 926
			.saturating_add(Weight::from_parts(40_311, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:2 w:2)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:1 w:1)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: VoterList CounterForListNodes (r:1 w:1)
	// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: Staking SpanSlash (r:0 w:100)
	// Proof: Staking SpanSlash (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 100]`.
	fn withdraw_unbonded_kill(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2290 + s * (4 ±0)`
		//  Estimated: `44139 + s * (4 ±0)`
		// Minimum execution time: 95_737 nanoseconds.
		Weight::from_parts(104_705_712, 0u64)
			.saturating_add(Weight::from_parts(0, 44139))
			// Standard Error: 3_403
			.saturating_add(Weight::from_parts(1_599_906, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(s.into()))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking MinValidatorBond (r:1 w:0)
	// Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking MinCommission (r:1 w:0)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:1 w:1)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking MaxValidatorsCount (r:1 w:0)
	// Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking CounterForValidators (r:1 w:1)
	// Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:0)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:2 w:2)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:1 w:1)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: VoterList CounterForListNodes (r:1 w:1)
	// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn validate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1390`
		//  Estimated: `33022`
		// Minimum execution time: 72_501 nanoseconds.
		Weight::from_parts(74_120_000, 0u64)
			.saturating_add(Weight::from_parts(0, 33022))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:128 w:128)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	/// The range of component `k` is `[1, 128]`.
	fn kick(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1195 + k * (569 ±0)`
		//  Estimated: `5690 + k * (3033 ±0)`
		// Minimum execution time: 35_418 nanoseconds.
		Weight::from_parts(31_937_311, 0u64)
			.saturating_add(Weight::from_parts(0, 5690))
			// Standard Error: 9_672
			.saturating_add(Weight::from_parts(9_410_084, 0u64).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 3033).saturating_mul(k.into()))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:1 w:0)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking MaxNominatorsCount (r:1 w:0)
	// Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:17 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:2 w:2)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:1 w:1)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: VoterList CounterForListNodes (r:1 w:1)
	// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	fn nominate(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1852 + n * (104 ±0)`
		//  Estimated: `33022 + n * (2520 ±0)`
		// Minimum execution time: 77_899 nanoseconds.
		Weight::from_parts(76_058_247, 0u64)
			.saturating_add(Weight::from_parts(0, 33022))
			// Standard Error: 9_770
			.saturating_add(Weight::from_parts(4_092_389, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(6_u64))
			.saturating_add(Weight::from_parts(0, 2520).saturating_mul(n.into()))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:2 w:2)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:1 w:1)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: VoterList CounterForListNodes (r:1 w:1)
	// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn chill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1707`
		//  Estimated: `25006`
		// Minimum execution time: 67_611 nanoseconds.
		Weight::from_parts(70_696_000, 0u64)
			.saturating_add(Weight::from_parts(0, 25006))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	fn set_payee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `721`
		//  Estimated: `4700`
		// Minimum execution time: 16_221 nanoseconds.
		Weight::from_parts(17_009_000, 0u64)
			.saturating_add(Weight::from_parts(0, 4700))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:2 w:2)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	fn set_controller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `820`
		//  Estimated: `11947`
		// Minimum execution time: 25_310 nanoseconds.
		Weight::from_parts(25_984_000, 0u64)
			.saturating_add(Weight::from_parts(0, 11947))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Staking ValidatorCount (r:0 w:1)
	// Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_validator_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_205 nanoseconds.
		Weight::from_parts(3_446_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking ForceEra (r:0 w:1)
	// Proof: Staking ForceEra (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_no_eras() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_726 nanoseconds.
		Weight::from_parts(12_143_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking ForceEra (r:0 w:1)
	// Proof: Staking ForceEra (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_era() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_873 nanoseconds.
		Weight::from_parts(12_097_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking ForceEra (r:0 w:1)
	// Proof: Staking ForceEra (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_era_always() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_918 nanoseconds.
		Weight::from_parts(12_337_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking Invulnerables (r:0 w:1)
	// Proof Skipped: Staking Invulnerables (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 400]`.
	fn set_invulnerables(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_549 nanoseconds.
		Weight::from_parts(4_460_076, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 85
			.saturating_add(Weight::from_parts(8_771, 0u64).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:2 w:2)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:1 w:1)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: VoterList CounterForListNodes (r:1 w:1)
	// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:0 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: Staking SpanSlash (r:0 w:100)
	// Proof: Staking SpanSlash (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 100]`.
	fn force_unstake(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2020 + s * (4 ±0)`
		//  Estimated: `37680 + s * (4 ±0)`
		// Minimum execution time: 86_934 nanoseconds.
		Weight::from_parts(95_797_312, 0u64)
			.saturating_add(Weight::from_parts(0, 37680))
			// Standard Error: 3_348
			.saturating_add(Weight::from_parts(1_591_416, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(s.into()))
	}
	// Storage: Staking UnappliedSlashes (r:1 w:1)
	// Proof Skipped: Staking UnappliedSlashes (max_values: None, max_size: None, mode: Measured)
	/// The range of component `s` is `[1, 1000]`.
	fn cancel_deferred_slash(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66558`
		//  Estimated: `70023`
		// Minimum execution time: 112_961 nanoseconds.
		Weight::from_parts(884_448_135, 0u64)
			.saturating_add(Weight::from_parts(0, 70023))
			// Standard Error: 55_936
			.saturating_add(Weight::from_parts(4_732_729, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ErasValidatorReward (r:1 w:0)
	// Proof: Staking ErasValidatorReward (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:257 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking ErasStakersClipped (r:1 w:0)
	// Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasRewardPoints (r:1 w:0)
	// Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasValidatorPrefs (r:1 w:0)
	// Proof: Staking ErasValidatorPrefs (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:257 w:0)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: System Account (r:257 w:257)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 256]`.
	fn payout_stakers_dead_controller(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `20459 + n * (140 ±0)`
		//  Estimated: `63972 + n * (8020 ±1)`
		// Minimum execution time: 109_350 nanoseconds.
		Weight::from_parts(79_995_136, 0u64)
			.saturating_add(Weight::from_parts(0, 63972))
			// Standard Error: 81_986
			.saturating_add(Weight::from_parts(33_399_350, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 8020).saturating_mul(n.into()))
	}
	// Storage: Staking CurrentEra (r:1 w:0)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ErasValidatorReward (r:1 w:0)
	// Proof: Staking ErasValidatorReward (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:257 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:257 w:257)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking ErasStakersClipped (r:1 w:0)
	// Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasRewardPoints (r:1 w:0)
	// Proof Skipped: Staking ErasRewardPoints (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasValidatorPrefs (r:1 w:0)
	// Proof: Staking ErasValidatorPrefs (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:257 w:0)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: System Account (r:257 w:257)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:257 w:257)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 256]`.
	fn payout_stakers_alive_staked(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `35362 + n * (392 ±0)`
		//  Estimated: `94078 + n * (16024 ±3)`
		// Minimum execution time: 135_211 nanoseconds.
		Weight::from_parts(159_494_766, 0u64)
			.saturating_add(Weight::from_parts(0, 94078))
			// Standard Error: 54_916
			.saturating_add(Weight::from_parts(44_977_025, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 16024).saturating_mul(n.into()))
	}
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:3 w:3)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:2 w:2)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	/// The range of component `l` is `[1, 32]`.
	fn rebond(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2013 + l * (8 ±0)`
		//  Estimated: `31575`
		// Minimum execution time: 97_616 nanoseconds.
		Weight::from_parts(100_800_718, 0u64)
			.saturating_add(Weight::from_parts(0, 31575))
			// Standard Error: 4_128
			.saturating_add(Weight::from_parts(74_428, 0u64).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1 w:1)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1 w:1)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking SlashingSpans (r:1 w:1)
	// Proof Skipped: Staking SlashingSpans (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:2 w:2)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:1 w:1)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: VoterList CounterForListNodes (r:1 w:1)
	// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Balances Locks (r:1 w:1)
	// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	// Storage: Staking Payee (r:0 w:1)
	// Proof: Staking Payee (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	// Storage: Staking SpanSlash (r:0 w:100)
	// Proof: Staking SpanSlash (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
	/// The range of component `s` is `[1, 100]`.
	fn reap_stash(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2290 + s * (4 ±0)`
		//  Estimated: `42655 + s * (4 ±0)`
		// Minimum execution time: 103_010 nanoseconds.
		Weight::from_parts(107_424_481, 0u64)
			.saturating_add(Weight::from_parts(0, 42655))
			// Standard Error: 3_320
			.saturating_add(Weight::from_parts(1_603_566, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(12_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(s.into()))
	}
	// Storage: VoterList CounterForListNodes (r:1 w:0)
	// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:200 w:0)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:110 w:0)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:110 w:0)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:11 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:110 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:110 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking CounterForValidators (r:1 w:0)
	// Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ValidatorCount (r:1 w:0)
	// Proof: Staking ValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinimumValidatorCount (r:1 w:0)
	// Proof: Staking MinimumValidatorCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking CurrentEra (r:1 w:1)
	// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ErasStakersClipped (r:0 w:10)
	// Proof Skipped: Staking ErasStakersClipped (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasValidatorPrefs (r:0 w:10)
	// Proof: Staking ErasValidatorPrefs (max_values: None, max_size: Some(57), added: 2532, mode: MaxEncodedLen)
	// Storage: Staking ErasStakers (r:0 w:10)
	// Proof Skipped: Staking ErasStakers (max_values: None, max_size: None, mode: Measured)
	// Storage: Staking ErasTotalStake (r:0 w:1)
	// Proof: Staking ErasTotalStake (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	// Storage: Staking ErasStartSessionIndex (r:0 w:1)
	// Proof: Staking ErasStartSessionIndex (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	// Storage: Staking MinimumActiveStake (r:0 w:1)
	// Proof: Staking MinimumActiveStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `n` is `[0, 100]`.
	fn new_era(v: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (3592 ±0) + n * (714 ±0)`
		//  Estimated: `537149 + v * (16867 ±0) + n * (12899 ±0)`
		// Minimum execution time: 658_043 nanoseconds.
		Weight::from_parts(660_281_000, 0u64)
			.saturating_add(Weight::from_parts(0, 537149))
			// Standard Error: 2_195_296
			.saturating_add(Weight::from_parts(70_196_586, 0u64).saturating_mul(v.into()))
			// Standard Error: 218_749
			.saturating_add(Weight::from_parts(19_750_864, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(206_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 16867).saturating_mul(v.into()))
			.saturating_add(Weight::from_parts(0, 12899).saturating_mul(n.into()))
	}
	// Storage: VoterList CounterForListNodes (r:1 w:0)
	// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:200 w:0)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:1400 w:0)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1400 w:0)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:400 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: Staking Bonded (r:1400 w:0)
	// Proof: Staking Bonded (max_values: None, max_size: Some(72), added: 2547, mode: MaxEncodedLen)
	// Storage: Staking Ledger (r:1400 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking MinimumActiveStake (r:0 w:1)
	// Proof: Staking MinimumActiveStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `v` is `[200, 400]`.
	/// The range of component `n` is `[500, 1000]`.
	fn get_npos_voters(v: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2951 + v * (389 ±0) + n * (905 ±0)`
		//  Estimated: `518829 + v * (14439 ±0) + n * (11919 ±0)`
		// Minimum execution time: 21_002_921 nanoseconds.
		Weight::from_parts(21_184_855_000, 0u64)
			.saturating_add(Weight::from_parts(0, 518829))
			// Standard Error: 233_613
			.saturating_add(Weight::from_parts(13_363_337, 0u64).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(201_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 14439).saturating_mul(v.into()))
			.saturating_add(Weight::from_parts(0, 11919).saturating_mul(n.into()))
	}
	// Storage: Staking CounterForValidators (r:1 w:0)
	// Proof: Staking CounterForValidators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:401 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	/// The range of component `v` is `[200, 400]`.
	fn get_npos_targets(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512 + v * (50 ±0)`
		//  Estimated: `4999 + v * (2520 ±0)`
		// Minimum execution time: 1_103_555 nanoseconds.
		Weight::from_parts(52_053_306, 0u64)
			.saturating_add(Weight::from_parts(0, 4999))
			// Standard Error: 19_191
			.saturating_add(Weight::from_parts(5_380_903, 0u64).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 2520).saturating_mul(v.into()))
	}
	// Storage: Staking MinCommission (r:0 w:1)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinValidatorBond (r:0 w:1)
	// Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking MaxValidatorsCount (r:0 w:1)
	// Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ChillThreshold (r:0 w:1)
	// Proof: Staking ChillThreshold (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Staking MaxNominatorsCount (r:0 w:1)
	// Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:0 w:1)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_staking_configs_all_set() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_819 nanoseconds.
		Weight::from_parts(8_234_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking MinCommission (r:0 w:1)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinValidatorBond (r:0 w:1)
	// Proof: Staking MinValidatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking MaxValidatorsCount (r:0 w:1)
	// Proof: Staking MaxValidatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking ChillThreshold (r:0 w:1)
	// Proof: Staking ChillThreshold (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Staking MaxNominatorsCount (r:0 w:1)
	// Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:0 w:1)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_staking_configs_all_remove() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_185 nanoseconds.
		Weight::from_parts(7_520_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Proof: Staking Ledger (max_values: None, max_size: Some(1235), added: 3710, mode: MaxEncodedLen)
	// Storage: Staking Nominators (r:1 w:1)
	// Proof: Staking Nominators (max_values: None, max_size: Some(558), added: 3033, mode: MaxEncodedLen)
	// Storage: Staking ChillThreshold (r:1 w:0)
	// Proof: Staking ChillThreshold (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	// Storage: Staking MaxNominatorsCount (r:1 w:0)
	// Proof: Staking MaxNominatorsCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking CounterForNominators (r:1 w:1)
	// Proof: Staking CounterForNominators (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking MinNominatorBond (r:1 w:0)
	// Proof: Staking MinNominatorBond (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:1 w:0)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	// Storage: VoterList ListNodes (r:2 w:2)
	// Proof: VoterList ListNodes (max_values: None, max_size: Some(154), added: 2629, mode: MaxEncodedLen)
	// Storage: VoterList ListBags (r:1 w:1)
	// Proof: VoterList ListBags (max_values: None, max_size: Some(82), added: 2557, mode: MaxEncodedLen)
	// Storage: VoterList CounterForListNodes (r:1 w:1)
	// Proof: VoterList CounterForListNodes (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn chill_other() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1785`
		//  Estimated: `29482`
		// Minimum execution time: 83_769 nanoseconds.
		Weight::from_parts(86_442_000, 0u64)
			.saturating_add(Weight::from_parts(0, 29482))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	// Storage: Staking MinCommission (r:1 w:0)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	// Storage: Staking Validators (r:1 w:1)
	// Proof: Staking Validators (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	fn force_apply_min_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `613`
		//  Estimated: `4999`
		// Minimum execution time: 15_270 nanoseconds.
		Weight::from_parts(15_757_000, 0u64)
			.saturating_add(Weight::from_parts(0, 4999))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Staking MinCommission (r:0 w:1)
	// Proof: Staking MinCommission (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_min_commission() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_328 nanoseconds.
		Weight::from_parts(3_502_000, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
