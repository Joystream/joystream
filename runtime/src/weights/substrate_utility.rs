// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for substrate_utility
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./../target/release/joystream-node
// benchmark
// pallet
// --base-path=/mnt/disks/local-ssd/
// --pallet=substrate_utility
// --extrinsic=*
// --chain=dev
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./../devops/frame-weight-template.hbs
// --output=./../runtime/src/weights/substrate_utility.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub use substrate_utility::weights::WeightInfo;

/// Weights for substrate_utility using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn batch(c: u32, ) -> Weight {
		(18_478_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((4_361_000 as Weight).saturating_mul(c as Weight))
	}
	fn as_derivative() -> Weight {
		(2_280_000 as Weight)
	}
	fn batch_all(c: u32, ) -> Weight {
		(21_448_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((4_642_000 as Weight).saturating_mul(c as Weight))
	}
	fn dispatch_as() -> Weight {
		(13_380_000 as Weight)
	}
	fn force_batch(c: u32, ) -> Weight {
		(17_584_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((4_362_000 as Weight).saturating_mul(c as Weight))
	}
}
