// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_election_provider_support_benchmarking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-15, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=pallet_election_provider_support_benchmarking
// --extrinsic=*
// --chain=prod-test
// --steps=2
// --repeat=2
// --execution=wasm
// --template=./scripts/../devops/frame-weight-template.hbs
// --output=./scripts/../runtime/src/weights/pallet_election_provider_support_benchmarking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub use pallet_election_provider_support_benchmarking::weights::WeightInfo;

/// Weights for pallet_election_provider_support_benchmarking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `v` is `[1000, 2000]`.
	/// The range of component `t` is `[500, 1000]`.
	/// The range of component `d` is `[5, 16]`.
	fn phragmen(v: u32, _t: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_413_000 nanoseconds.
		Weight::from_parts(5_413_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_826_275
			.saturating_add(Weight::from_parts(4_576_023, 0).saturating_mul(v.into()))
			// Standard Error: 193_190_520
			.saturating_add(Weight::from_parts(930_362_548, 0).saturating_mul(d.into()))
	}
	/// The range of component `v` is `[1000, 2000]`.
	/// The range of component `t` is `[500, 1000]`.
	/// The range of component `d` is `[5, 16]`.
	fn phragmms(v: u32, _t: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_688_000 nanoseconds.
		Weight::from_parts(3_688_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_567_672
			.saturating_add(Weight::from_parts(3_777_978, 0).saturating_mul(v.into()))
			// Standard Error: 165_834_471
			.saturating_add(Weight::from_parts(860_747_576, 0).saturating_mul(d.into()))
	}
}
