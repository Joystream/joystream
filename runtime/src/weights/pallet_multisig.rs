// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("prod-test"), DB CACHE: 1024

// Executed Command:
// ./scripts/../target/release/joystream-node
// benchmark
// pallet
// --pallet=pallet_multisig
// --extrinsic=*
// --chain=prod-test
// --steps=50
// --repeat=20
// --execution=wasm
// --template=./scripts/../devops/frame-weight-template.hbs
// --output=./scripts/../runtime/src/weights/pallet_multisig.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub use pallet_multisig::weights::WeightInfo;

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_894 nanoseconds.
		Weight::from_parts(15_581_844, 0u64)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 5
			.saturating_add(Weight::from_parts(569, 0u64).saturating_mul(z.into()))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `367 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 47_341 nanoseconds.
		Weight::from_parts(36_305_906, 0u64)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 937
			.saturating_add(Weight::from_parts(126_511, 0u64).saturating_mul(s.into()))
			// Standard Error: 9
			.saturating_add(Weight::from_parts(1_508, 0u64).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `6811`
		// Minimum execution time: 33_468 nanoseconds.
		Weight::from_parts(23_656_470, 0u64)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 618
			.saturating_add(Weight::from_parts(109_796, 0u64).saturating_mul(s.into()))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(1_544, 0u64).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `490 + s * (33 ±0)`
		//  Estimated: `10404`
		// Minimum execution time: 52_237 nanoseconds.
		Weight::from_parts(38_987_573, 0u64)
			.saturating_add(Weight::from_parts(0, 10404))
			// Standard Error: 1_034
			.saturating_add(Weight::from_parts(150_759, 0u64).saturating_mul(s.into()))
			// Standard Error: 10
			.saturating_add(Weight::from_parts(1_577, 0u64).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `368 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 33_518 nanoseconds.
		Weight::from_parts(34_864_531, 0u64)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 1_246
			.saturating_add(Weight::from_parts(124_065, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `6811`
		// Minimum execution time: 21_585 nanoseconds.
		Weight::from_parts(22_455_505, 0u64)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 775
			.saturating_add(Weight::from_parts(113_679, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Multisig Multisigs (r:1 w:1)
	// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `559 + s * (1 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 33_654 nanoseconds.
		Weight::from_parts(35_754_941, 0u64)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 1_018
			.saturating_add(Weight::from_parts(116_827, 0u64).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}
